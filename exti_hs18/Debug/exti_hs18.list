
exti_hs18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008714  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08008828  08008828  00009828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cc8  08008cc8  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008cc8  08008cc8  00009cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd0  08008cd0  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd0  08008cd0  00009cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008cd4  08008cd4  00009cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008cd8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d8  08008eb0  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08008eb0  0000a430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0bd  00000000  00000000  0000a201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f87  00000000  00000000  000162be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00018248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa4  00000000  00000000  00018ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001896f  00000000  00000000  00019a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7c7  00000000  00000000  0003240b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c480  00000000  00000000  00041bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004efc  00000000  00000000  000ce098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000d2f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800880c 	.word	0x0800880c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800880c 	.word	0x0800880c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_d2lz>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460d      	mov	r5, r1
 8000c5e:	f7ff fead 	bl	80009bc <__aeabi_dcmplt>
 8000c62:	b928      	cbnz	r0, 8000c70 <__aeabi_d2lz+0x1c>
 8000c64:	4620      	mov	r0, r4
 8000c66:	4629      	mov	r1, r5
 8000c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c6c:	f000 b80a 	b.w	8000c84 <__aeabi_d2ulz>
 8000c70:	4620      	mov	r0, r4
 8000c72:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c76:	f000 f805 	bl	8000c84 <__aeabi_d2ulz>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	bd38      	pop	{r3, r4, r5, pc}
 8000c82:	bf00      	nop

08000c84 <__aeabi_d2ulz>:
 8000c84:	b5d0      	push	{r4, r6, r7, lr}
 8000c86:	2200      	movs	r2, #0
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <__aeabi_d2ulz+0x34>)
 8000c8a:	4606      	mov	r6, r0
 8000c8c:	460f      	mov	r7, r1
 8000c8e:	f7ff fc23 	bl	80004d8 <__aeabi_dmul>
 8000c92:	f7ff fef9 	bl	8000a88 <__aeabi_d2uiz>
 8000c96:	4604      	mov	r4, r0
 8000c98:	f7ff fba4 	bl	80003e4 <__aeabi_ui2d>
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <__aeabi_d2ulz+0x38>)
 8000ca0:	f7ff fc1a 	bl	80004d8 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4630      	mov	r0, r6
 8000caa:	4639      	mov	r1, r7
 8000cac:	f7ff fa5c 	bl	8000168 <__aeabi_dsub>
 8000cb0:	f7ff feea 	bl	8000a88 <__aeabi_d2uiz>
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb8:	3df00000 	.word	0x3df00000
 8000cbc:	41f00000 	.word	0x41f00000

08000cc0 <LCD_SendCommand>:
#include "main.h"

extern I2C_HandleTypeDef hi2c1; // Sử dụng I2C1

void LCD_SendCommand(char cmd)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
    char data_u = (cmd & 0xF0);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f023 030f 	bic.w	r3, r3, #15
 8000cd0:	73fb      	strb	r3, [r7, #15]
    char data_l = ((cmd << 4) & 0xF0);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	73bb      	strb	r3, [r7, #14]
    char data_t[4] = {data_u | 0x0C, data_u | 0x08, data_l | 0x0C, data_l | 0x08};
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	f043 030c 	orr.w	r3, r3, #12
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	723b      	strb	r3, [r7, #8]
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	727b      	strb	r3, [r7, #9]
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	f043 030c 	orr.w	r3, r3, #12
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	72bb      	strb	r3, [r7, #10]
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 100);
 8000d00:	f107 0208 	add.w	r2, r7, #8
 8000d04:	2364      	movs	r3, #100	@ 0x64
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2304      	movs	r3, #4
 8000d0a:	214e      	movs	r1, #78	@ 0x4e
 8000d0c:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <LCD_SendCommand+0x5c>)
 8000d0e:	f001 fb4f 	bl	80023b0 <HAL_I2C_Master_Transmit>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001f4 	.word	0x200001f4

08000d20 <LCD_SendData>:

void LCD_SendData(char data)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
    char data_u = (data & 0xF0);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f023 030f 	bic.w	r3, r3, #15
 8000d30:	73fb      	strb	r3, [r7, #15]
    char data_l = ((data << 4) & 0xF0);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	73bb      	strb	r3, [r7, #14]
    char data_t[4] = {data_u | 0x0D, data_u | 0x09, data_l | 0x0D, data_l | 0x09};
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	f043 030d 	orr.w	r3, r3, #13
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	723b      	strb	r3, [r7, #8]
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	f043 0309 	orr.w	r3, r3, #9
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	727b      	strb	r3, [r7, #9]
 8000d4c:	7bbb      	ldrb	r3, [r7, #14]
 8000d4e:	f043 030d 	orr.w	r3, r3, #13
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	72bb      	strb	r3, [r7, #10]
 8000d56:	7bbb      	ldrb	r3, [r7, #14]
 8000d58:	f043 0309 	orr.w	r3, r3, #9
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 100);
 8000d60:	f107 0208 	add.w	r2, r7, #8
 8000d64:	2364      	movs	r3, #100	@ 0x64
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2304      	movs	r3, #4
 8000d6a:	214e      	movs	r1, #78	@ 0x4e
 8000d6c:	4803      	ldr	r0, [pc, #12]	@ (8000d7c <LCD_SendData+0x5c>)
 8000d6e:	f001 fb1f 	bl	80023b0 <HAL_I2C_Master_Transmit>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001f4 	.word	0x200001f4

08000d80 <LCD_Clear>:

void LCD_Clear(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff ff9b 	bl	8000cc0 <LCD_SendCommand>
    HAL_Delay(2);
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f000 fece 	bl	8001b2c <HAL_Delay>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <LCD_PutCursor>:

void LCD_PutCursor(int row, int col)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
    int pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <LCD_PutCursor+0x16>
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	3380      	adds	r3, #128	@ 0x80
 8000da8:	e001      	b.n	8000dae <LCD_PutCursor+0x1a>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	33c0      	adds	r3, #192	@ 0xc0
 8000dae:	60fb      	str	r3, [r7, #12]
    LCD_SendCommand(pos);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff83 	bl	8000cc0 <LCD_SendCommand>
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <LCD_SendString>:

void LCD_SendString(char *str)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
    while (*str)
 8000dca:	e006      	b.n	8000dda <LCD_SendString+0x18>
        LCD_SendData(*str++);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ffa3 	bl	8000d20 <LCD_SendData>
    while (*str)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1f4      	bne.n	8000dcc <LCD_SendString+0xa>
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <LCD_Init>:

void LCD_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000df0:	2032      	movs	r0, #50	@ 0x32
 8000df2:	f000 fe9b 	bl	8001b2c <HAL_Delay>
    LCD_SendCommand(0x30);
 8000df6:	2030      	movs	r0, #48	@ 0x30
 8000df8:	f7ff ff62 	bl	8000cc0 <LCD_SendCommand>
    HAL_Delay(5);
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f000 fe95 	bl	8001b2c <HAL_Delay>
    LCD_SendCommand(0x30);
 8000e02:	2030      	movs	r0, #48	@ 0x30
 8000e04:	f7ff ff5c 	bl	8000cc0 <LCD_SendCommand>
    HAL_Delay(1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 fe8f 	bl	8001b2c <HAL_Delay>
    LCD_SendCommand(0x30);
 8000e0e:	2030      	movs	r0, #48	@ 0x30
 8000e10:	f7ff ff56 	bl	8000cc0 <LCD_SendCommand>
    HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f000 fe89 	bl	8001b2c <HAL_Delay>
    LCD_SendCommand(0x20);
 8000e1a:	2020      	movs	r0, #32
 8000e1c:	f7ff ff50 	bl	8000cc0 <LCD_SendCommand>
    HAL_Delay(10);
 8000e20:	200a      	movs	r0, #10
 8000e22:	f000 fe83 	bl	8001b2c <HAL_Delay>

    LCD_SendCommand(0x28);
 8000e26:	2028      	movs	r0, #40	@ 0x28
 8000e28:	f7ff ff4a 	bl	8000cc0 <LCD_SendCommand>
    LCD_SendCommand(0x08);
 8000e2c:	2008      	movs	r0, #8
 8000e2e:	f7ff ff47 	bl	8000cc0 <LCD_SendCommand>
    LCD_SendCommand(0x01);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f7ff ff44 	bl	8000cc0 <LCD_SendCommand>
    HAL_Delay(2);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f000 fe77 	bl	8001b2c <HAL_Delay>
    LCD_SendCommand(0x06);
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f7ff ff3e 	bl	8000cc0 <LCD_SendCommand>
    LCD_SendCommand(0x0C);
 8000e44:	200c      	movs	r0, #12
 8000e46:	f7ff ff3b 	bl	8000cc0 <LCD_SendCommand>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <DWT_Delay_Init>:
#include "DS18B20.h"
#include "main.h"

void DWT_Delay_Init(void) {
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <DWT_Delay_Init+0x2c>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <DWT_Delay_Init+0x2c>)
 8000e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e5e:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <DWT_Delay_Init+0x30>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <DWT_Delay_Init+0x30>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <DWT_Delay_Init+0x30>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6013      	str	r3, [r2, #0]
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000edf0 	.word	0xe000edf0
 8000e80:	e0001000 	.word	0xe0001000

08000e84 <DWT_Delay_us>:

void DWT_Delay_us(uint32_t us) {
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <DWT_Delay_us+0x40>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	60fb      	str	r3, [r7, #12]
    uint32_t delayTicks = us * (SystemCoreClock / 1000000);
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <DWT_Delay_us+0x44>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <DWT_Delay_us+0x48>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	0c9a      	lsrs	r2, r3, #18
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - startTick) < delayTicks);
 8000ea6:	bf00      	nop
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <DWT_Delay_us+0x40>)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d8f8      	bhi.n	8000ea8 <DWT_Delay_us+0x24>
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e0001000 	.word	0xe0001000
 8000ec8:	20000004 	.word	0x20000004
 8000ecc:	431bde83 	.word	0x431bde83

08000ed0 <DS18B20_Pin_Output>:

void DS18B20_Pin_Output(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = ds18_Pin;
 8000ee2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ee6:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ee8:	2311      	movs	r3, #17
 8000eea:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2302      	movs	r3, #2
 8000eee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(ds18_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <DS18B20_Pin_Output+0x34>)
 8000ef6:	f000 ff4b 	bl	8001d90 <HAL_GPIO_Init>
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40010800 	.word	0x40010800

08000f08 <DS18B20_Pin_Input>:

void DS18B20_Pin_Input(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = ds18_Pin;
 8000f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f1e:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(ds18_GPIO_Port, &GPIO_InitStruct);
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <DS18B20_Pin_Input+0x34>)
 8000f2e:	f000 ff2f 	bl	8001d90 <HAL_GPIO_Init>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40010800 	.word	0x40010800

08000f40 <DS18B20_Reset>:

uint8_t DS18B20_Reset(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
    DS18B20_Pin_Output();
 8000f46:	f7ff ffc3 	bl	8000ed0 <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(ds18_GPIO_Port, ds18_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f50:	4810      	ldr	r0, [pc, #64]	@ (8000f94 <DS18B20_Reset+0x54>)
 8000f52:	f001 f8b8 	bl	80020c6 <HAL_GPIO_WritePin>
    DWT_Delay_us(480);
 8000f56:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000f5a:	f7ff ff93 	bl	8000e84 <DWT_Delay_us>
    DS18B20_Pin_Input();
 8000f5e:	f7ff ffd3 	bl	8000f08 <DS18B20_Pin_Input>
    DWT_Delay_us(70);
 8000f62:	2046      	movs	r0, #70	@ 0x46
 8000f64:	f7ff ff8e 	bl	8000e84 <DWT_Delay_us>
    uint8_t presence = HAL_GPIO_ReadPin(ds18_GPIO_Port, ds18_Pin);
 8000f68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <DS18B20_Reset+0x54>)
 8000f6e:	f001 f893 	bl	8002098 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
    DWT_Delay_us(410);
 8000f76:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8000f7a:	f7ff ff83 	bl	8000e84 <DWT_Delay_us>
    return presence == 0 ? 1 : 0;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010800 	.word	0x40010800

08000f98 <DS18B20_WriteBit>:

void DS18B20_WriteBit(uint8_t bit) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
    DS18B20_Pin_Output();
 8000fa2:	f7ff ff95 	bl	8000ed0 <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(ds18_GPIO_Port, ds18_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fac:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <DS18B20_WriteBit+0x44>)
 8000fae:	f001 f88a 	bl	80020c6 <HAL_GPIO_WritePin>
    DWT_Delay_us(2);
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f7ff ff66 	bl	8000e84 <DWT_Delay_us>
    if (bit) HAL_GPIO_WritePin(ds18_GPIO_Port, ds18_Pin, GPIO_PIN_SET);
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <DS18B20_WriteBit+0x32>
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc4:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <DS18B20_WriteBit+0x44>)
 8000fc6:	f001 f87e 	bl	80020c6 <HAL_GPIO_WritePin>
    DWT_Delay_us(60);
 8000fca:	203c      	movs	r0, #60	@ 0x3c
 8000fcc:	f7ff ff5a 	bl	8000e84 <DWT_Delay_us>
    DS18B20_Pin_Input();
 8000fd0:	f7ff ff9a 	bl	8000f08 <DS18B20_Pin_Input>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010800 	.word	0x40010800

08000fe0 <DS18B20_ReadBit>:

uint8_t DS18B20_ReadBit(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
    DS18B20_Pin_Output();
 8000fe6:	f7ff ff73 	bl	8000ed0 <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(ds18_GPIO_Port, ds18_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <DS18B20_ReadBit+0x44>)
 8000ff2:	f001 f868 	bl	80020c6 <HAL_GPIO_WritePin>
    DWT_Delay_us(2);
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f7ff ff44 	bl	8000e84 <DWT_Delay_us>
    DS18B20_Pin_Input();
 8000ffc:	f7ff ff84 	bl	8000f08 <DS18B20_Pin_Input>
    DWT_Delay_us(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f7ff ff3f 	bl	8000e84 <DWT_Delay_us>
    uint8_t bit = HAL_GPIO_ReadPin(ds18_GPIO_Port, ds18_Pin);
 8001006:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <DS18B20_ReadBit+0x44>)
 800100c:	f001 f844 	bl	8002098 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
    DWT_Delay_us(50);
 8001014:	2032      	movs	r0, #50	@ 0x32
 8001016:	f7ff ff35 	bl	8000e84 <DWT_Delay_us>
    return bit;
 800101a:	79fb      	ldrb	r3, [r7, #7]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40010800 	.word	0x40010800

08001028 <DS18B20_WriteByte>:

void DS18B20_WriteByte(uint8_t data) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e00c      	b.n	8001052 <DS18B20_WriteByte+0x2a>
        DS18B20_WriteBit(data & 0x01);
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffa9 	bl	8000f98 <DS18B20_WriteBit>
        data >>= 1;
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	085b      	lsrs	r3, r3, #1
 800104a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	3301      	adds	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b07      	cmp	r3, #7
 8001056:	d9ef      	bls.n	8001038 <DS18B20_WriteByte+0x10>
    }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <DS18B20_ReadByte>:

uint8_t DS18B20_ReadByte(void) {
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 800106c:	2300      	movs	r3, #0
 800106e:	71bb      	strb	r3, [r7, #6]
 8001070:	e00e      	b.n	8001090 <DS18B20_ReadByte+0x2e>
        value >>= 1;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	71fb      	strb	r3, [r7, #7]
        if (DS18B20_ReadBit()) value |= 0x80;
 8001078:	f7ff ffb2 	bl	8000fe0 <DS18B20_ReadBit>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <DS18B20_ReadByte+0x28>
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001088:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	3301      	adds	r3, #1
 800108e:	71bb      	strb	r3, [r7, #6]
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	2b07      	cmp	r3, #7
 8001094:	d9ed      	bls.n	8001072 <DS18B20_ReadByte+0x10>
    }
    return value;
 8001096:	79fb      	ldrb	r3, [r7, #7]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <DS18B20_GetTemperature>:

float DS18B20_GetTemperature(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
    if (!DS18B20_Reset()) return -1000;
 80010a6:	f7ff ff4b 	bl	8000f40 <DS18B20_Reset>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <DS18B20_GetTemperature+0x14>
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <DS18B20_GetTemperature+0x90>)
 80010b2:	e038      	b.n	8001126 <DS18B20_GetTemperature+0x86>
    DS18B20_WriteByte(0xCC);
 80010b4:	20cc      	movs	r0, #204	@ 0xcc
 80010b6:	f7ff ffb7 	bl	8001028 <DS18B20_WriteByte>
    DS18B20_WriteByte(0x44);
 80010ba:	2044      	movs	r0, #68	@ 0x44
 80010bc:	f7ff ffb4 	bl	8001028 <DS18B20_WriteByte>
    while (!DS18B20_ReadBit());
 80010c0:	bf00      	nop
 80010c2:	f7ff ff8d 	bl	8000fe0 <DS18B20_ReadBit>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0fa      	beq.n	80010c2 <DS18B20_GetTemperature+0x22>
    if (!DS18B20_Reset()) return -1000;
 80010cc:	f7ff ff38 	bl	8000f40 <DS18B20_Reset>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <DS18B20_GetTemperature+0x3a>
 80010d6:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <DS18B20_GetTemperature+0x90>)
 80010d8:	e025      	b.n	8001126 <DS18B20_GetTemperature+0x86>
    DS18B20_WriteByte(0xCC);
 80010da:	20cc      	movs	r0, #204	@ 0xcc
 80010dc:	f7ff ffa4 	bl	8001028 <DS18B20_WriteByte>
    DS18B20_WriteByte(0xBE);
 80010e0:	20be      	movs	r0, #190	@ 0xbe
 80010e2:	f7ff ffa1 	bl	8001028 <DS18B20_WriteByte>
    uint8_t temp_LSB = DS18B20_ReadByte();
 80010e6:	f7ff ffbc 	bl	8001062 <DS18B20_ReadByte>
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_MSB = DS18B20_ReadByte();
 80010ee:	f7ff ffb8 	bl	8001062 <DS18B20_ReadByte>
 80010f2:	4603      	mov	r3, r0
 80010f4:	71bb      	strb	r3, [r7, #6]
    int16_t temp = (temp_MSB << 8) | temp_LSB;
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	80bb      	strh	r3, [r7, #4]
    return temp / 16.0;
 8001104:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f97b 	bl	8000404 <__aeabi_i2d>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <DS18B20_GetTemperature+0x94>)
 8001114:	f7ff fb0a 	bl	800072c <__aeabi_ddiv>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff fcd2 	bl	8000ac8 <__aeabi_d2f>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	c47a0000 	.word	0xc47a0000
 8001134:	40300000 	.word	0x40300000

08001138 <Display_Temp>:
/* USER CODE BEGIN 0 */
uint8_t button_type = 0;  // 0: Tăng, 1: Giảm
volatile int temp_set = 25;      // Giá trị nhiệt độ cài đặt
/* USER CODE END 0 */

void Display_Temp(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
    char buffer[16];
    float temp = DS18B20_GetTemperature();
 800113e:	f7ff ffaf 	bl	80010a0 <DS18B20_GetTemperature>
 8001142:	6178      	str	r0, [r7, #20]
    if (temp != -1000) {
 8001144:	4919      	ldr	r1, [pc, #100]	@ (80011ac <Display_Temp+0x74>)
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff fd52 	bl	8000bf0 <__aeabi_fcmpeq>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <Display_Temp+0x2e>
        sprintf(buffer, "Temp : %.2f C", temp);
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff f968 	bl	8000428 <__aeabi_f2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	1d38      	adds	r0, r7, #4
 800115e:	4914      	ldr	r1, [pc, #80]	@ (80011b0 <Display_Temp+0x78>)
 8001160:	f003 ff28 	bl	8004fb4 <siprintf>
 8001164:	e004      	b.n	8001170 <Display_Temp+0x38>
    } else {
        sprintf(buffer, "Sensor Error!");
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4912      	ldr	r1, [pc, #72]	@ (80011b4 <Display_Temp+0x7c>)
 800116a:	4618      	mov	r0, r3
 800116c:	f003 ff22 	bl	8004fb4 <siprintf>
    }
    LCD_Clear();
 8001170:	f7ff fe06 	bl	8000d80 <LCD_Clear>
    LCD_PutCursor(0, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fe0c 	bl	8000d94 <LCD_PutCursor>
    LCD_SendString(buffer);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fe1f 	bl	8000dc2 <LCD_SendString>
// in ra temp_set
    sprintf(buffer, "Temp Set : %d C", temp_set);
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <Display_Temp+0x80>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	490c      	ldr	r1, [pc, #48]	@ (80011bc <Display_Temp+0x84>)
 800118c:	4618      	mov	r0, r3
 800118e:	f003 ff11 	bl	8004fb4 <siprintf>
    LCD_PutCursor(1, 0);
 8001192:	2100      	movs	r1, #0
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff fdfd 	bl	8000d94 <LCD_PutCursor>
    LCD_SendString(buffer);
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe10 	bl	8000dc2 <LCD_SendString>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	c47a0000 	.word	0xc47a0000
 80011b0:	08008828 	.word	0x08008828
 80011b4:	08008838 	.word	0x08008838
 80011b8:	20000000 	.word	0x20000000
 80011bc:	08008848 	.word	0x08008848

080011c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(50);  // Chống dội phím
 80011ca:	2032      	movs	r0, #50	@ 0x32
 80011cc:	f000 fcae 	bl	8001b2c <HAL_Delay>
    if (GPIO_Pin == up_Pin) {  // Nút Tăng
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d10d      	bne.n	80011f2 <HAL_GPIO_EXTI_Callback+0x32>
        button_type = 0;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_GPIO_EXTI_Callback+0x6c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
        temp_set++;
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x70>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	4a13      	ldr	r2, [pc, #76]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x70>)
 80011e4:	6013      	str	r3, [r2, #0]
        Display_Temp();
 80011e6:	f7ff ffa7 	bl	8001138 <Display_Temp>
        HAL_TIM_Base_Start_IT(&htim1);  // Bật TIM1 để kiểm tra giữ nút
 80011ea:	4812      	ldr	r0, [pc, #72]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x74>)
 80011ec:	f002 f884 	bl	80032f8 <HAL_TIM_Base_Start_IT>
    }
    else if (GPIO_Pin == reset_Pin) {  // Nút Reset
        temp_set = 25;
        Display_Temp();
    }
}
 80011f0:	e018      	b.n	8001224 <HAL_GPIO_EXTI_Callback+0x64>
    else if (GPIO_Pin == down_Pin) {  // Nút Giảm
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d10d      	bne.n	8001214 <HAL_GPIO_EXTI_Callback+0x54>
        button_type = 1;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <HAL_GPIO_EXTI_Callback+0x6c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
        temp_set--;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x70>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x70>)
 8001206:	6013      	str	r3, [r2, #0]
        Display_Temp();
 8001208:	f7ff ff96 	bl	8001138 <Display_Temp>
        HAL_TIM_Base_Start_IT(&htim1);
 800120c:	4809      	ldr	r0, [pc, #36]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x74>)
 800120e:	f002 f873 	bl	80032f8 <HAL_TIM_Base_Start_IT>
}
 8001212:	e007      	b.n	8001224 <HAL_GPIO_EXTI_Callback+0x64>
    else if (GPIO_Pin == reset_Pin) {  // Nút Reset
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d104      	bne.n	8001224 <HAL_GPIO_EXTI_Callback+0x64>
        temp_set = 25;
 800121a:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x70>)
 800121c:	2219      	movs	r2, #25
 800121e:	601a      	str	r2, [r3, #0]
        Display_Temp();
 8001220:	f7ff ff8a 	bl	8001138 <Display_Temp>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002d8 	.word	0x200002d8
 8001230:	20000000 	.word	0x20000000
 8001234:	20000248 	.word	0x20000248

08001238 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {  // Kiểm tra nếu ngắt từ TIM1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a13      	ldr	r2, [pc, #76]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d120      	bne.n	800128c <HAL_TIM_PeriodElapsedCallback+0x54>
        if (HAL_GPIO_ReadPin(up_GPIO_Port, up_Pin) == GPIO_PIN_SET) {
 800124a:	2104      	movs	r1, #4
 800124c:	4812      	ldr	r0, [pc, #72]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800124e:	f000 ff23 	bl	8002098 <HAL_GPIO_ReadPin>
 8001252:	4603      	mov	r3, r0
 8001254:	2b01      	cmp	r3, #1
 8001256:	d107      	bne.n	8001268 <HAL_TIM_PeriodElapsedCallback+0x30>
            temp_set++;  // Nút TĂNG
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a0f      	ldr	r2, [pc, #60]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001260:	6013      	str	r3, [r2, #0]
            Display_Temp();
 8001262:	f7ff ff69 	bl	8001138 <Display_Temp>
        }
        else {
            HAL_TIM_Base_Stop_IT(&htim1);  // Thả nút → Dừng Timer
        }
    }
}
 8001266:	e011      	b.n	800128c <HAL_TIM_PeriodElapsedCallback+0x54>
        else if (HAL_GPIO_ReadPin(down_GPIO_Port, down_Pin) == GPIO_PIN_SET) {
 8001268:	2108      	movs	r1, #8
 800126a:	480b      	ldr	r0, [pc, #44]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800126c:	f000 ff14 	bl	8002098 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d107      	bne.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x4e>
            temp_set--;  // Nút GIẢM
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3b01      	subs	r3, #1
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800127e:	6013      	str	r3, [r2, #0]
            Display_Temp();
 8001280:	f7ff ff5a 	bl	8001138 <Display_Temp>
}
 8001284:	e002      	b.n	800128c <HAL_TIM_PeriodElapsedCallback+0x54>
            HAL_TIM_Base_Stop_IT(&htim1);  // Thả nút → Dừng Timer
 8001286:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001288:	f002 f888 	bl	800339c <HAL_TIM_Base_Stop_IT>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40012c00 	.word	0x40012c00
 8001298:	40010800 	.word	0x40010800
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000248 	.word	0x20000248

080012a4 <main>:


int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0


  HAL_Init();
 80012a8:	f000 fbde 	bl	8001a68 <HAL_Init>
  SystemClock_Config();
 80012ac:	f000 f82c 	bl	8001308 <SystemClock_Config>
  MX_GPIO_Init();
 80012b0:	f000 f946 	bl	8001540 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012b4:	f000 f86e 	bl	8001394 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012b8:	f000 f89a 	bl	80013f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012bc:	f000 f8e8 	bl	8001490 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
HAL_TIM_Base_Start_IT(&htim1);
 80012c0:	480e      	ldr	r0, [pc, #56]	@ (80012fc <main+0x58>)
 80012c2:	f002 f819 	bl	80032f8 <HAL_TIM_Base_Start_IT>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012c6:	2100      	movs	r1, #0
 80012c8:	480d      	ldr	r0, [pc, #52]	@ (8001300 <main+0x5c>)
 80012ca:	f002 f8e5 	bl	8003498 <HAL_TIM_PWM_Start>
DWT_Delay_Init();
 80012ce:	f7ff fdbf 	bl	8000e50 <DWT_Delay_Init>
LCD_Init();
 80012d2:	f7ff fd8b 	bl	8000dec <LCD_Init>
LCD_SendString("INSTALLINNG.....");
 80012d6:	480b      	ldr	r0, [pc, #44]	@ (8001304 <main+0x60>)
 80012d8:	f7ff fd73 	bl	8000dc2 <LCD_SendString>
HAL_Delay(2000);
 80012dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012e0:	f000 fc24 	bl	8001b2c <HAL_Delay>
LCD_Clear();
 80012e4:	f7ff fd4c 	bl	8000d80 <LCD_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  DS18B20_GetTemperature(); // Đọc nhiệt độ
 80012e8:	f7ff feda 	bl	80010a0 <DS18B20_GetTemperature>
	    Display_Temp(); // Hiển thị nhiệt độ lên LCD
 80012ec:	f7ff ff24 	bl	8001138 <Display_Temp>
	    HAL_Delay(500);
 80012f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012f4:	f000 fc1a 	bl	8001b2c <HAL_Delay>
	  DS18B20_GetTemperature(); // Đọc nhiệt độ
 80012f8:	bf00      	nop
 80012fa:	e7f5      	b.n	80012e8 <main+0x44>
 80012fc:	20000248 	.word	0x20000248
 8001300:	20000290 	.word	0x20000290
 8001304:	08008858 	.word	0x08008858

08001308 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b090      	sub	sp, #64	@ 0x40
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	2228      	movs	r2, #40	@ 0x28
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 feaf 	bl	800507a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001332:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001340:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001344:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001346:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fb85 	bl	8002a60 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800135c:	f000 f962 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001370:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fdf2 	bl	8002f64 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001386:	f000 f94d 	bl	8001624 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3740      	adds	r7, #64	@ 0x40
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_I2C1_Init+0x50>)
 800139a:	4a13      	ldr	r2, [pc, #76]	@ (80013e8 <MX_I2C1_Init+0x54>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013a0:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <MX_I2C1_Init+0x58>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <MX_I2C1_Init+0x50>)
 80013d2:	f000 fea9 	bl	8002128 <HAL_I2C_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013dc:	f000 f922 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200001f4 	.word	0x200001f4
 80013e8:	40005400 	.word	0x40005400
 80013ec:	000186a0 	.word	0x000186a0

080013f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_TIM1_Init+0x98>)
 800140e:	4a1f      	ldr	r2, [pc, #124]	@ (800148c <MX_TIM1_Init+0x9c>)
 8001410:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001412:	4b1d      	ldr	r3, [pc, #116]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001414:	2247      	movs	r2, #71	@ 0x47
 8001416:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <MX_TIM1_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800141e:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001420:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001424:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <MX_TIM1_Init+0x98>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001438:	4813      	ldr	r0, [pc, #76]	@ (8001488 <MX_TIM1_Init+0x98>)
 800143a:	f001 ff0d 	bl	8003258 <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001444:	f000 f8ee 	bl	8001624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	4619      	mov	r1, r3
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001456:	f002 fa73 	bl	8003940 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001460:	f000 f8e0 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_TIM1_Init+0x98>)
 8001472:	f002 fe01 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800147c:	f000 f8d2 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000248 	.word	0x20000248
 800148c:	40012c00 	.word	0x40012c00

08001490 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b2:	4b22      	ldr	r3, [pc, #136]	@ (800153c <MX_TIM2_Init+0xac>)
 80014b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ba:	4b20      	ldr	r3, [pc, #128]	@ (800153c <MX_TIM2_Init+0xac>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <MX_TIM2_Init+0xac>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_TIM2_Init+0xac>)
 80014c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ce:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <MX_TIM2_Init+0xac>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d4:	4b19      	ldr	r3, [pc, #100]	@ (800153c <MX_TIM2_Init+0xac>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014da:	4818      	ldr	r0, [pc, #96]	@ (800153c <MX_TIM2_Init+0xac>)
 80014dc:	f001 ff8c 	bl	80033f8 <HAL_TIM_PWM_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014e6:	f000 f89d 	bl	8001624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	4619      	mov	r1, r3
 80014f8:	4810      	ldr	r0, [pc, #64]	@ (800153c <MX_TIM2_Init+0xac>)
 80014fa:	f002 fdbd 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001504:	f000 f88e 	bl	8001624 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001508:	2360      	movs	r3, #96	@ 0x60
 800150a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	4807      	ldr	r0, [pc, #28]	@ (800153c <MX_TIM2_Init+0xac>)
 8001520:	f002 f94c 	bl	80037bc <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800152a:	f000 f87b 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800152e:	4803      	ldr	r0, [pc, #12]	@ (800153c <MX_TIM2_Init+0xac>)
 8001530:	f000 f930 	bl	8001794 <HAL_TIM_MspPostInit>

}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	@ 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000290 	.word	0x20000290

08001540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <MX_GPIO_Init+0xd8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a2f      	ldr	r2, [pc, #188]	@ (8001618 <MX_GPIO_Init+0xd8>)
 800155a:	f043 0320 	orr.w	r3, r3, #32
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <MX_GPIO_Init+0xd8>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <MX_GPIO_Init+0xd8>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a29      	ldr	r2, [pc, #164]	@ (8001618 <MX_GPIO_Init+0xd8>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <MX_GPIO_Init+0xd8>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <MX_GPIO_Init+0xd8>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <MX_GPIO_Init+0xd8>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <MX_GPIO_Init+0xd8>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_Pin|ds18_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80015a2:	481e      	ldr	r0, [pc, #120]	@ (800161c <MX_GPIO_Init+0xdc>)
 80015a4:	f000 fd8f 	bl	80020c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led_Pin ds18_Pin */
  GPIO_InitStruct.Pin = led_Pin|ds18_Pin;
 80015a8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	4816      	ldr	r0, [pc, #88]	@ (800161c <MX_GPIO_Init+0xdc>)
 80015c2:	f000 fbe5 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : up_Pin down_Pin reset_Pin */
  GPIO_InitStruct.Pin = up_Pin|down_Pin|reset_Pin;
 80015c6:	231c      	movs	r3, #28
 80015c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <MX_GPIO_Init+0xe0>)
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	4810      	ldr	r0, [pc, #64]	@ (800161c <MX_GPIO_Init+0xdc>)
 80015da:	f000 fbd9 	bl	8001d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2008      	movs	r0, #8
 80015e4:	f000 fb9d 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015e8:	2008      	movs	r0, #8
 80015ea:	f000 fbb6 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2009      	movs	r0, #9
 80015f4:	f000 fb95 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015f8:	2009      	movs	r0, #9
 80015fa:	f000 fbae 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	200a      	movs	r0, #10
 8001604:	f000 fb8d 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001608:	200a      	movs	r0, #10
 800160a:	f000 fba6 	bl	8001d5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40010800 	.word	0x40010800
 8001620:	10110000 	.word	0x10110000

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <Error_Handler+0x8>

08001630 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_MspInit+0x5c>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a14      	ldr	r2, [pc, #80]	@ (800168c <HAL_MspInit+0x5c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <HAL_MspInit+0x5c>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <HAL_MspInit+0x5c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_MspInit+0x60>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <HAL_MspInit+0x60>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000

08001694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a15      	ldr	r2, [pc, #84]	@ (8001704 <HAL_I2C_MspInit+0x70>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d123      	bne.n	80016fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <HAL_I2C_MspInit+0x74>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a13      	ldr	r2, [pc, #76]	@ (8001708 <HAL_I2C_MspInit+0x74>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_I2C_MspInit+0x74>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016cc:	23c0      	movs	r3, #192	@ 0xc0
 80016ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	2312      	movs	r3, #18
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	4619      	mov	r1, r3
 80016de:	480b      	ldr	r0, [pc, #44]	@ (800170c <HAL_I2C_MspInit+0x78>)
 80016e0:	f000 fb56 	bl	8001d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <HAL_I2C_MspInit+0x74>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a07      	ldr	r2, [pc, #28]	@ (8001708 <HAL_I2C_MspInit+0x74>)
 80016ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ee:	61d3      	str	r3, [r2, #28]
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_I2C_MspInit+0x74>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016fc:	bf00      	nop
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005400 	.word	0x40005400
 8001708:	40021000 	.word	0x40021000
 800170c:	40010c00 	.word	0x40010c00

08001710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <HAL_TIM_Base_MspInit+0x44>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d113      	bne.n	800174a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_TIM_Base_MspInit+0x48>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a0c      	ldr	r2, [pc, #48]	@ (8001758 <HAL_TIM_Base_MspInit+0x48>)
 8001728:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_TIM_Base_MspInit+0x48>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2019      	movs	r0, #25
 8001740:	f000 faef 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001744:	2019      	movs	r0, #25
 8001746:	f000 fb08 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40012c00 	.word	0x40012c00
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800176c:	d10b      	bne.n	8001786 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_TIM_PWM_MspInit+0x34>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a07      	ldr	r2, [pc, #28]	@ (8001790 <HAL_TIM_PWM_MspInit+0x34>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <HAL_TIM_PWM_MspInit+0x34>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b2:	d117      	bne.n	80017e4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <HAL_TIM_MspPostInit+0x58>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a0c      	ldr	r2, [pc, #48]	@ (80017ec <HAL_TIM_MspPostInit+0x58>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_TIM_MspPostInit+0x58>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = moto_Pin;
 80017cc:	2301      	movs	r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(moto_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4619      	mov	r1, r3
 80017de:	4804      	ldr	r0, [pc, #16]	@ (80017f0 <HAL_TIM_MspPostInit+0x5c>)
 80017e0:	f000 fad6 	bl	8001d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010800 	.word	0x40010800

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <NMI_Handler+0x4>

080017fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <MemManage_Handler+0x4>

0800180c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <UsageFault_Handler+0x4>

0800181c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001844:	f000 f956 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(up_Pin);
 8001850:	2004      	movs	r0, #4
 8001852:	f000 fc51 	bl	80020f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}

0800185a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(down_Pin);
 800185e:	2008      	movs	r0, #8
 8001860:	f000 fc4a 	bl	80020f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(reset_Pin);
 800186c:	2010      	movs	r0, #16
 800186e:	f000 fc43 	bl	80020f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <TIM1_UP_IRQHandler+0x10>)
 800187e:	f001 fead 	bl	80035dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000248 	.word	0x20000248

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <_kill>:

int _kill(int pid, int sig)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a4:	f003 fc3c 	bl	8005120 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2216      	movs	r2, #22
 80018ac:	601a      	str	r2, [r3, #0]
  return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_exit>:

void _exit (int status)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c2:	f04f 31ff 	mov.w	r1, #4294967295
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffe7 	bl	800189a <_kill>
  while (1) {}    /* Make sure we hang here */
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <_exit+0x12>

080018d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
  }

  return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
  }
  return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:

int _close(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001968:	605a      	str	r2, [r3, #4]
  return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <_isatty>:

int _isatty(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
	...

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f003 fba4 	bl	8005120 <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20005000 	.word	0x20005000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	200002dc 	.word	0x200002dc
 8001a0c:	20000430 	.word	0x20000430

08001a10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a1c:	f7ff fff8 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a20:	480b      	ldr	r0, [pc, #44]	@ (8001a50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a22:	490c      	ldr	r1, [pc, #48]	@ (8001a54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a24:	4a0c      	ldr	r2, [pc, #48]	@ (8001a58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a09      	ldr	r2, [pc, #36]	@ (8001a5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a38:	4c09      	ldr	r4, [pc, #36]	@ (8001a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a46:	f003 fb71 	bl	800512c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a4a:	f7ff fc2b 	bl	80012a4 <main>
  bx lr
 8001a4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a58:	08008cd8 	.word	0x08008cd8
  ldr r2, =_sbss
 8001a5c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a60:	20000430 	.word	0x20000430

08001a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC1_2_IRQHandler>
	...

08001a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_Init+0x28>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <HAL_Init+0x28>)
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f000 f947 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f000 f808 	bl	8001a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a84:	f7ff fdd4 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40022000 	.word	0x40022000

08001a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_InitTick+0x54>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_InitTick+0x58>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f95f 	bl	8001d76 <HAL_SYSTICK_Config>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00e      	b.n	8001ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d80a      	bhi.n	8001ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f000 f927 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad4:	4a06      	ldr	r2, [pc, #24]	@ (8001af0 <HAL_InitTick+0x5c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	2000000c 	.word	0x2000000c
 8001af0:	20000008 	.word	0x20000008

08001af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_IncTick+0x1c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_IncTick+0x20>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a03      	ldr	r2, [pc, #12]	@ (8001b14 <HAL_IncTick+0x20>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	200002e0 	.word	0x200002e0

08001b18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	@ (8001b28 <HAL_GetTick+0x10>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	200002e0 	.word	0x200002e0

08001b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffe0 	bl	8001b18 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000000c 	.word	0x2000000c

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4906      	ldr	r1, [pc, #24]	@ (8001c0c <__NVIC_EnableIRQ+0x34>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	@ (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	@ (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	@ 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff90 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff2d 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff42 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff90 	bl	8001c64 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff35 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b08b      	sub	sp, #44	@ 0x2c
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da2:	e169      	b.n	8002078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da4:	2201      	movs	r2, #1
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	f040 8158 	bne.w	8002072 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4a9a      	ldr	r2, [pc, #616]	@ (8002030 <HAL_GPIO_Init+0x2a0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d05e      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001dcc:	4a98      	ldr	r2, [pc, #608]	@ (8002030 <HAL_GPIO_Init+0x2a0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d875      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001dd2:	4a98      	ldr	r2, [pc, #608]	@ (8002034 <HAL_GPIO_Init+0x2a4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d058      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001dd8:	4a96      	ldr	r2, [pc, #600]	@ (8002034 <HAL_GPIO_Init+0x2a4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d86f      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001dde:	4a96      	ldr	r2, [pc, #600]	@ (8002038 <HAL_GPIO_Init+0x2a8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d052      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001de4:	4a94      	ldr	r2, [pc, #592]	@ (8002038 <HAL_GPIO_Init+0x2a8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d869      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001dea:	4a94      	ldr	r2, [pc, #592]	@ (800203c <HAL_GPIO_Init+0x2ac>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d04c      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001df0:	4a92      	ldr	r2, [pc, #584]	@ (800203c <HAL_GPIO_Init+0x2ac>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d863      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001df6:	4a92      	ldr	r2, [pc, #584]	@ (8002040 <HAL_GPIO_Init+0x2b0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d046      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001dfc:	4a90      	ldr	r2, [pc, #576]	@ (8002040 <HAL_GPIO_Init+0x2b0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d85d      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001e02:	2b12      	cmp	r3, #18
 8001e04:	d82a      	bhi.n	8001e5c <HAL_GPIO_Init+0xcc>
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d859      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e10 <HAL_GPIO_Init+0x80>)
 8001e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e10:	08001e8b 	.word	0x08001e8b
 8001e14:	08001e65 	.word	0x08001e65
 8001e18:	08001e77 	.word	0x08001e77
 8001e1c:	08001eb9 	.word	0x08001eb9
 8001e20:	08001ebf 	.word	0x08001ebf
 8001e24:	08001ebf 	.word	0x08001ebf
 8001e28:	08001ebf 	.word	0x08001ebf
 8001e2c:	08001ebf 	.word	0x08001ebf
 8001e30:	08001ebf 	.word	0x08001ebf
 8001e34:	08001ebf 	.word	0x08001ebf
 8001e38:	08001ebf 	.word	0x08001ebf
 8001e3c:	08001ebf 	.word	0x08001ebf
 8001e40:	08001ebf 	.word	0x08001ebf
 8001e44:	08001ebf 	.word	0x08001ebf
 8001e48:	08001ebf 	.word	0x08001ebf
 8001e4c:	08001ebf 	.word	0x08001ebf
 8001e50:	08001ebf 	.word	0x08001ebf
 8001e54:	08001e6d 	.word	0x08001e6d
 8001e58:	08001e81 	.word	0x08001e81
 8001e5c:	4a79      	ldr	r2, [pc, #484]	@ (8002044 <HAL_GPIO_Init+0x2b4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e62:	e02c      	b.n	8001ebe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e029      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	3304      	adds	r3, #4
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e024      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e01f      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	330c      	adds	r3, #12
 8001e86:	623b      	str	r3, [r7, #32]
          break;
 8001e88:	e01a      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e92:	2304      	movs	r3, #4
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e013      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	611a      	str	r2, [r3, #16]
          break;
 8001eaa:	e009      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eac:	2308      	movs	r3, #8
 8001eae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	615a      	str	r2, [r3, #20]
          break;
 8001eb6:	e003      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
          break;
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          break;
 8001ebe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2bff      	cmp	r3, #255	@ 0xff
 8001ec4:	d801      	bhi.n	8001eca <HAL_GPIO_Init+0x13a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	e001      	b.n	8001ece <HAL_GPIO_Init+0x13e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2bff      	cmp	r3, #255	@ 0xff
 8001ed4:	d802      	bhi.n	8001edc <HAL_GPIO_Init+0x14c>
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x152>
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	3b08      	subs	r3, #8
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	210f      	movs	r1, #15
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	6a39      	ldr	r1, [r7, #32]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	431a      	orrs	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80b1 	beq.w	8002072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f10:	4b4d      	ldr	r3, [pc, #308]	@ (8002048 <HAL_GPIO_Init+0x2b8>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a4c      	ldr	r2, [pc, #304]	@ (8002048 <HAL_GPIO_Init+0x2b8>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002048 <HAL_GPIO_Init+0x2b8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f28:	4a48      	ldr	r2, [pc, #288]	@ (800204c <HAL_GPIO_Init+0x2bc>)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a40      	ldr	r2, [pc, #256]	@ (8002050 <HAL_GPIO_Init+0x2c0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <HAL_GPIO_Init+0x1ec>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3f      	ldr	r2, [pc, #252]	@ (8002054 <HAL_GPIO_Init+0x2c4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00d      	beq.n	8001f78 <HAL_GPIO_Init+0x1e8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3e      	ldr	r2, [pc, #248]	@ (8002058 <HAL_GPIO_Init+0x2c8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <HAL_GPIO_Init+0x1e4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3d      	ldr	r2, [pc, #244]	@ (800205c <HAL_GPIO_Init+0x2cc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_GPIO_Init+0x1e0>
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e006      	b.n	8001f7e <HAL_GPIO_Init+0x1ee>
 8001f70:	2304      	movs	r3, #4
 8001f72:	e004      	b.n	8001f7e <HAL_GPIO_Init+0x1ee>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e002      	b.n	8001f7e <HAL_GPIO_Init+0x1ee>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_GPIO_Init+0x1ee>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f80:	f002 0203 	and.w	r2, r2, #3
 8001f84:	0092      	lsls	r2, r2, #2
 8001f86:	4093      	lsls	r3, r2
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f8e:	492f      	ldr	r1, [pc, #188]	@ (800204c <HAL_GPIO_Init+0x2bc>)
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	492c      	ldr	r1, [pc, #176]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	4928      	ldr	r1, [pc, #160]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fd0:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	4922      	ldr	r1, [pc, #136]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fde:	4b20      	ldr	r3, [pc, #128]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	491e      	ldr	r1, [pc, #120]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4918      	ldr	r1, [pc, #96]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002006:	4b16      	ldr	r3, [pc, #88]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4914      	ldr	r1, [pc, #80]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8002010:	4013      	ands	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d021      	beq.n	8002064 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	490e      	ldr	r1, [pc, #56]	@ (8002060 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e021      	b.n	8002072 <HAL_GPIO_Init+0x2e2>
 800202e:	bf00      	nop
 8002030:	10320000 	.word	0x10320000
 8002034:	10310000 	.word	0x10310000
 8002038:	10220000 	.word	0x10220000
 800203c:	10210000 	.word	0x10210000
 8002040:	10120000 	.word	0x10120000
 8002044:	10110000 	.word	0x10110000
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	40010800 	.word	0x40010800
 8002054:	40010c00 	.word	0x40010c00
 8002058:	40011000 	.word	0x40011000
 800205c:	40011400 	.word	0x40011400
 8002060:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_GPIO_Init+0x304>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	43db      	mvns	r3, r3
 800206c:	4909      	ldr	r1, [pc, #36]	@ (8002094 <HAL_GPIO_Init+0x304>)
 800206e:	4013      	ands	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	3301      	adds	r3, #1
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	f47f ae8e 	bne.w	8001da4 <HAL_GPIO_Init+0x14>
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	372c      	adds	r7, #44	@ 0x2c
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	40010400 	.word	0x40010400

08002098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e001      	b.n	80020ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	807b      	strh	r3, [r7, #2]
 80020d2:	4613      	mov	r3, r2
 80020d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d6:	787b      	ldrb	r3, [r7, #1]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e2:	e003      	b.n	80020ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	041a      	lsls	r2, r3, #16
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	611a      	str	r2, [r3, #16]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f852 	bl	80011c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e12b      	b.n	8002392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff faa0 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	@ 0x24
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800217a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800218a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800218c:	f001 f832 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8002190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a81      	ldr	r2, [pc, #516]	@ (800239c <HAL_I2C_Init+0x274>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d807      	bhi.n	80021ac <HAL_I2C_Init+0x84>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a80      	ldr	r2, [pc, #512]	@ (80023a0 <HAL_I2C_Init+0x278>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	bf94      	ite	ls
 80021a4:	2301      	movls	r3, #1
 80021a6:	2300      	movhi	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e006      	b.n	80021ba <HAL_I2C_Init+0x92>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4a7d      	ldr	r2, [pc, #500]	@ (80023a4 <HAL_I2C_Init+0x27c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	bf94      	ite	ls
 80021b4:	2301      	movls	r3, #1
 80021b6:	2300      	movhi	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0e7      	b.n	8002392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a78      	ldr	r2, [pc, #480]	@ (80023a8 <HAL_I2C_Init+0x280>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a6a      	ldr	r2, [pc, #424]	@ (800239c <HAL_I2C_Init+0x274>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d802      	bhi.n	80021fc <HAL_I2C_Init+0xd4>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3301      	adds	r3, #1
 80021fa:	e009      	b.n	8002210 <HAL_I2C_Init+0xe8>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	4a69      	ldr	r2, [pc, #420]	@ (80023ac <HAL_I2C_Init+0x284>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	3301      	adds	r3, #1
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002222:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	495c      	ldr	r1, [pc, #368]	@ (800239c <HAL_I2C_Init+0x274>)
 800222c:	428b      	cmp	r3, r1
 800222e:	d819      	bhi.n	8002264 <HAL_I2C_Init+0x13c>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1e59      	subs	r1, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fbb1 f3f3 	udiv	r3, r1, r3
 800223e:	1c59      	adds	r1, r3, #1
 8002240:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002244:	400b      	ands	r3, r1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_I2C_Init+0x138>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e59      	subs	r1, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fbb1 f3f3 	udiv	r3, r1, r3
 8002258:	3301      	adds	r3, #1
 800225a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225e:	e051      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 8002260:	2304      	movs	r3, #4
 8002262:	e04f      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d111      	bne.n	8002290 <HAL_I2C_Init+0x168>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e58      	subs	r0, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	440b      	add	r3, r1
 800227a:	fbb0 f3f3 	udiv	r3, r0, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e012      	b.n	80022b6 <HAL_I2C_Init+0x18e>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	0099      	lsls	r1, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Init+0x196>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e022      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10e      	bne.n	80022e4 <HAL_I2C_Init+0x1bc>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e58      	subs	r0, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	440b      	add	r3, r1
 80022d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e2:	e00f      	b.n	8002304 <HAL_I2C_Init+0x1dc>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e58      	subs	r0, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	0099      	lsls	r1, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	6809      	ldr	r1, [r1, #0]
 8002308:	4313      	orrs	r3, r2
 800230a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002332:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6911      	ldr	r1, [r2, #16]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68d2      	ldr	r2, [r2, #12]
 800233e:	4311      	orrs	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	430b      	orrs	r3, r1
 8002346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	000186a0 	.word	0x000186a0
 80023a0:	001e847f 	.word	0x001e847f
 80023a4:	003d08ff 	.word	0x003d08ff
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	10624dd3 	.word	0x10624dd3

080023b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	461a      	mov	r2, r3
 80023bc:	460b      	mov	r3, r1
 80023be:	817b      	strh	r3, [r7, #10]
 80023c0:	4613      	mov	r3, r2
 80023c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff fba8 	bl	8001b18 <HAL_GetTick>
 80023c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	f040 80e0 	bne.w	8002598 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2319      	movs	r3, #25
 80023de:	2201      	movs	r2, #1
 80023e0:	4970      	ldr	r1, [pc, #448]	@ (80025a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f964 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	e0d3      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_I2C_Master_Transmit+0x50>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0cc      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d007      	beq.n	8002426 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002434:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2221      	movs	r2, #33	@ 0x21
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2210      	movs	r2, #16
 8002442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	893a      	ldrh	r2, [r7, #8]
 8002456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a50      	ldr	r2, [pc, #320]	@ (80025a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f89c 	bl	80025ac <I2C_MasterRequestWrite>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e08d      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002494:	e066      	b.n	8002564 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	6a39      	ldr	r1, [r7, #32]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fa22 	bl	80028e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d107      	bne.n	80024be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06b      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	781a      	ldrb	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d11b      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x188>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	d017      	beq.n	8002538 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	6a39      	ldr	r1, [r7, #32]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fa19 	bl	8002974 <I2C_WaitOnBTFFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00d      	beq.n	8002564 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e01a      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	d194      	bne.n	8002496 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	00100002 	.word	0x00100002
 80025a8:	ffff0000 	.word	0xffff0000

080025ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	460b      	mov	r3, r1
 80025ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d006      	beq.n	80025d6 <I2C_MasterRequestWrite+0x2a>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d003      	beq.n	80025d6 <I2C_MasterRequestWrite+0x2a>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025d4:	d108      	bne.n	80025e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e00b      	b.n	8002600 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	2b12      	cmp	r3, #18
 80025ee:	d107      	bne.n	8002600 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f84f 	bl	80026b0 <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002626:	d103      	bne.n	8002630 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e035      	b.n	80026a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800263c:	d108      	bne.n	8002650 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800263e:	897b      	ldrh	r3, [r7, #10]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	e01b      	b.n	8002688 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002650:	897b      	ldrh	r3, [r7, #10]
 8002652:	11db      	asrs	r3, r3, #7
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0306 	and.w	r3, r3, #6
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f063 030f 	orn	r3, r3, #15
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	490e      	ldr	r1, [pc, #56]	@ (80026a8 <I2C_MasterRequestWrite+0xfc>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f898 	bl	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e010      	b.n	80026a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4907      	ldr	r1, [pc, #28]	@ (80026ac <I2C_MasterRequestWrite+0x100>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f888 	bl	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	00010008 	.word	0x00010008
 80026ac:	00010002 	.word	0x00010002

080026b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	4613      	mov	r3, r2
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c0:	e048      	b.n	8002754 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d044      	beq.n	8002754 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7ff fa25 	bl	8001b18 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d139      	bne.n	8002754 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	0c1b      	lsrs	r3, r3, #16
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10d      	bne.n	8002706 <I2C_WaitOnFlagUntilTimeout+0x56>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	43da      	mvns	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4013      	ands	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	e00c      	b.n	8002720 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	43da      	mvns	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4013      	ands	r3, r2
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	429a      	cmp	r2, r3
 8002724:	d116      	bne.n	8002754 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e023      	b.n	800279c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	0c1b      	lsrs	r3, r3, #16
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10d      	bne.n	800277a <I2C_WaitOnFlagUntilTimeout+0xca>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	43da      	mvns	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	e00c      	b.n	8002794 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	43da      	mvns	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	4013      	ands	r3, r2
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	429a      	cmp	r2, r3
 8002798:	d093      	beq.n	80026c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027b2:	e071      	b.n	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027c2:	d123      	bne.n	800280c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f043 0204 	orr.w	r2, r3, #4
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e067      	b.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d041      	beq.n	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002814:	f7ff f980 	bl	8001b18 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d302      	bcc.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d136      	bne.n	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10c      	bne.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	e00b      	b.n	8002866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	43da      	mvns	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4013      	ands	r3, r2
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e021      	b.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d10c      	bne.n	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	43da      	mvns	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4013      	ands	r3, r2
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e00b      	b.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4013      	ands	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f af6d 	bne.w	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f0:	e034      	b.n	800295c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f886 	bl	8002a04 <I2C_IsAcknowledgeFailed>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e034      	b.n	800296c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d028      	beq.n	800295c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7ff f905 	bl	8001b18 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d11d      	bne.n	800295c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292a:	2b80      	cmp	r3, #128	@ 0x80
 800292c:	d016      	beq.n	800295c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e007      	b.n	800296c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002966:	2b80      	cmp	r3, #128	@ 0x80
 8002968:	d1c3      	bne.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002980:	e034      	b.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f83e 	bl	8002a04 <I2C_IsAcknowledgeFailed>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e034      	b.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d028      	beq.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7ff f8bd 	bl	8001b18 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d11d      	bne.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d016      	beq.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e007      	b.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d1c3      	bne.n	8002982 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a1a:	d11b      	bne.n	8002a54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	f043 0204 	orr.w	r2, r3, #4
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e272      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8087 	beq.w	8002b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a80:	4b92      	ldr	r3, [pc, #584]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d112      	bne.n	8002abe <HAL_RCC_OscConfig+0x5e>
 8002a98:	4b8c      	ldr	r3, [pc, #560]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa4:	d10b      	bne.n	8002abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa6:	4b89      	ldr	r3, [pc, #548]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d06c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x12c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d168      	bne.n	8002b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e24c      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x76>
 8002ac8:	4b80      	ldr	r3, [pc, #512]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a7f      	ldr	r2, [pc, #508]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	e02e      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x98>
 8002ade:	4b7b      	ldr	r3, [pc, #492]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b78      	ldr	r3, [pc, #480]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a77      	ldr	r2, [pc, #476]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01d      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0xbc>
 8002b02:	4b72      	ldr	r3, [pc, #456]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a71      	ldr	r2, [pc, #452]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6e      	ldr	r2, [pc, #440]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6a      	ldr	r2, [pc, #424]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b68      	ldr	r3, [pc, #416]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a67      	ldr	r2, [pc, #412]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe ffec 	bl	8001b18 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fe ffe8 	bl	8001b18 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e200      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0xe4>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe ffd8 	bl	8001b18 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fe ffd4 	bl	8001b18 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1ec      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x10c>
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d063      	beq.n	8002c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d11c      	bne.n	8002bec <HAL_RCC_OscConfig+0x18c>
 8002bb2:	4b46      	ldr	r3, [pc, #280]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x176>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1c0      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4939      	ldr	r1, [pc, #228]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	e03a      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe ff8d 	bl	8001b18 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe ff89 	bl	8001b18 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e1a1      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4927      	ldr	r1, [pc, #156]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ff6c 	bl	8001b18 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe ff68 	bl	8001b18 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e180      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d03a      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b17      	ldr	r3, [pc, #92]	@ (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7fe ff4c 	bl	8001b18 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe ff48 	bl	8001b18 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e160      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f000 faba 	bl	800321c <RCC_Delay>
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002caa:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb0:	f7fe ff32 	bl	8001b18 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb6:	e00f      	b.n	8002cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fe ff2e 	bl	8001b18 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d908      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e146      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	42420000 	.word	0x42420000
 8002cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	4b92      	ldr	r3, [pc, #584]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e9      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a6 	beq.w	8002e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b88      	ldr	r3, [pc, #544]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	4a87      	ldr	r2, [pc, #540]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	61d3      	str	r3, [r2, #28]
 8002d0e:	4b85      	ldr	r3, [pc, #532]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d118      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7fe feef 	bl	8001b18 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7fe feeb 	bl	8001b18 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	@ 0x64
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e103      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b75      	ldr	r3, [pc, #468]	@ (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x312>
 8002d64:	4b6f      	ldr	r3, [pc, #444]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a6e      	ldr	r2, [pc, #440]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6213      	str	r3, [r2, #32]
 8002d70:	e02d      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x334>
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a69      	ldr	r2, [pc, #420]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b67      	ldr	r3, [pc, #412]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a66      	ldr	r2, [pc, #408]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	e01c      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d10c      	bne.n	8002db6 <HAL_RCC_OscConfig+0x356>
 8002d9c:	4b61      	ldr	r3, [pc, #388]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a60      	ldr	r2, [pc, #384]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6213      	str	r3, [r2, #32]
 8002da8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a5d      	ldr	r2, [pc, #372]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	e00b      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002db6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4a5a      	ldr	r2, [pc, #360]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6213      	str	r3, [r2, #32]
 8002dc2:	4b58      	ldr	r3, [pc, #352]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a57      	ldr	r2, [pc, #348]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d015      	beq.n	8002e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe fe9f 	bl	8001b18 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7fe fe9b 	bl	8001b18 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0b1      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ee      	beq.n	8002dde <HAL_RCC_OscConfig+0x37e>
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fe fe89 	bl	8001b18 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe fe85 	bl	8001b18 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e09b      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	4b40      	ldr	r3, [pc, #256]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ee      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e32:	4b3c      	ldr	r3, [pc, #240]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4a3b      	ldr	r2, [pc, #236]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8087 	beq.w	8002f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e48:	4b36      	ldr	r3, [pc, #216]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d061      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d146      	bne.n	8002eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5c:	4b33      	ldr	r3, [pc, #204]	@ (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fe fe59 	bl	8001b18 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7fe fe55 	bl	8001b18 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e06d      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7c:	4b29      	ldr	r3, [pc, #164]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e92:	4b24      	ldr	r3, [pc, #144]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4921      	ldr	r1, [pc, #132]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a19      	ldr	r1, [r3, #32]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	491b      	ldr	r1, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7fe fe29 	bl	8001b18 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fe fe25 	bl	8001b18 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e03d      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x46a>
 8002ee8:	e035      	b.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fe12 	bl	8001b18 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe fe0e 	bl	8001b18 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e026      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x498>
 8002f16:	e01e      	b.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e019      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <HAL_RCC_OscConfig+0x500>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b67      	ldr	r3, [pc, #412]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 0207 	bic.w	r2, r3, #7
 8002f8e:	4965      	ldr	r1, [pc, #404]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d040      	beq.n	8003084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4936      	ldr	r1, [pc, #216]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003054:	f7fe fd60 	bl	8001b18 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fe fd5c 	bl	8001b18 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e053      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b27      	ldr	r3, [pc, #156]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d210      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0207 	bic.w	r2, r3, #7
 800309a:	4922      	ldr	r1, [pc, #136]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	@ (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	@ (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_RCC_ClockConfig+0x1cc>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_RCC_ClockConfig+0x1d0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fcbe 	bl	8001a94 <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
 800312c:	0800886c 	.word	0x0800886c
 8003130:	20000004 	.word	0x20000004
 8003134:	20000008 	.word	0x20000008

08003138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003152:	4b1e      	ldr	r3, [pc, #120]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b04      	cmp	r3, #4
 8003160:	d002      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x30>
 8003162:	2b08      	cmp	r3, #8
 8003164:	d003      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0x36>
 8003166:	e027      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003168:	4b19      	ldr	r3, [pc, #100]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800316a:	613b      	str	r3, [r7, #16]
      break;
 800316c:	e027      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	0c9b      	lsrs	r3, r3, #18
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003178:	5cd3      	ldrb	r3, [r2, r3]
 800317a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003186:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	0c5b      	lsrs	r3, r3, #17
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	4a11      	ldr	r2, [pc, #68]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a0d      	ldr	r2, [pc, #52]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800319a:	fb03 f202 	mul.w	r2, r3, r2
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e004      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a0c      	ldr	r2, [pc, #48]	@ (80031dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	613b      	str	r3, [r7, #16]
      break;
 80031b6:	e002      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ba:	613b      	str	r3, [r7, #16]
      break;
 80031bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031be:	693b      	ldr	r3, [r7, #16]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	007a1200 	.word	0x007a1200
 80031d4:	08008884 	.word	0x08008884
 80031d8:	08008894 	.word	0x08008894
 80031dc:	003d0900 	.word	0x003d0900

080031e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b02      	ldr	r3, [pc, #8]	@ (80031f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	20000004 	.word	0x20000004

080031f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f8:	f7ff fff2 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4903      	ldr	r1, [pc, #12]	@ (8003218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	0800887c 	.word	0x0800887c

0800321c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <RCC_Delay+0x34>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <RCC_Delay+0x38>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0a5b      	lsrs	r3, r3, #9
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003238:	bf00      	nop
  }
  while (Delay --);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1e5a      	subs	r2, r3, #1
 800323e:	60fa      	str	r2, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f9      	bne.n	8003238 <RCC_Delay+0x1c>
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	20000004 	.word	0x20000004
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e041      	b.n	80032ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fa46 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fc3e 	bl	8003b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d001      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e03a      	b.n	8003386 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <HAL_TIM_Base_Start_IT+0x98>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x58>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333a:	d009      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x58>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a14      	ldr	r2, [pc, #80]	@ (8003394 <HAL_TIM_Base_Start_IT+0x9c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x58>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <HAL_TIM_Base_Start_IT+0xa0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d010      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	e007      	b.n	8003384 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800

0800339c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6a1a      	ldr	r2, [r3, #32]
 80033ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10f      	bne.n	80033e4 <HAL_TIM_Base_Stop_IT+0x48>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6a1a      	ldr	r2, [r3, #32]
 80033ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_Base_Stop_IT+0x48>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e041      	b.n	800348e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe f99c 	bl	800175c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f000 fb6e 	bl	8003b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_TIM_PWM_Start+0x24>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e022      	b.n	8003502 <HAL_TIM_PWM_Start+0x6a>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d109      	bne.n	80034d6 <HAL_TIM_PWM_Start+0x3e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e015      	b.n	8003502 <HAL_TIM_PWM_Start+0x6a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d109      	bne.n	80034f0 <HAL_TIM_PWM_Start+0x58>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e008      	b.n	8003502 <HAL_TIM_PWM_Start+0x6a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e05e      	b.n	80035c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0x82>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003518:	e013      	b.n	8003542 <HAL_TIM_PWM_Start+0xaa>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0x92>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003528:	e00b      	b.n	8003542 <HAL_TIM_PWM_Start+0xaa>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0xa2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003538:	e003      	b.n	8003542 <HAL_TIM_PWM_Start+0xaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fd70 	bl	8004030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1e      	ldr	r2, [pc, #120]	@ (80035d0 <HAL_TIM_PWM_Start+0x138>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d107      	bne.n	800356a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a18      	ldr	r2, [pc, #96]	@ (80035d0 <HAL_TIM_PWM_Start+0x138>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_TIM_PWM_Start+0xfa>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357c:	d009      	beq.n	8003592 <HAL_TIM_PWM_Start+0xfa>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a14      	ldr	r2, [pc, #80]	@ (80035d4 <HAL_TIM_PWM_Start+0x13c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIM_PWM_Start+0xfa>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <HAL_TIM_PWM_Start+0x140>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d111      	bne.n	80035b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b06      	cmp	r3, #6
 80035a2:	d010      	beq.n	80035c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b4:	e007      	b.n	80035c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800

080035dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d020      	beq.n	8003640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa5a 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fa4d 	bl	8003ace <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fa5c 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d020      	beq.n	800368c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0204 	mvn.w	r2, #4
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa34 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa27 	bl	8003ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa36 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d020      	beq.n	80036d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0208 	mvn.w	r2, #8
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2204      	movs	r2, #4
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa0e 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa01 	bl	8003ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fa10 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0210 	mvn.w	r2, #16
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2208      	movs	r2, #8
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f9e8 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f9db 	bl	8003ace <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f9ea 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00c      	beq.n	8003748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0201 	mvn.w	r2, #1
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fd78 	bl	8001238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fced 	bl	8004146 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00c      	beq.n	8003790 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9ba 	bl	8003b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00c      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0220 	mvn.w	r2, #32
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fcc0 	bl	8004134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0ae      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	f200 809f 	bhi.w	8003928 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037ea:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003825 	.word	0x08003825
 80037f4:	08003929 	.word	0x08003929
 80037f8:	08003929 	.word	0x08003929
 80037fc:	08003929 	.word	0x08003929
 8003800:	08003865 	.word	0x08003865
 8003804:	08003929 	.word	0x08003929
 8003808:	08003929 	.word	0x08003929
 800380c:	08003929 	.word	0x08003929
 8003810:	080038a7 	.word	0x080038a7
 8003814:	08003929 	.word	0x08003929
 8003818:	08003929 	.word	0x08003929
 800381c:	08003929 	.word	0x08003929
 8003820:	080038e7 	.word	0x080038e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f9e2 	bl	8003bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0208 	orr.w	r2, r2, #8
 800383e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6999      	ldr	r1, [r3, #24]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	619a      	str	r2, [r3, #24]
      break;
 8003862:	e064      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fa28 	bl	8003cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800387e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6999      	ldr	r1, [r3, #24]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	021a      	lsls	r2, r3, #8
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	619a      	str	r2, [r3, #24]
      break;
 80038a4:	e043      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fa71 	bl	8003d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0208 	orr.w	r2, r2, #8
 80038c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0204 	bic.w	r2, r2, #4
 80038d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69d9      	ldr	r1, [r3, #28]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	61da      	str	r2, [r3, #28]
      break;
 80038e4:	e023      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fabb 	bl	8003e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69d9      	ldr	r1, [r3, #28]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	021a      	lsls	r2, r3, #8
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	61da      	str	r2, [r3, #28]
      break;
 8003926:	e002      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	75fb      	strb	r3, [r7, #23]
      break;
 800392c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_TIM_ConfigClockSource+0x1c>
 8003958:	2302      	movs	r3, #2
 800395a:	e0b4      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x186>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800397a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003982:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003994:	d03e      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0xd4>
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800399a:	f200 8087 	bhi.w	8003aac <HAL_TIM_ConfigClockSource+0x16c>
 800399e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039a2:	f000 8086 	beq.w	8003ab2 <HAL_TIM_ConfigClockSource+0x172>
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039aa:	d87f      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x16c>
 80039ac:	2b70      	cmp	r3, #112	@ 0x70
 80039ae:	d01a      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0xa6>
 80039b0:	2b70      	cmp	r3, #112	@ 0x70
 80039b2:	d87b      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x16c>
 80039b4:	2b60      	cmp	r3, #96	@ 0x60
 80039b6:	d050      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0x11a>
 80039b8:	2b60      	cmp	r3, #96	@ 0x60
 80039ba:	d877      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x16c>
 80039bc:	2b50      	cmp	r3, #80	@ 0x50
 80039be:	d03c      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0xfa>
 80039c0:	2b50      	cmp	r3, #80	@ 0x50
 80039c2:	d873      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b40      	cmp	r3, #64	@ 0x40
 80039c6:	d058      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0x13a>
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d86f      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b30      	cmp	r3, #48	@ 0x30
 80039ce:	d064      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x15a>
 80039d0:	2b30      	cmp	r3, #48	@ 0x30
 80039d2:	d86b      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d060      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x15a>
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d867      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d05c      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x15a>
 80039e0:	2b10      	cmp	r3, #16
 80039e2:	d05a      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x15a>
 80039e4:	e062      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039f6:	f000 fafc 	bl	8003ff2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	609a      	str	r2, [r3, #8]
      break;
 8003a12:	e04f      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a24:	f000 fae5 	bl	8003ff2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a36:	609a      	str	r2, [r3, #8]
      break;
 8003a38:	e03c      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	461a      	mov	r2, r3
 8003a48:	f000 fa5c 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2150      	movs	r1, #80	@ 0x50
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fab3 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 8003a58:	e02c      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a66:	461a      	mov	r2, r3
 8003a68:	f000 fa7a 	bl	8003f60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2160      	movs	r1, #96	@ 0x60
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 faa3 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 8003a78:	e01c      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a86:	461a      	mov	r2, r3
 8003a88:	f000 fa3c 	bl	8003f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2140      	movs	r1, #64	@ 0x40
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fa93 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 8003a98:	e00c      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f000 fa8a 	bl	8003fbe <TIM_ITRx_SetConfig>
      break;
 8003aaa:	e003      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab0:	e000      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ab2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
	...

08003b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003be8 <TIM_Base_SetConfig+0xd0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <TIM_Base_SetConfig+0x30>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b36:	d007      	beq.n	8003b48 <TIM_Base_SetConfig+0x30>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bec <TIM_Base_SetConfig+0xd4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_Base_SetConfig+0x30>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf0 <TIM_Base_SetConfig+0xd8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d108      	bne.n	8003b5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a22      	ldr	r2, [pc, #136]	@ (8003be8 <TIM_Base_SetConfig+0xd0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00b      	beq.n	8003b7a <TIM_Base_SetConfig+0x62>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b68:	d007      	beq.n	8003b7a <TIM_Base_SetConfig+0x62>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bec <TIM_Base_SetConfig+0xd4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <TIM_Base_SetConfig+0x62>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf0 <TIM_Base_SetConfig+0xd8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d108      	bne.n	8003b8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <TIM_Base_SetConfig+0xd0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d103      	bne.n	8003bc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f023 0201 	bic.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	611a      	str	r2, [r3, #16]
  }
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800

08003bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f023 0201 	bic.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f023 0302 	bic.w	r3, r3, #2
 8003c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <TIM_OC1_SetConfig+0xc8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10c      	bne.n	8003c6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0308 	bic.w	r3, r3, #8
 8003c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f023 0304 	bic.w	r3, r3, #4
 8003c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a13      	ldr	r2, [pc, #76]	@ (8003cbc <TIM_OC1_SetConfig+0xc8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d111      	bne.n	8003c96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40012c00 	.word	0x40012c00

08003cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f023 0210 	bic.w	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0320 	bic.w	r3, r3, #32
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d90 <TIM_OC2_SetConfig+0xd0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10d      	bne.n	8003d3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a14      	ldr	r2, [pc, #80]	@ (8003d90 <TIM_OC2_SetConfig+0xd0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d113      	bne.n	8003d6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	40012c00 	.word	0x40012c00

08003d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a1d      	ldr	r2, [pc, #116]	@ (8003e64 <TIM_OC3_SetConfig+0xd0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10d      	bne.n	8003e0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a14      	ldr	r2, [pc, #80]	@ (8003e64 <TIM_OC3_SetConfig+0xd0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d113      	bne.n	8003e3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40012c00 	.word	0x40012c00

08003e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	031b      	lsls	r3, r3, #12
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8003f00 <TIM_OC4_SetConfig+0x98>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d109      	bne.n	8003edc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	019b      	lsls	r3, r3, #6
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	40012c00 	.word	0x40012c00

08003f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0201 	bic.w	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 030a 	bic.w	r3, r3, #10
 8003f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f023 0210 	bic.w	r2, r3, #16
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	031b      	lsls	r3, r3, #12
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	621a      	str	r2, [r3, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f043 0307 	orr.w	r3, r3, #7
 8003fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	609a      	str	r2, [r3, #8]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800400c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	021a      	lsls	r2, r3, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	431a      	orrs	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4313      	orrs	r3, r2
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	609a      	str	r2, [r3, #8]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2201      	movs	r2, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1a      	ldr	r2, [r3, #32]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	43db      	mvns	r3, r3
 8004052:	401a      	ands	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	431a      	orrs	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800408c:	2302      	movs	r3, #2
 800408e:	e046      	b.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a16      	ldr	r2, [pc, #88]	@ (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040dc:	d009      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a12      	ldr	r2, [pc, #72]	@ (800412c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a10      	ldr	r2, [pc, #64]	@ (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10c      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4313      	orrs	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40012c00 	.word	0x40012c00
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800

08004134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <__cvt>:
 8004158:	2b00      	cmp	r3, #0
 800415a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800415e:	461d      	mov	r5, r3
 8004160:	bfbb      	ittet	lt
 8004162:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004166:	461d      	movlt	r5, r3
 8004168:	2300      	movge	r3, #0
 800416a:	232d      	movlt	r3, #45	@ 0x2d
 800416c:	b088      	sub	sp, #32
 800416e:	4614      	mov	r4, r2
 8004170:	bfb8      	it	lt
 8004172:	4614      	movlt	r4, r2
 8004174:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004176:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004178:	7013      	strb	r3, [r2, #0]
 800417a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800417c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004180:	f023 0820 	bic.w	r8, r3, #32
 8004184:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004188:	d005      	beq.n	8004196 <__cvt+0x3e>
 800418a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800418e:	d100      	bne.n	8004192 <__cvt+0x3a>
 8004190:	3601      	adds	r6, #1
 8004192:	2302      	movs	r3, #2
 8004194:	e000      	b.n	8004198 <__cvt+0x40>
 8004196:	2303      	movs	r3, #3
 8004198:	aa07      	add	r2, sp, #28
 800419a:	9204      	str	r2, [sp, #16]
 800419c:	aa06      	add	r2, sp, #24
 800419e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80041a2:	e9cd 3600 	strd	r3, r6, [sp]
 80041a6:	4622      	mov	r2, r4
 80041a8:	462b      	mov	r3, r5
 80041aa:	f001 f881 	bl	80052b0 <_dtoa_r>
 80041ae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80041b2:	4607      	mov	r7, r0
 80041b4:	d119      	bne.n	80041ea <__cvt+0x92>
 80041b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80041b8:	07db      	lsls	r3, r3, #31
 80041ba:	d50e      	bpl.n	80041da <__cvt+0x82>
 80041bc:	eb00 0906 	add.w	r9, r0, r6
 80041c0:	2200      	movs	r2, #0
 80041c2:	2300      	movs	r3, #0
 80041c4:	4620      	mov	r0, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	f7fc fbee 	bl	80009a8 <__aeabi_dcmpeq>
 80041cc:	b108      	cbz	r0, 80041d2 <__cvt+0x7a>
 80041ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80041d2:	2230      	movs	r2, #48	@ 0x30
 80041d4:	9b07      	ldr	r3, [sp, #28]
 80041d6:	454b      	cmp	r3, r9
 80041d8:	d31e      	bcc.n	8004218 <__cvt+0xc0>
 80041da:	4638      	mov	r0, r7
 80041dc:	9b07      	ldr	r3, [sp, #28]
 80041de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80041e0:	1bdb      	subs	r3, r3, r7
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	b008      	add	sp, #32
 80041e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80041ee:	eb00 0906 	add.w	r9, r0, r6
 80041f2:	d1e5      	bne.n	80041c0 <__cvt+0x68>
 80041f4:	7803      	ldrb	r3, [r0, #0]
 80041f6:	2b30      	cmp	r3, #48	@ 0x30
 80041f8:	d10a      	bne.n	8004210 <__cvt+0xb8>
 80041fa:	2200      	movs	r2, #0
 80041fc:	2300      	movs	r3, #0
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fc fbd1 	bl	80009a8 <__aeabi_dcmpeq>
 8004206:	b918      	cbnz	r0, 8004210 <__cvt+0xb8>
 8004208:	f1c6 0601 	rsb	r6, r6, #1
 800420c:	f8ca 6000 	str.w	r6, [sl]
 8004210:	f8da 3000 	ldr.w	r3, [sl]
 8004214:	4499      	add	r9, r3
 8004216:	e7d3      	b.n	80041c0 <__cvt+0x68>
 8004218:	1c59      	adds	r1, r3, #1
 800421a:	9107      	str	r1, [sp, #28]
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	e7d9      	b.n	80041d4 <__cvt+0x7c>

08004220 <__exponent>:
 8004220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004222:	2900      	cmp	r1, #0
 8004224:	bfb6      	itet	lt
 8004226:	232d      	movlt	r3, #45	@ 0x2d
 8004228:	232b      	movge	r3, #43	@ 0x2b
 800422a:	4249      	neglt	r1, r1
 800422c:	2909      	cmp	r1, #9
 800422e:	7002      	strb	r2, [r0, #0]
 8004230:	7043      	strb	r3, [r0, #1]
 8004232:	dd29      	ble.n	8004288 <__exponent+0x68>
 8004234:	f10d 0307 	add.w	r3, sp, #7
 8004238:	461d      	mov	r5, r3
 800423a:	270a      	movs	r7, #10
 800423c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004240:	461a      	mov	r2, r3
 8004242:	fb07 1416 	mls	r4, r7, r6, r1
 8004246:	3430      	adds	r4, #48	@ 0x30
 8004248:	f802 4c01 	strb.w	r4, [r2, #-1]
 800424c:	460c      	mov	r4, r1
 800424e:	2c63      	cmp	r4, #99	@ 0x63
 8004250:	4631      	mov	r1, r6
 8004252:	f103 33ff 	add.w	r3, r3, #4294967295
 8004256:	dcf1      	bgt.n	800423c <__exponent+0x1c>
 8004258:	3130      	adds	r1, #48	@ 0x30
 800425a:	1e94      	subs	r4, r2, #2
 800425c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004260:	4623      	mov	r3, r4
 8004262:	1c41      	adds	r1, r0, #1
 8004264:	42ab      	cmp	r3, r5
 8004266:	d30a      	bcc.n	800427e <__exponent+0x5e>
 8004268:	f10d 0309 	add.w	r3, sp, #9
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	42ac      	cmp	r4, r5
 8004270:	bf88      	it	hi
 8004272:	2300      	movhi	r3, #0
 8004274:	3302      	adds	r3, #2
 8004276:	4403      	add	r3, r0
 8004278:	1a18      	subs	r0, r3, r0
 800427a:	b003      	add	sp, #12
 800427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004282:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004286:	e7ed      	b.n	8004264 <__exponent+0x44>
 8004288:	2330      	movs	r3, #48	@ 0x30
 800428a:	3130      	adds	r1, #48	@ 0x30
 800428c:	7083      	strb	r3, [r0, #2]
 800428e:	70c1      	strb	r1, [r0, #3]
 8004290:	1d03      	adds	r3, r0, #4
 8004292:	e7f1      	b.n	8004278 <__exponent+0x58>

08004294 <_printf_float>:
 8004294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004298:	b091      	sub	sp, #68	@ 0x44
 800429a:	460c      	mov	r4, r1
 800429c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80042a0:	4616      	mov	r6, r2
 80042a2:	461f      	mov	r7, r3
 80042a4:	4605      	mov	r5, r0
 80042a6:	f000 fef1 	bl	800508c <_localeconv_r>
 80042aa:	6803      	ldr	r3, [r0, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	9308      	str	r3, [sp, #32]
 80042b0:	f7fb ff4e 	bl	8000150 <strlen>
 80042b4:	2300      	movs	r3, #0
 80042b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80042b8:	f8d8 3000 	ldr.w	r3, [r8]
 80042bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80042be:	3307      	adds	r3, #7
 80042c0:	f023 0307 	bic.w	r3, r3, #7
 80042c4:	f103 0208 	add.w	r2, r3, #8
 80042c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80042cc:	f8d4 b000 	ldr.w	fp, [r4]
 80042d0:	f8c8 2000 	str.w	r2, [r8]
 80042d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80042dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042de:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80042ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80042ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004560 <_printf_float+0x2cc>)
 80042f0:	f7fc fb8c 	bl	8000a0c <__aeabi_dcmpun>
 80042f4:	bb70      	cbnz	r0, 8004354 <_printf_float+0xc0>
 80042f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80042fa:	f04f 32ff 	mov.w	r2, #4294967295
 80042fe:	4b98      	ldr	r3, [pc, #608]	@ (8004560 <_printf_float+0x2cc>)
 8004300:	f7fc fb66 	bl	80009d0 <__aeabi_dcmple>
 8004304:	bb30      	cbnz	r0, 8004354 <_printf_float+0xc0>
 8004306:	2200      	movs	r2, #0
 8004308:	2300      	movs	r3, #0
 800430a:	4640      	mov	r0, r8
 800430c:	4649      	mov	r1, r9
 800430e:	f7fc fb55 	bl	80009bc <__aeabi_dcmplt>
 8004312:	b110      	cbz	r0, 800431a <_printf_float+0x86>
 8004314:	232d      	movs	r3, #45	@ 0x2d
 8004316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800431a:	4a92      	ldr	r2, [pc, #584]	@ (8004564 <_printf_float+0x2d0>)
 800431c:	4b92      	ldr	r3, [pc, #584]	@ (8004568 <_printf_float+0x2d4>)
 800431e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004322:	bf94      	ite	ls
 8004324:	4690      	movls	r8, r2
 8004326:	4698      	movhi	r8, r3
 8004328:	2303      	movs	r3, #3
 800432a:	f04f 0900 	mov.w	r9, #0
 800432e:	6123      	str	r3, [r4, #16]
 8004330:	f02b 0304 	bic.w	r3, fp, #4
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	4633      	mov	r3, r6
 8004338:	4621      	mov	r1, r4
 800433a:	4628      	mov	r0, r5
 800433c:	9700      	str	r7, [sp, #0]
 800433e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004340:	f000 f9d4 	bl	80046ec <_printf_common>
 8004344:	3001      	adds	r0, #1
 8004346:	f040 8090 	bne.w	800446a <_printf_float+0x1d6>
 800434a:	f04f 30ff 	mov.w	r0, #4294967295
 800434e:	b011      	add	sp, #68	@ 0x44
 8004350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	4640      	mov	r0, r8
 800435a:	4649      	mov	r1, r9
 800435c:	f7fc fb56 	bl	8000a0c <__aeabi_dcmpun>
 8004360:	b148      	cbz	r0, 8004376 <_printf_float+0xe2>
 8004362:	464b      	mov	r3, r9
 8004364:	2b00      	cmp	r3, #0
 8004366:	bfb8      	it	lt
 8004368:	232d      	movlt	r3, #45	@ 0x2d
 800436a:	4a80      	ldr	r2, [pc, #512]	@ (800456c <_printf_float+0x2d8>)
 800436c:	bfb8      	it	lt
 800436e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004372:	4b7f      	ldr	r3, [pc, #508]	@ (8004570 <_printf_float+0x2dc>)
 8004374:	e7d3      	b.n	800431e <_printf_float+0x8a>
 8004376:	6863      	ldr	r3, [r4, #4]
 8004378:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	d13f      	bne.n	8004400 <_printf_float+0x16c>
 8004380:	2306      	movs	r3, #6
 8004382:	6063      	str	r3, [r4, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	9206      	str	r2, [sp, #24]
 800438e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004390:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004394:	aa0d      	add	r2, sp, #52	@ 0x34
 8004396:	9203      	str	r2, [sp, #12]
 8004398:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800439c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	4642      	mov	r2, r8
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4628      	mov	r0, r5
 80043a8:	464b      	mov	r3, r9
 80043aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80043ac:	f7ff fed4 	bl	8004158 <__cvt>
 80043b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80043b2:	4680      	mov	r8, r0
 80043b4:	2947      	cmp	r1, #71	@ 0x47
 80043b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80043b8:	d128      	bne.n	800440c <_printf_float+0x178>
 80043ba:	1cc8      	adds	r0, r1, #3
 80043bc:	db02      	blt.n	80043c4 <_printf_float+0x130>
 80043be:	6863      	ldr	r3, [r4, #4]
 80043c0:	4299      	cmp	r1, r3
 80043c2:	dd40      	ble.n	8004446 <_printf_float+0x1b2>
 80043c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80043c8:	fa5f fa8a 	uxtb.w	sl, sl
 80043cc:	4652      	mov	r2, sl
 80043ce:	3901      	subs	r1, #1
 80043d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80043d4:	910d      	str	r1, [sp, #52]	@ 0x34
 80043d6:	f7ff ff23 	bl	8004220 <__exponent>
 80043da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80043dc:	4681      	mov	r9, r0
 80043de:	1813      	adds	r3, r2, r0
 80043e0:	2a01      	cmp	r2, #1
 80043e2:	6123      	str	r3, [r4, #16]
 80043e4:	dc02      	bgt.n	80043ec <_printf_float+0x158>
 80043e6:	6822      	ldr	r2, [r4, #0]
 80043e8:	07d2      	lsls	r2, r2, #31
 80043ea:	d501      	bpl.n	80043f0 <_printf_float+0x15c>
 80043ec:	3301      	adds	r3, #1
 80043ee:	6123      	str	r3, [r4, #16]
 80043f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d09e      	beq.n	8004336 <_printf_float+0xa2>
 80043f8:	232d      	movs	r3, #45	@ 0x2d
 80043fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043fe:	e79a      	b.n	8004336 <_printf_float+0xa2>
 8004400:	2947      	cmp	r1, #71	@ 0x47
 8004402:	d1bf      	bne.n	8004384 <_printf_float+0xf0>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1bd      	bne.n	8004384 <_printf_float+0xf0>
 8004408:	2301      	movs	r3, #1
 800440a:	e7ba      	b.n	8004382 <_printf_float+0xee>
 800440c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004410:	d9dc      	bls.n	80043cc <_printf_float+0x138>
 8004412:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004416:	d118      	bne.n	800444a <_printf_float+0x1b6>
 8004418:	2900      	cmp	r1, #0
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	dd0b      	ble.n	8004436 <_printf_float+0x1a2>
 800441e:	6121      	str	r1, [r4, #16]
 8004420:	b913      	cbnz	r3, 8004428 <_printf_float+0x194>
 8004422:	6822      	ldr	r2, [r4, #0]
 8004424:	07d0      	lsls	r0, r2, #31
 8004426:	d502      	bpl.n	800442e <_printf_float+0x19a>
 8004428:	3301      	adds	r3, #1
 800442a:	440b      	add	r3, r1
 800442c:	6123      	str	r3, [r4, #16]
 800442e:	f04f 0900 	mov.w	r9, #0
 8004432:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004434:	e7dc      	b.n	80043f0 <_printf_float+0x15c>
 8004436:	b913      	cbnz	r3, 800443e <_printf_float+0x1aa>
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	07d2      	lsls	r2, r2, #31
 800443c:	d501      	bpl.n	8004442 <_printf_float+0x1ae>
 800443e:	3302      	adds	r3, #2
 8004440:	e7f4      	b.n	800442c <_printf_float+0x198>
 8004442:	2301      	movs	r3, #1
 8004444:	e7f2      	b.n	800442c <_printf_float+0x198>
 8004446:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800444a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800444c:	4299      	cmp	r1, r3
 800444e:	db05      	blt.n	800445c <_printf_float+0x1c8>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	6121      	str	r1, [r4, #16]
 8004454:	07d8      	lsls	r0, r3, #31
 8004456:	d5ea      	bpl.n	800442e <_printf_float+0x19a>
 8004458:	1c4b      	adds	r3, r1, #1
 800445a:	e7e7      	b.n	800442c <_printf_float+0x198>
 800445c:	2900      	cmp	r1, #0
 800445e:	bfcc      	ite	gt
 8004460:	2201      	movgt	r2, #1
 8004462:	f1c1 0202 	rsble	r2, r1, #2
 8004466:	4413      	add	r3, r2
 8004468:	e7e0      	b.n	800442c <_printf_float+0x198>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	055a      	lsls	r2, r3, #21
 800446e:	d407      	bmi.n	8004480 <_printf_float+0x1ec>
 8004470:	6923      	ldr	r3, [r4, #16]
 8004472:	4642      	mov	r2, r8
 8004474:	4631      	mov	r1, r6
 8004476:	4628      	mov	r0, r5
 8004478:	47b8      	blx	r7
 800447a:	3001      	adds	r0, #1
 800447c:	d12b      	bne.n	80044d6 <_printf_float+0x242>
 800447e:	e764      	b.n	800434a <_printf_float+0xb6>
 8004480:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004484:	f240 80dc 	bls.w	8004640 <_printf_float+0x3ac>
 8004488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800448c:	2200      	movs	r2, #0
 800448e:	2300      	movs	r3, #0
 8004490:	f7fc fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 8004494:	2800      	cmp	r0, #0
 8004496:	d033      	beq.n	8004500 <_printf_float+0x26c>
 8004498:	2301      	movs	r3, #1
 800449a:	4631      	mov	r1, r6
 800449c:	4628      	mov	r0, r5
 800449e:	4a35      	ldr	r2, [pc, #212]	@ (8004574 <_printf_float+0x2e0>)
 80044a0:	47b8      	blx	r7
 80044a2:	3001      	adds	r0, #1
 80044a4:	f43f af51 	beq.w	800434a <_printf_float+0xb6>
 80044a8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80044ac:	4543      	cmp	r3, r8
 80044ae:	db02      	blt.n	80044b6 <_printf_float+0x222>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	07d8      	lsls	r0, r3, #31
 80044b4:	d50f      	bpl.n	80044d6 <_printf_float+0x242>
 80044b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044ba:	4631      	mov	r1, r6
 80044bc:	4628      	mov	r0, r5
 80044be:	47b8      	blx	r7
 80044c0:	3001      	adds	r0, #1
 80044c2:	f43f af42 	beq.w	800434a <_printf_float+0xb6>
 80044c6:	f04f 0900 	mov.w	r9, #0
 80044ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80044ce:	f104 0a1a 	add.w	sl, r4, #26
 80044d2:	45c8      	cmp	r8, r9
 80044d4:	dc09      	bgt.n	80044ea <_printf_float+0x256>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	079b      	lsls	r3, r3, #30
 80044da:	f100 8102 	bmi.w	80046e2 <_printf_float+0x44e>
 80044de:	68e0      	ldr	r0, [r4, #12]
 80044e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044e2:	4298      	cmp	r0, r3
 80044e4:	bfb8      	it	lt
 80044e6:	4618      	movlt	r0, r3
 80044e8:	e731      	b.n	800434e <_printf_float+0xba>
 80044ea:	2301      	movs	r3, #1
 80044ec:	4652      	mov	r2, sl
 80044ee:	4631      	mov	r1, r6
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b8      	blx	r7
 80044f4:	3001      	adds	r0, #1
 80044f6:	f43f af28 	beq.w	800434a <_printf_float+0xb6>
 80044fa:	f109 0901 	add.w	r9, r9, #1
 80044fe:	e7e8      	b.n	80044d2 <_printf_float+0x23e>
 8004500:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004502:	2b00      	cmp	r3, #0
 8004504:	dc38      	bgt.n	8004578 <_printf_float+0x2e4>
 8004506:	2301      	movs	r3, #1
 8004508:	4631      	mov	r1, r6
 800450a:	4628      	mov	r0, r5
 800450c:	4a19      	ldr	r2, [pc, #100]	@ (8004574 <_printf_float+0x2e0>)
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	f43f af1a 	beq.w	800434a <_printf_float+0xb6>
 8004516:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800451a:	ea59 0303 	orrs.w	r3, r9, r3
 800451e:	d102      	bne.n	8004526 <_printf_float+0x292>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	07d9      	lsls	r1, r3, #31
 8004524:	d5d7      	bpl.n	80044d6 <_printf_float+0x242>
 8004526:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	f43f af0a 	beq.w	800434a <_printf_float+0xb6>
 8004536:	f04f 0a00 	mov.w	sl, #0
 800453a:	f104 0b1a 	add.w	fp, r4, #26
 800453e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004540:	425b      	negs	r3, r3
 8004542:	4553      	cmp	r3, sl
 8004544:	dc01      	bgt.n	800454a <_printf_float+0x2b6>
 8004546:	464b      	mov	r3, r9
 8004548:	e793      	b.n	8004472 <_printf_float+0x1de>
 800454a:	2301      	movs	r3, #1
 800454c:	465a      	mov	r2, fp
 800454e:	4631      	mov	r1, r6
 8004550:	4628      	mov	r0, r5
 8004552:	47b8      	blx	r7
 8004554:	3001      	adds	r0, #1
 8004556:	f43f aef8 	beq.w	800434a <_printf_float+0xb6>
 800455a:	f10a 0a01 	add.w	sl, sl, #1
 800455e:	e7ee      	b.n	800453e <_printf_float+0x2aa>
 8004560:	7fefffff 	.word	0x7fefffff
 8004564:	08008896 	.word	0x08008896
 8004568:	0800889a 	.word	0x0800889a
 800456c:	0800889e 	.word	0x0800889e
 8004570:	080088a2 	.word	0x080088a2
 8004574:	080088a6 	.word	0x080088a6
 8004578:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800457a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800457e:	4553      	cmp	r3, sl
 8004580:	bfa8      	it	ge
 8004582:	4653      	movge	r3, sl
 8004584:	2b00      	cmp	r3, #0
 8004586:	4699      	mov	r9, r3
 8004588:	dc36      	bgt.n	80045f8 <_printf_float+0x364>
 800458a:	f04f 0b00 	mov.w	fp, #0
 800458e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004592:	f104 021a 	add.w	r2, r4, #26
 8004596:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004598:	930a      	str	r3, [sp, #40]	@ 0x28
 800459a:	eba3 0309 	sub.w	r3, r3, r9
 800459e:	455b      	cmp	r3, fp
 80045a0:	dc31      	bgt.n	8004606 <_printf_float+0x372>
 80045a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045a4:	459a      	cmp	sl, r3
 80045a6:	dc3a      	bgt.n	800461e <_printf_float+0x38a>
 80045a8:	6823      	ldr	r3, [r4, #0]
 80045aa:	07da      	lsls	r2, r3, #31
 80045ac:	d437      	bmi.n	800461e <_printf_float+0x38a>
 80045ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045b0:	ebaa 0903 	sub.w	r9, sl, r3
 80045b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045b6:	ebaa 0303 	sub.w	r3, sl, r3
 80045ba:	4599      	cmp	r9, r3
 80045bc:	bfa8      	it	ge
 80045be:	4699      	movge	r9, r3
 80045c0:	f1b9 0f00 	cmp.w	r9, #0
 80045c4:	dc33      	bgt.n	800462e <_printf_float+0x39a>
 80045c6:	f04f 0800 	mov.w	r8, #0
 80045ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045ce:	f104 0b1a 	add.w	fp, r4, #26
 80045d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045d4:	ebaa 0303 	sub.w	r3, sl, r3
 80045d8:	eba3 0309 	sub.w	r3, r3, r9
 80045dc:	4543      	cmp	r3, r8
 80045de:	f77f af7a 	ble.w	80044d6 <_printf_float+0x242>
 80045e2:	2301      	movs	r3, #1
 80045e4:	465a      	mov	r2, fp
 80045e6:	4631      	mov	r1, r6
 80045e8:	4628      	mov	r0, r5
 80045ea:	47b8      	blx	r7
 80045ec:	3001      	adds	r0, #1
 80045ee:	f43f aeac 	beq.w	800434a <_printf_float+0xb6>
 80045f2:	f108 0801 	add.w	r8, r8, #1
 80045f6:	e7ec      	b.n	80045d2 <_printf_float+0x33e>
 80045f8:	4642      	mov	r2, r8
 80045fa:	4631      	mov	r1, r6
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b8      	blx	r7
 8004600:	3001      	adds	r0, #1
 8004602:	d1c2      	bne.n	800458a <_printf_float+0x2f6>
 8004604:	e6a1      	b.n	800434a <_printf_float+0xb6>
 8004606:	2301      	movs	r3, #1
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	920a      	str	r2, [sp, #40]	@ 0x28
 800460e:	47b8      	blx	r7
 8004610:	3001      	adds	r0, #1
 8004612:	f43f ae9a 	beq.w	800434a <_printf_float+0xb6>
 8004616:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004618:	f10b 0b01 	add.w	fp, fp, #1
 800461c:	e7bb      	b.n	8004596 <_printf_float+0x302>
 800461e:	4631      	mov	r1, r6
 8004620:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004624:	4628      	mov	r0, r5
 8004626:	47b8      	blx	r7
 8004628:	3001      	adds	r0, #1
 800462a:	d1c0      	bne.n	80045ae <_printf_float+0x31a>
 800462c:	e68d      	b.n	800434a <_printf_float+0xb6>
 800462e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004630:	464b      	mov	r3, r9
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	4442      	add	r2, r8
 8004638:	47b8      	blx	r7
 800463a:	3001      	adds	r0, #1
 800463c:	d1c3      	bne.n	80045c6 <_printf_float+0x332>
 800463e:	e684      	b.n	800434a <_printf_float+0xb6>
 8004640:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004644:	f1ba 0f01 	cmp.w	sl, #1
 8004648:	dc01      	bgt.n	800464e <_printf_float+0x3ba>
 800464a:	07db      	lsls	r3, r3, #31
 800464c:	d536      	bpl.n	80046bc <_printf_float+0x428>
 800464e:	2301      	movs	r3, #1
 8004650:	4642      	mov	r2, r8
 8004652:	4631      	mov	r1, r6
 8004654:	4628      	mov	r0, r5
 8004656:	47b8      	blx	r7
 8004658:	3001      	adds	r0, #1
 800465a:	f43f ae76 	beq.w	800434a <_printf_float+0xb6>
 800465e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004662:	4631      	mov	r1, r6
 8004664:	4628      	mov	r0, r5
 8004666:	47b8      	blx	r7
 8004668:	3001      	adds	r0, #1
 800466a:	f43f ae6e 	beq.w	800434a <_printf_float+0xb6>
 800466e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004672:	2200      	movs	r2, #0
 8004674:	2300      	movs	r3, #0
 8004676:	f10a 3aff 	add.w	sl, sl, #4294967295
 800467a:	f7fc f995 	bl	80009a8 <__aeabi_dcmpeq>
 800467e:	b9c0      	cbnz	r0, 80046b2 <_printf_float+0x41e>
 8004680:	4653      	mov	r3, sl
 8004682:	f108 0201 	add.w	r2, r8, #1
 8004686:	4631      	mov	r1, r6
 8004688:	4628      	mov	r0, r5
 800468a:	47b8      	blx	r7
 800468c:	3001      	adds	r0, #1
 800468e:	d10c      	bne.n	80046aa <_printf_float+0x416>
 8004690:	e65b      	b.n	800434a <_printf_float+0xb6>
 8004692:	2301      	movs	r3, #1
 8004694:	465a      	mov	r2, fp
 8004696:	4631      	mov	r1, r6
 8004698:	4628      	mov	r0, r5
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	f43f ae54 	beq.w	800434a <_printf_float+0xb6>
 80046a2:	f108 0801 	add.w	r8, r8, #1
 80046a6:	45d0      	cmp	r8, sl
 80046a8:	dbf3      	blt.n	8004692 <_printf_float+0x3fe>
 80046aa:	464b      	mov	r3, r9
 80046ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80046b0:	e6e0      	b.n	8004474 <_printf_float+0x1e0>
 80046b2:	f04f 0800 	mov.w	r8, #0
 80046b6:	f104 0b1a 	add.w	fp, r4, #26
 80046ba:	e7f4      	b.n	80046a6 <_printf_float+0x412>
 80046bc:	2301      	movs	r3, #1
 80046be:	4642      	mov	r2, r8
 80046c0:	e7e1      	b.n	8004686 <_printf_float+0x3f2>
 80046c2:	2301      	movs	r3, #1
 80046c4:	464a      	mov	r2, r9
 80046c6:	4631      	mov	r1, r6
 80046c8:	4628      	mov	r0, r5
 80046ca:	47b8      	blx	r7
 80046cc:	3001      	adds	r0, #1
 80046ce:	f43f ae3c 	beq.w	800434a <_printf_float+0xb6>
 80046d2:	f108 0801 	add.w	r8, r8, #1
 80046d6:	68e3      	ldr	r3, [r4, #12]
 80046d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80046da:	1a5b      	subs	r3, r3, r1
 80046dc:	4543      	cmp	r3, r8
 80046de:	dcf0      	bgt.n	80046c2 <_printf_float+0x42e>
 80046e0:	e6fd      	b.n	80044de <_printf_float+0x24a>
 80046e2:	f04f 0800 	mov.w	r8, #0
 80046e6:	f104 0919 	add.w	r9, r4, #25
 80046ea:	e7f4      	b.n	80046d6 <_printf_float+0x442>

080046ec <_printf_common>:
 80046ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	4616      	mov	r6, r2
 80046f2:	4698      	mov	r8, r3
 80046f4:	688a      	ldr	r2, [r1, #8]
 80046f6:	690b      	ldr	r3, [r1, #16]
 80046f8:	4607      	mov	r7, r0
 80046fa:	4293      	cmp	r3, r2
 80046fc:	bfb8      	it	lt
 80046fe:	4613      	movlt	r3, r2
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004706:	460c      	mov	r4, r1
 8004708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800470c:	b10a      	cbz	r2, 8004712 <_printf_common+0x26>
 800470e:	3301      	adds	r3, #1
 8004710:	6033      	str	r3, [r6, #0]
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	0699      	lsls	r1, r3, #26
 8004716:	bf42      	ittt	mi
 8004718:	6833      	ldrmi	r3, [r6, #0]
 800471a:	3302      	addmi	r3, #2
 800471c:	6033      	strmi	r3, [r6, #0]
 800471e:	6825      	ldr	r5, [r4, #0]
 8004720:	f015 0506 	ands.w	r5, r5, #6
 8004724:	d106      	bne.n	8004734 <_printf_common+0x48>
 8004726:	f104 0a19 	add.w	sl, r4, #25
 800472a:	68e3      	ldr	r3, [r4, #12]
 800472c:	6832      	ldr	r2, [r6, #0]
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	42ab      	cmp	r3, r5
 8004732:	dc2b      	bgt.n	800478c <_printf_common+0xa0>
 8004734:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004738:	6822      	ldr	r2, [r4, #0]
 800473a:	3b00      	subs	r3, #0
 800473c:	bf18      	it	ne
 800473e:	2301      	movne	r3, #1
 8004740:	0692      	lsls	r2, r2, #26
 8004742:	d430      	bmi.n	80047a6 <_printf_common+0xba>
 8004744:	4641      	mov	r1, r8
 8004746:	4638      	mov	r0, r7
 8004748:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800474c:	47c8      	blx	r9
 800474e:	3001      	adds	r0, #1
 8004750:	d023      	beq.n	800479a <_printf_common+0xae>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	6922      	ldr	r2, [r4, #16]
 8004756:	f003 0306 	and.w	r3, r3, #6
 800475a:	2b04      	cmp	r3, #4
 800475c:	bf14      	ite	ne
 800475e:	2500      	movne	r5, #0
 8004760:	6833      	ldreq	r3, [r6, #0]
 8004762:	f04f 0600 	mov.w	r6, #0
 8004766:	bf08      	it	eq
 8004768:	68e5      	ldreq	r5, [r4, #12]
 800476a:	f104 041a 	add.w	r4, r4, #26
 800476e:	bf08      	it	eq
 8004770:	1aed      	subeq	r5, r5, r3
 8004772:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004776:	bf08      	it	eq
 8004778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800477c:	4293      	cmp	r3, r2
 800477e:	bfc4      	itt	gt
 8004780:	1a9b      	subgt	r3, r3, r2
 8004782:	18ed      	addgt	r5, r5, r3
 8004784:	42b5      	cmp	r5, r6
 8004786:	d11a      	bne.n	80047be <_printf_common+0xd2>
 8004788:	2000      	movs	r0, #0
 800478a:	e008      	b.n	800479e <_printf_common+0xb2>
 800478c:	2301      	movs	r3, #1
 800478e:	4652      	mov	r2, sl
 8004790:	4641      	mov	r1, r8
 8004792:	4638      	mov	r0, r7
 8004794:	47c8      	blx	r9
 8004796:	3001      	adds	r0, #1
 8004798:	d103      	bne.n	80047a2 <_printf_common+0xb6>
 800479a:	f04f 30ff 	mov.w	r0, #4294967295
 800479e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a2:	3501      	adds	r5, #1
 80047a4:	e7c1      	b.n	800472a <_printf_common+0x3e>
 80047a6:	2030      	movs	r0, #48	@ 0x30
 80047a8:	18e1      	adds	r1, r4, r3
 80047aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047b4:	4422      	add	r2, r4
 80047b6:	3302      	adds	r3, #2
 80047b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047bc:	e7c2      	b.n	8004744 <_printf_common+0x58>
 80047be:	2301      	movs	r3, #1
 80047c0:	4622      	mov	r2, r4
 80047c2:	4641      	mov	r1, r8
 80047c4:	4638      	mov	r0, r7
 80047c6:	47c8      	blx	r9
 80047c8:	3001      	adds	r0, #1
 80047ca:	d0e6      	beq.n	800479a <_printf_common+0xae>
 80047cc:	3601      	adds	r6, #1
 80047ce:	e7d9      	b.n	8004784 <_printf_common+0x98>

080047d0 <_printf_i>:
 80047d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	7e0f      	ldrb	r7, [r1, #24]
 80047d6:	4691      	mov	r9, r2
 80047d8:	2f78      	cmp	r7, #120	@ 0x78
 80047da:	4680      	mov	r8, r0
 80047dc:	460c      	mov	r4, r1
 80047de:	469a      	mov	sl, r3
 80047e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047e6:	d807      	bhi.n	80047f8 <_printf_i+0x28>
 80047e8:	2f62      	cmp	r7, #98	@ 0x62
 80047ea:	d80a      	bhi.n	8004802 <_printf_i+0x32>
 80047ec:	2f00      	cmp	r7, #0
 80047ee:	f000 80d3 	beq.w	8004998 <_printf_i+0x1c8>
 80047f2:	2f58      	cmp	r7, #88	@ 0x58
 80047f4:	f000 80ba 	beq.w	800496c <_printf_i+0x19c>
 80047f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004800:	e03a      	b.n	8004878 <_printf_i+0xa8>
 8004802:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004806:	2b15      	cmp	r3, #21
 8004808:	d8f6      	bhi.n	80047f8 <_printf_i+0x28>
 800480a:	a101      	add	r1, pc, #4	@ (adr r1, 8004810 <_printf_i+0x40>)
 800480c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004810:	08004869 	.word	0x08004869
 8004814:	0800487d 	.word	0x0800487d
 8004818:	080047f9 	.word	0x080047f9
 800481c:	080047f9 	.word	0x080047f9
 8004820:	080047f9 	.word	0x080047f9
 8004824:	080047f9 	.word	0x080047f9
 8004828:	0800487d 	.word	0x0800487d
 800482c:	080047f9 	.word	0x080047f9
 8004830:	080047f9 	.word	0x080047f9
 8004834:	080047f9 	.word	0x080047f9
 8004838:	080047f9 	.word	0x080047f9
 800483c:	0800497f 	.word	0x0800497f
 8004840:	080048a7 	.word	0x080048a7
 8004844:	08004939 	.word	0x08004939
 8004848:	080047f9 	.word	0x080047f9
 800484c:	080047f9 	.word	0x080047f9
 8004850:	080049a1 	.word	0x080049a1
 8004854:	080047f9 	.word	0x080047f9
 8004858:	080048a7 	.word	0x080048a7
 800485c:	080047f9 	.word	0x080047f9
 8004860:	080047f9 	.word	0x080047f9
 8004864:	08004941 	.word	0x08004941
 8004868:	6833      	ldr	r3, [r6, #0]
 800486a:	1d1a      	adds	r2, r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6032      	str	r2, [r6, #0]
 8004870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004874:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004878:	2301      	movs	r3, #1
 800487a:	e09e      	b.n	80049ba <_printf_i+0x1ea>
 800487c:	6833      	ldr	r3, [r6, #0]
 800487e:	6820      	ldr	r0, [r4, #0]
 8004880:	1d19      	adds	r1, r3, #4
 8004882:	6031      	str	r1, [r6, #0]
 8004884:	0606      	lsls	r6, r0, #24
 8004886:	d501      	bpl.n	800488c <_printf_i+0xbc>
 8004888:	681d      	ldr	r5, [r3, #0]
 800488a:	e003      	b.n	8004894 <_printf_i+0xc4>
 800488c:	0645      	lsls	r5, r0, #25
 800488e:	d5fb      	bpl.n	8004888 <_printf_i+0xb8>
 8004890:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004894:	2d00      	cmp	r5, #0
 8004896:	da03      	bge.n	80048a0 <_printf_i+0xd0>
 8004898:	232d      	movs	r3, #45	@ 0x2d
 800489a:	426d      	negs	r5, r5
 800489c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048a0:	230a      	movs	r3, #10
 80048a2:	4859      	ldr	r0, [pc, #356]	@ (8004a08 <_printf_i+0x238>)
 80048a4:	e011      	b.n	80048ca <_printf_i+0xfa>
 80048a6:	6821      	ldr	r1, [r4, #0]
 80048a8:	6833      	ldr	r3, [r6, #0]
 80048aa:	0608      	lsls	r0, r1, #24
 80048ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80048b0:	d402      	bmi.n	80048b8 <_printf_i+0xe8>
 80048b2:	0649      	lsls	r1, r1, #25
 80048b4:	bf48      	it	mi
 80048b6:	b2ad      	uxthmi	r5, r5
 80048b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80048ba:	6033      	str	r3, [r6, #0]
 80048bc:	bf14      	ite	ne
 80048be:	230a      	movne	r3, #10
 80048c0:	2308      	moveq	r3, #8
 80048c2:	4851      	ldr	r0, [pc, #324]	@ (8004a08 <_printf_i+0x238>)
 80048c4:	2100      	movs	r1, #0
 80048c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048ca:	6866      	ldr	r6, [r4, #4]
 80048cc:	2e00      	cmp	r6, #0
 80048ce:	bfa8      	it	ge
 80048d0:	6821      	ldrge	r1, [r4, #0]
 80048d2:	60a6      	str	r6, [r4, #8]
 80048d4:	bfa4      	itt	ge
 80048d6:	f021 0104 	bicge.w	r1, r1, #4
 80048da:	6021      	strge	r1, [r4, #0]
 80048dc:	b90d      	cbnz	r5, 80048e2 <_printf_i+0x112>
 80048de:	2e00      	cmp	r6, #0
 80048e0:	d04b      	beq.n	800497a <_printf_i+0x1aa>
 80048e2:	4616      	mov	r6, r2
 80048e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80048e8:	fb03 5711 	mls	r7, r3, r1, r5
 80048ec:	5dc7      	ldrb	r7, [r0, r7]
 80048ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048f2:	462f      	mov	r7, r5
 80048f4:	42bb      	cmp	r3, r7
 80048f6:	460d      	mov	r5, r1
 80048f8:	d9f4      	bls.n	80048e4 <_printf_i+0x114>
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d10b      	bne.n	8004916 <_printf_i+0x146>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	07df      	lsls	r7, r3, #31
 8004902:	d508      	bpl.n	8004916 <_printf_i+0x146>
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	6861      	ldr	r1, [r4, #4]
 8004908:	4299      	cmp	r1, r3
 800490a:	bfde      	ittt	le
 800490c:	2330      	movle	r3, #48	@ 0x30
 800490e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004912:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004916:	1b92      	subs	r2, r2, r6
 8004918:	6122      	str	r2, [r4, #16]
 800491a:	464b      	mov	r3, r9
 800491c:	4621      	mov	r1, r4
 800491e:	4640      	mov	r0, r8
 8004920:	f8cd a000 	str.w	sl, [sp]
 8004924:	aa03      	add	r2, sp, #12
 8004926:	f7ff fee1 	bl	80046ec <_printf_common>
 800492a:	3001      	adds	r0, #1
 800492c:	d14a      	bne.n	80049c4 <_printf_i+0x1f4>
 800492e:	f04f 30ff 	mov.w	r0, #4294967295
 8004932:	b004      	add	sp, #16
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	f043 0320 	orr.w	r3, r3, #32
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	2778      	movs	r7, #120	@ 0x78
 8004942:	4832      	ldr	r0, [pc, #200]	@ (8004a0c <_printf_i+0x23c>)
 8004944:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	6831      	ldr	r1, [r6, #0]
 800494c:	061f      	lsls	r7, r3, #24
 800494e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004952:	d402      	bmi.n	800495a <_printf_i+0x18a>
 8004954:	065f      	lsls	r7, r3, #25
 8004956:	bf48      	it	mi
 8004958:	b2ad      	uxthmi	r5, r5
 800495a:	6031      	str	r1, [r6, #0]
 800495c:	07d9      	lsls	r1, r3, #31
 800495e:	bf44      	itt	mi
 8004960:	f043 0320 	orrmi.w	r3, r3, #32
 8004964:	6023      	strmi	r3, [r4, #0]
 8004966:	b11d      	cbz	r5, 8004970 <_printf_i+0x1a0>
 8004968:	2310      	movs	r3, #16
 800496a:	e7ab      	b.n	80048c4 <_printf_i+0xf4>
 800496c:	4826      	ldr	r0, [pc, #152]	@ (8004a08 <_printf_i+0x238>)
 800496e:	e7e9      	b.n	8004944 <_printf_i+0x174>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	f023 0320 	bic.w	r3, r3, #32
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	e7f6      	b.n	8004968 <_printf_i+0x198>
 800497a:	4616      	mov	r6, r2
 800497c:	e7bd      	b.n	80048fa <_printf_i+0x12a>
 800497e:	6833      	ldr	r3, [r6, #0]
 8004980:	6825      	ldr	r5, [r4, #0]
 8004982:	1d18      	adds	r0, r3, #4
 8004984:	6961      	ldr	r1, [r4, #20]
 8004986:	6030      	str	r0, [r6, #0]
 8004988:	062e      	lsls	r6, r5, #24
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	d501      	bpl.n	8004992 <_printf_i+0x1c2>
 800498e:	6019      	str	r1, [r3, #0]
 8004990:	e002      	b.n	8004998 <_printf_i+0x1c8>
 8004992:	0668      	lsls	r0, r5, #25
 8004994:	d5fb      	bpl.n	800498e <_printf_i+0x1be>
 8004996:	8019      	strh	r1, [r3, #0]
 8004998:	2300      	movs	r3, #0
 800499a:	4616      	mov	r6, r2
 800499c:	6123      	str	r3, [r4, #16]
 800499e:	e7bc      	b.n	800491a <_printf_i+0x14a>
 80049a0:	6833      	ldr	r3, [r6, #0]
 80049a2:	2100      	movs	r1, #0
 80049a4:	1d1a      	adds	r2, r3, #4
 80049a6:	6032      	str	r2, [r6, #0]
 80049a8:	681e      	ldr	r6, [r3, #0]
 80049aa:	6862      	ldr	r2, [r4, #4]
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 fbe4 	bl	800517a <memchr>
 80049b2:	b108      	cbz	r0, 80049b8 <_printf_i+0x1e8>
 80049b4:	1b80      	subs	r0, r0, r6
 80049b6:	6060      	str	r0, [r4, #4]
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	6123      	str	r3, [r4, #16]
 80049bc:	2300      	movs	r3, #0
 80049be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049c2:	e7aa      	b.n	800491a <_printf_i+0x14a>
 80049c4:	4632      	mov	r2, r6
 80049c6:	4649      	mov	r1, r9
 80049c8:	4640      	mov	r0, r8
 80049ca:	6923      	ldr	r3, [r4, #16]
 80049cc:	47d0      	blx	sl
 80049ce:	3001      	adds	r0, #1
 80049d0:	d0ad      	beq.n	800492e <_printf_i+0x15e>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	079b      	lsls	r3, r3, #30
 80049d6:	d413      	bmi.n	8004a00 <_printf_i+0x230>
 80049d8:	68e0      	ldr	r0, [r4, #12]
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	4298      	cmp	r0, r3
 80049de:	bfb8      	it	lt
 80049e0:	4618      	movlt	r0, r3
 80049e2:	e7a6      	b.n	8004932 <_printf_i+0x162>
 80049e4:	2301      	movs	r3, #1
 80049e6:	4632      	mov	r2, r6
 80049e8:	4649      	mov	r1, r9
 80049ea:	4640      	mov	r0, r8
 80049ec:	47d0      	blx	sl
 80049ee:	3001      	adds	r0, #1
 80049f0:	d09d      	beq.n	800492e <_printf_i+0x15e>
 80049f2:	3501      	adds	r5, #1
 80049f4:	68e3      	ldr	r3, [r4, #12]
 80049f6:	9903      	ldr	r1, [sp, #12]
 80049f8:	1a5b      	subs	r3, r3, r1
 80049fa:	42ab      	cmp	r3, r5
 80049fc:	dcf2      	bgt.n	80049e4 <_printf_i+0x214>
 80049fe:	e7eb      	b.n	80049d8 <_printf_i+0x208>
 8004a00:	2500      	movs	r5, #0
 8004a02:	f104 0619 	add.w	r6, r4, #25
 8004a06:	e7f5      	b.n	80049f4 <_printf_i+0x224>
 8004a08:	080088a8 	.word	0x080088a8
 8004a0c:	080088b9 	.word	0x080088b9

08004a10 <_scanf_float>:
 8004a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	b087      	sub	sp, #28
 8004a16:	9303      	str	r3, [sp, #12]
 8004a18:	688b      	ldr	r3, [r1, #8]
 8004a1a:	4617      	mov	r7, r2
 8004a1c:	1e5a      	subs	r2, r3, #1
 8004a1e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004a22:	bf82      	ittt	hi
 8004a24:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004a28:	eb03 0b05 	addhi.w	fp, r3, r5
 8004a2c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004a30:	460a      	mov	r2, r1
 8004a32:	f04f 0500 	mov.w	r5, #0
 8004a36:	bf88      	it	hi
 8004a38:	608b      	strhi	r3, [r1, #8]
 8004a3a:	680b      	ldr	r3, [r1, #0]
 8004a3c:	4680      	mov	r8, r0
 8004a3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004a42:	f842 3b1c 	str.w	r3, [r2], #28
 8004a46:	460c      	mov	r4, r1
 8004a48:	bf98      	it	ls
 8004a4a:	f04f 0b00 	movls.w	fp, #0
 8004a4e:	4616      	mov	r6, r2
 8004a50:	46aa      	mov	sl, r5
 8004a52:	46a9      	mov	r9, r5
 8004a54:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004a58:	9201      	str	r2, [sp, #4]
 8004a5a:	9502      	str	r5, [sp, #8]
 8004a5c:	68a2      	ldr	r2, [r4, #8]
 8004a5e:	b152      	cbz	r2, 8004a76 <_scanf_float+0x66>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b4e      	cmp	r3, #78	@ 0x4e
 8004a66:	d865      	bhi.n	8004b34 <_scanf_float+0x124>
 8004a68:	2b40      	cmp	r3, #64	@ 0x40
 8004a6a:	d83d      	bhi.n	8004ae8 <_scanf_float+0xd8>
 8004a6c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004a70:	b2c8      	uxtb	r0, r1
 8004a72:	280e      	cmp	r0, #14
 8004a74:	d93b      	bls.n	8004aee <_scanf_float+0xde>
 8004a76:	f1b9 0f00 	cmp.w	r9, #0
 8004a7a:	d003      	beq.n	8004a84 <_scanf_float+0x74>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a88:	f1ba 0f01 	cmp.w	sl, #1
 8004a8c:	f200 8118 	bhi.w	8004cc0 <_scanf_float+0x2b0>
 8004a90:	9b01      	ldr	r3, [sp, #4]
 8004a92:	429e      	cmp	r6, r3
 8004a94:	f200 8109 	bhi.w	8004caa <_scanf_float+0x29a>
 8004a98:	2001      	movs	r0, #1
 8004a9a:	b007      	add	sp, #28
 8004a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004aa4:	2a0d      	cmp	r2, #13
 8004aa6:	d8e6      	bhi.n	8004a76 <_scanf_float+0x66>
 8004aa8:	a101      	add	r1, pc, #4	@ (adr r1, 8004ab0 <_scanf_float+0xa0>)
 8004aaa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004bf7 	.word	0x08004bf7
 8004ab4:	08004a77 	.word	0x08004a77
 8004ab8:	08004a77 	.word	0x08004a77
 8004abc:	08004a77 	.word	0x08004a77
 8004ac0:	08004c57 	.word	0x08004c57
 8004ac4:	08004c2f 	.word	0x08004c2f
 8004ac8:	08004a77 	.word	0x08004a77
 8004acc:	08004a77 	.word	0x08004a77
 8004ad0:	08004c05 	.word	0x08004c05
 8004ad4:	08004a77 	.word	0x08004a77
 8004ad8:	08004a77 	.word	0x08004a77
 8004adc:	08004a77 	.word	0x08004a77
 8004ae0:	08004a77 	.word	0x08004a77
 8004ae4:	08004bbd 	.word	0x08004bbd
 8004ae8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004aec:	e7da      	b.n	8004aa4 <_scanf_float+0x94>
 8004aee:	290e      	cmp	r1, #14
 8004af0:	d8c1      	bhi.n	8004a76 <_scanf_float+0x66>
 8004af2:	a001      	add	r0, pc, #4	@ (adr r0, 8004af8 <_scanf_float+0xe8>)
 8004af4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004af8:	08004bad 	.word	0x08004bad
 8004afc:	08004a77 	.word	0x08004a77
 8004b00:	08004bad 	.word	0x08004bad
 8004b04:	08004c43 	.word	0x08004c43
 8004b08:	08004a77 	.word	0x08004a77
 8004b0c:	08004b55 	.word	0x08004b55
 8004b10:	08004b93 	.word	0x08004b93
 8004b14:	08004b93 	.word	0x08004b93
 8004b18:	08004b93 	.word	0x08004b93
 8004b1c:	08004b93 	.word	0x08004b93
 8004b20:	08004b93 	.word	0x08004b93
 8004b24:	08004b93 	.word	0x08004b93
 8004b28:	08004b93 	.word	0x08004b93
 8004b2c:	08004b93 	.word	0x08004b93
 8004b30:	08004b93 	.word	0x08004b93
 8004b34:	2b6e      	cmp	r3, #110	@ 0x6e
 8004b36:	d809      	bhi.n	8004b4c <_scanf_float+0x13c>
 8004b38:	2b60      	cmp	r3, #96	@ 0x60
 8004b3a:	d8b1      	bhi.n	8004aa0 <_scanf_float+0x90>
 8004b3c:	2b54      	cmp	r3, #84	@ 0x54
 8004b3e:	d07b      	beq.n	8004c38 <_scanf_float+0x228>
 8004b40:	2b59      	cmp	r3, #89	@ 0x59
 8004b42:	d198      	bne.n	8004a76 <_scanf_float+0x66>
 8004b44:	2d07      	cmp	r5, #7
 8004b46:	d196      	bne.n	8004a76 <_scanf_float+0x66>
 8004b48:	2508      	movs	r5, #8
 8004b4a:	e02c      	b.n	8004ba6 <_scanf_float+0x196>
 8004b4c:	2b74      	cmp	r3, #116	@ 0x74
 8004b4e:	d073      	beq.n	8004c38 <_scanf_float+0x228>
 8004b50:	2b79      	cmp	r3, #121	@ 0x79
 8004b52:	e7f6      	b.n	8004b42 <_scanf_float+0x132>
 8004b54:	6821      	ldr	r1, [r4, #0]
 8004b56:	05c8      	lsls	r0, r1, #23
 8004b58:	d51b      	bpl.n	8004b92 <_scanf_float+0x182>
 8004b5a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004b5e:	6021      	str	r1, [r4, #0]
 8004b60:	f109 0901 	add.w	r9, r9, #1
 8004b64:	f1bb 0f00 	cmp.w	fp, #0
 8004b68:	d003      	beq.n	8004b72 <_scanf_float+0x162>
 8004b6a:	3201      	adds	r2, #1
 8004b6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b70:	60a2      	str	r2, [r4, #8]
 8004b72:	68a3      	ldr	r3, [r4, #8]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	60a3      	str	r3, [r4, #8]
 8004b78:	6923      	ldr	r3, [r4, #16]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	f340 8087 	ble.w	8004c98 <_scanf_float+0x288>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	e764      	b.n	8004a5c <_scanf_float+0x4c>
 8004b92:	eb1a 0105 	adds.w	r1, sl, r5
 8004b96:	f47f af6e 	bne.w	8004a76 <_scanf_float+0x66>
 8004b9a:	460d      	mov	r5, r1
 8004b9c:	468a      	mov	sl, r1
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004ba4:	6022      	str	r2, [r4, #0]
 8004ba6:	f806 3b01 	strb.w	r3, [r6], #1
 8004baa:	e7e2      	b.n	8004b72 <_scanf_float+0x162>
 8004bac:	6822      	ldr	r2, [r4, #0]
 8004bae:	0610      	lsls	r0, r2, #24
 8004bb0:	f57f af61 	bpl.w	8004a76 <_scanf_float+0x66>
 8004bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bb8:	6022      	str	r2, [r4, #0]
 8004bba:	e7f4      	b.n	8004ba6 <_scanf_float+0x196>
 8004bbc:	f1ba 0f00 	cmp.w	sl, #0
 8004bc0:	d10e      	bne.n	8004be0 <_scanf_float+0x1d0>
 8004bc2:	f1b9 0f00 	cmp.w	r9, #0
 8004bc6:	d10e      	bne.n	8004be6 <_scanf_float+0x1d6>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004bce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004bd2:	d108      	bne.n	8004be6 <_scanf_float+0x1d6>
 8004bd4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004bd8:	f04f 0a01 	mov.w	sl, #1
 8004bdc:	6022      	str	r2, [r4, #0]
 8004bde:	e7e2      	b.n	8004ba6 <_scanf_float+0x196>
 8004be0:	f1ba 0f02 	cmp.w	sl, #2
 8004be4:	d055      	beq.n	8004c92 <_scanf_float+0x282>
 8004be6:	2d01      	cmp	r5, #1
 8004be8:	d002      	beq.n	8004bf0 <_scanf_float+0x1e0>
 8004bea:	2d04      	cmp	r5, #4
 8004bec:	f47f af43 	bne.w	8004a76 <_scanf_float+0x66>
 8004bf0:	3501      	adds	r5, #1
 8004bf2:	b2ed      	uxtb	r5, r5
 8004bf4:	e7d7      	b.n	8004ba6 <_scanf_float+0x196>
 8004bf6:	f1ba 0f01 	cmp.w	sl, #1
 8004bfa:	f47f af3c 	bne.w	8004a76 <_scanf_float+0x66>
 8004bfe:	f04f 0a02 	mov.w	sl, #2
 8004c02:	e7d0      	b.n	8004ba6 <_scanf_float+0x196>
 8004c04:	b97d      	cbnz	r5, 8004c26 <_scanf_float+0x216>
 8004c06:	f1b9 0f00 	cmp.w	r9, #0
 8004c0a:	f47f af37 	bne.w	8004a7c <_scanf_float+0x6c>
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004c14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004c18:	f040 8103 	bne.w	8004e22 <_scanf_float+0x412>
 8004c1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004c20:	2501      	movs	r5, #1
 8004c22:	6022      	str	r2, [r4, #0]
 8004c24:	e7bf      	b.n	8004ba6 <_scanf_float+0x196>
 8004c26:	2d03      	cmp	r5, #3
 8004c28:	d0e2      	beq.n	8004bf0 <_scanf_float+0x1e0>
 8004c2a:	2d05      	cmp	r5, #5
 8004c2c:	e7de      	b.n	8004bec <_scanf_float+0x1dc>
 8004c2e:	2d02      	cmp	r5, #2
 8004c30:	f47f af21 	bne.w	8004a76 <_scanf_float+0x66>
 8004c34:	2503      	movs	r5, #3
 8004c36:	e7b6      	b.n	8004ba6 <_scanf_float+0x196>
 8004c38:	2d06      	cmp	r5, #6
 8004c3a:	f47f af1c 	bne.w	8004a76 <_scanf_float+0x66>
 8004c3e:	2507      	movs	r5, #7
 8004c40:	e7b1      	b.n	8004ba6 <_scanf_float+0x196>
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	0591      	lsls	r1, r2, #22
 8004c46:	f57f af16 	bpl.w	8004a76 <_scanf_float+0x66>
 8004c4a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c54:	e7a7      	b.n	8004ba6 <_scanf_float+0x196>
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004c5c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004c60:	d006      	beq.n	8004c70 <_scanf_float+0x260>
 8004c62:	0550      	lsls	r0, r2, #21
 8004c64:	f57f af07 	bpl.w	8004a76 <_scanf_float+0x66>
 8004c68:	f1b9 0f00 	cmp.w	r9, #0
 8004c6c:	f000 80d9 	beq.w	8004e22 <_scanf_float+0x412>
 8004c70:	0591      	lsls	r1, r2, #22
 8004c72:	bf58      	it	pl
 8004c74:	9902      	ldrpl	r1, [sp, #8]
 8004c76:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004c7a:	bf58      	it	pl
 8004c7c:	eba9 0101 	subpl.w	r1, r9, r1
 8004c80:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004c84:	f04f 0900 	mov.w	r9, #0
 8004c88:	bf58      	it	pl
 8004c8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004c8e:	6022      	str	r2, [r4, #0]
 8004c90:	e789      	b.n	8004ba6 <_scanf_float+0x196>
 8004c92:	f04f 0a03 	mov.w	sl, #3
 8004c96:	e786      	b.n	8004ba6 <_scanf_float+0x196>
 8004c98:	4639      	mov	r1, r7
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004ca0:	4798      	blx	r3
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f43f aeda 	beq.w	8004a5c <_scanf_float+0x4c>
 8004ca8:	e6e5      	b.n	8004a76 <_scanf_float+0x66>
 8004caa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004cae:	463a      	mov	r2, r7
 8004cb0:	4640      	mov	r0, r8
 8004cb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cb6:	4798      	blx	r3
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	6123      	str	r3, [r4, #16]
 8004cbe:	e6e7      	b.n	8004a90 <_scanf_float+0x80>
 8004cc0:	1e6b      	subs	r3, r5, #1
 8004cc2:	2b06      	cmp	r3, #6
 8004cc4:	d824      	bhi.n	8004d10 <_scanf_float+0x300>
 8004cc6:	2d02      	cmp	r5, #2
 8004cc8:	d836      	bhi.n	8004d38 <_scanf_float+0x328>
 8004cca:	9b01      	ldr	r3, [sp, #4]
 8004ccc:	429e      	cmp	r6, r3
 8004cce:	f67f aee3 	bls.w	8004a98 <_scanf_float+0x88>
 8004cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004cd6:	463a      	mov	r2, r7
 8004cd8:	4640      	mov	r0, r8
 8004cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004cde:	4798      	blx	r3
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	6123      	str	r3, [r4, #16]
 8004ce6:	e7f0      	b.n	8004cca <_scanf_float+0x2ba>
 8004ce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004cec:	463a      	mov	r2, r7
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004cf4:	4798      	blx	r3
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d00:	fa5f fa8a 	uxtb.w	sl, sl
 8004d04:	f1ba 0f02 	cmp.w	sl, #2
 8004d08:	d1ee      	bne.n	8004ce8 <_scanf_float+0x2d8>
 8004d0a:	3d03      	subs	r5, #3
 8004d0c:	b2ed      	uxtb	r5, r5
 8004d0e:	1b76      	subs	r6, r6, r5
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	05da      	lsls	r2, r3, #23
 8004d14:	d530      	bpl.n	8004d78 <_scanf_float+0x368>
 8004d16:	055b      	lsls	r3, r3, #21
 8004d18:	d511      	bpl.n	8004d3e <_scanf_float+0x32e>
 8004d1a:	9b01      	ldr	r3, [sp, #4]
 8004d1c:	429e      	cmp	r6, r3
 8004d1e:	f67f aebb 	bls.w	8004a98 <_scanf_float+0x88>
 8004d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d26:	463a      	mov	r2, r7
 8004d28:	4640      	mov	r0, r8
 8004d2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004d2e:	4798      	blx	r3
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	e7f0      	b.n	8004d1a <_scanf_float+0x30a>
 8004d38:	46aa      	mov	sl, r5
 8004d3a:	46b3      	mov	fp, r6
 8004d3c:	e7de      	b.n	8004cfc <_scanf_float+0x2ec>
 8004d3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	2965      	cmp	r1, #101	@ 0x65
 8004d46:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8004d4e:	6123      	str	r3, [r4, #16]
 8004d50:	d00c      	beq.n	8004d6c <_scanf_float+0x35c>
 8004d52:	2945      	cmp	r1, #69	@ 0x45
 8004d54:	d00a      	beq.n	8004d6c <_scanf_float+0x35c>
 8004d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d5a:	463a      	mov	r2, r7
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4798      	blx	r3
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	1eb5      	subs	r5, r6, #2
 8004d6a:	6123      	str	r3, [r4, #16]
 8004d6c:	463a      	mov	r2, r7
 8004d6e:	4640      	mov	r0, r8
 8004d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004d74:	4798      	blx	r3
 8004d76:	462e      	mov	r6, r5
 8004d78:	6822      	ldr	r2, [r4, #0]
 8004d7a:	f012 0210 	ands.w	r2, r2, #16
 8004d7e:	d001      	beq.n	8004d84 <_scanf_float+0x374>
 8004d80:	2000      	movs	r0, #0
 8004d82:	e68a      	b.n	8004a9a <_scanf_float+0x8a>
 8004d84:	7032      	strb	r2, [r6, #0]
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d90:	d11c      	bne.n	8004dcc <_scanf_float+0x3bc>
 8004d92:	9b02      	ldr	r3, [sp, #8]
 8004d94:	454b      	cmp	r3, r9
 8004d96:	eba3 0209 	sub.w	r2, r3, r9
 8004d9a:	d123      	bne.n	8004de4 <_scanf_float+0x3d4>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4640      	mov	r0, r8
 8004da0:	9901      	ldr	r1, [sp, #4]
 8004da2:	f002 fbed 	bl	8007580 <_strtod_r>
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	6825      	ldr	r5, [r4, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f015 0f02 	tst.w	r5, #2
 8004db0:	4606      	mov	r6, r0
 8004db2:	460f      	mov	r7, r1
 8004db4:	f103 0204 	add.w	r2, r3, #4
 8004db8:	d01f      	beq.n	8004dfa <_scanf_float+0x3ea>
 8004dba:	9903      	ldr	r1, [sp, #12]
 8004dbc:	600a      	str	r2, [r1, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	e9c3 6700 	strd	r6, r7, [r3]
 8004dc4:	68e3      	ldr	r3, [r4, #12]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60e3      	str	r3, [r4, #12]
 8004dca:	e7d9      	b.n	8004d80 <_scanf_float+0x370>
 8004dcc:	9b04      	ldr	r3, [sp, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0e4      	beq.n	8004d9c <_scanf_float+0x38c>
 8004dd2:	9905      	ldr	r1, [sp, #20]
 8004dd4:	230a      	movs	r3, #10
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	3101      	adds	r1, #1
 8004dda:	f002 fc51 	bl	8007680 <_strtol_r>
 8004dde:	9b04      	ldr	r3, [sp, #16]
 8004de0:	9e05      	ldr	r6, [sp, #20]
 8004de2:	1ac2      	subs	r2, r0, r3
 8004de4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004de8:	429e      	cmp	r6, r3
 8004dea:	bf28      	it	cs
 8004dec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004df0:	4630      	mov	r0, r6
 8004df2:	490d      	ldr	r1, [pc, #52]	@ (8004e28 <_scanf_float+0x418>)
 8004df4:	f000 f8de 	bl	8004fb4 <siprintf>
 8004df8:	e7d0      	b.n	8004d9c <_scanf_float+0x38c>
 8004dfa:	076d      	lsls	r5, r5, #29
 8004dfc:	d4dd      	bmi.n	8004dba <_scanf_float+0x3aa>
 8004dfe:	9d03      	ldr	r5, [sp, #12]
 8004e00:	602a      	str	r2, [r5, #0]
 8004e02:	681d      	ldr	r5, [r3, #0]
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	f7fb fe00 	bl	8000a0c <__aeabi_dcmpun>
 8004e0c:	b120      	cbz	r0, 8004e18 <_scanf_float+0x408>
 8004e0e:	4807      	ldr	r0, [pc, #28]	@ (8004e2c <_scanf_float+0x41c>)
 8004e10:	f000 f9c2 	bl	8005198 <nanf>
 8004e14:	6028      	str	r0, [r5, #0]
 8004e16:	e7d5      	b.n	8004dc4 <_scanf_float+0x3b4>
 8004e18:	4630      	mov	r0, r6
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	f7fb fe54 	bl	8000ac8 <__aeabi_d2f>
 8004e20:	e7f8      	b.n	8004e14 <_scanf_float+0x404>
 8004e22:	f04f 0900 	mov.w	r9, #0
 8004e26:	e62d      	b.n	8004a84 <_scanf_float+0x74>
 8004e28:	080088ca 	.word	0x080088ca
 8004e2c:	08008c65 	.word	0x08008c65

08004e30 <std>:
 8004e30:	2300      	movs	r3, #0
 8004e32:	b510      	push	{r4, lr}
 8004e34:	4604      	mov	r4, r0
 8004e36:	e9c0 3300 	strd	r3, r3, [r0]
 8004e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e3e:	6083      	str	r3, [r0, #8]
 8004e40:	8181      	strh	r1, [r0, #12]
 8004e42:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e44:	81c2      	strh	r2, [r0, #14]
 8004e46:	6183      	str	r3, [r0, #24]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	2208      	movs	r2, #8
 8004e4c:	305c      	adds	r0, #92	@ 0x5c
 8004e4e:	f000 f914 	bl	800507a <memset>
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <std+0x58>)
 8004e54:	6224      	str	r4, [r4, #32]
 8004e56:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e58:	4b0c      	ldr	r3, [pc, #48]	@ (8004e8c <std+0x5c>)
 8004e5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e90 <std+0x60>)
 8004e5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e60:	4b0c      	ldr	r3, [pc, #48]	@ (8004e94 <std+0x64>)
 8004e62:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <std+0x68>)
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d006      	beq.n	8004e78 <std+0x48>
 8004e6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e6e:	4294      	cmp	r4, r2
 8004e70:	d002      	beq.n	8004e78 <std+0x48>
 8004e72:	33d0      	adds	r3, #208	@ 0xd0
 8004e74:	429c      	cmp	r4, r3
 8004e76:	d105      	bne.n	8004e84 <std+0x54>
 8004e78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e80:	f000 b978 	b.w	8005174 <__retarget_lock_init_recursive>
 8004e84:	bd10      	pop	{r4, pc}
 8004e86:	bf00      	nop
 8004e88:	08004ff5 	.word	0x08004ff5
 8004e8c:	08005017 	.word	0x08005017
 8004e90:	0800504f 	.word	0x0800504f
 8004e94:	08005073 	.word	0x08005073
 8004e98:	200002e4 	.word	0x200002e4

08004e9c <stdio_exit_handler>:
 8004e9c:	4a02      	ldr	r2, [pc, #8]	@ (8004ea8 <stdio_exit_handler+0xc>)
 8004e9e:	4903      	ldr	r1, [pc, #12]	@ (8004eac <stdio_exit_handler+0x10>)
 8004ea0:	4803      	ldr	r0, [pc, #12]	@ (8004eb0 <stdio_exit_handler+0x14>)
 8004ea2:	f000 b869 	b.w	8004f78 <_fwalk_sglue>
 8004ea6:	bf00      	nop
 8004ea8:	20000010 	.word	0x20000010
 8004eac:	08007a35 	.word	0x08007a35
 8004eb0:	20000020 	.word	0x20000020

08004eb4 <cleanup_stdio>:
 8004eb4:	6841      	ldr	r1, [r0, #4]
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <cleanup_stdio+0x34>)
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4299      	cmp	r1, r3
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	d001      	beq.n	8004ec4 <cleanup_stdio+0x10>
 8004ec0:	f002 fdb8 	bl	8007a34 <_fflush_r>
 8004ec4:	68a1      	ldr	r1, [r4, #8]
 8004ec6:	4b09      	ldr	r3, [pc, #36]	@ (8004eec <cleanup_stdio+0x38>)
 8004ec8:	4299      	cmp	r1, r3
 8004eca:	d002      	beq.n	8004ed2 <cleanup_stdio+0x1e>
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f002 fdb1 	bl	8007a34 <_fflush_r>
 8004ed2:	68e1      	ldr	r1, [r4, #12]
 8004ed4:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <cleanup_stdio+0x3c>)
 8004ed6:	4299      	cmp	r1, r3
 8004ed8:	d004      	beq.n	8004ee4 <cleanup_stdio+0x30>
 8004eda:	4620      	mov	r0, r4
 8004edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee0:	f002 bda8 	b.w	8007a34 <_fflush_r>
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200002e4 	.word	0x200002e4
 8004eec:	2000034c 	.word	0x2000034c
 8004ef0:	200003b4 	.word	0x200003b4

08004ef4 <global_stdio_init.part.0>:
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <global_stdio_init.part.0+0x30>)
 8004ef8:	4c0b      	ldr	r4, [pc, #44]	@ (8004f28 <global_stdio_init.part.0+0x34>)
 8004efa:	4a0c      	ldr	r2, [pc, #48]	@ (8004f2c <global_stdio_init.part.0+0x38>)
 8004efc:	4620      	mov	r0, r4
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	2104      	movs	r1, #4
 8004f02:	2200      	movs	r2, #0
 8004f04:	f7ff ff94 	bl	8004e30 <std>
 8004f08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2109      	movs	r1, #9
 8004f10:	f7ff ff8e 	bl	8004e30 <std>
 8004f14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f18:	2202      	movs	r2, #2
 8004f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1e:	2112      	movs	r1, #18
 8004f20:	f7ff bf86 	b.w	8004e30 <std>
 8004f24:	2000041c 	.word	0x2000041c
 8004f28:	200002e4 	.word	0x200002e4
 8004f2c:	08004e9d 	.word	0x08004e9d

08004f30 <__sfp_lock_acquire>:
 8004f30:	4801      	ldr	r0, [pc, #4]	@ (8004f38 <__sfp_lock_acquire+0x8>)
 8004f32:	f000 b920 	b.w	8005176 <__retarget_lock_acquire_recursive>
 8004f36:	bf00      	nop
 8004f38:	20000425 	.word	0x20000425

08004f3c <__sfp_lock_release>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	@ (8004f44 <__sfp_lock_release+0x8>)
 8004f3e:	f000 b91b 	b.w	8005178 <__retarget_lock_release_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000425 	.word	0x20000425

08004f48 <__sinit>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	f7ff fff0 	bl	8004f30 <__sfp_lock_acquire>
 8004f50:	6a23      	ldr	r3, [r4, #32]
 8004f52:	b11b      	cbz	r3, 8004f5c <__sinit+0x14>
 8004f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f58:	f7ff bff0 	b.w	8004f3c <__sfp_lock_release>
 8004f5c:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <__sinit+0x28>)
 8004f5e:	6223      	str	r3, [r4, #32]
 8004f60:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <__sinit+0x2c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f5      	bne.n	8004f54 <__sinit+0xc>
 8004f68:	f7ff ffc4 	bl	8004ef4 <global_stdio_init.part.0>
 8004f6c:	e7f2      	b.n	8004f54 <__sinit+0xc>
 8004f6e:	bf00      	nop
 8004f70:	08004eb5 	.word	0x08004eb5
 8004f74:	2000041c 	.word	0x2000041c

08004f78 <_fwalk_sglue>:
 8004f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	4688      	mov	r8, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	2600      	movs	r6, #0
 8004f84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f88:	f1b9 0901 	subs.w	r9, r9, #1
 8004f8c:	d505      	bpl.n	8004f9a <_fwalk_sglue+0x22>
 8004f8e:	6824      	ldr	r4, [r4, #0]
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	d1f7      	bne.n	8004f84 <_fwalk_sglue+0xc>
 8004f94:	4630      	mov	r0, r6
 8004f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9a:	89ab      	ldrh	r3, [r5, #12]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d907      	bls.n	8004fb0 <_fwalk_sglue+0x38>
 8004fa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	d003      	beq.n	8004fb0 <_fwalk_sglue+0x38>
 8004fa8:	4629      	mov	r1, r5
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c0      	blx	r8
 8004fae:	4306      	orrs	r6, r0
 8004fb0:	3568      	adds	r5, #104	@ 0x68
 8004fb2:	e7e9      	b.n	8004f88 <_fwalk_sglue+0x10>

08004fb4 <siprintf>:
 8004fb4:	b40e      	push	{r1, r2, r3}
 8004fb6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fba:	b500      	push	{lr}
 8004fbc:	b09c      	sub	sp, #112	@ 0x70
 8004fbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8004fc0:	9002      	str	r0, [sp, #8]
 8004fc2:	9006      	str	r0, [sp, #24]
 8004fc4:	9107      	str	r1, [sp, #28]
 8004fc6:	9104      	str	r1, [sp, #16]
 8004fc8:	4808      	ldr	r0, [pc, #32]	@ (8004fec <siprintf+0x38>)
 8004fca:	4909      	ldr	r1, [pc, #36]	@ (8004ff0 <siprintf+0x3c>)
 8004fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fd0:	9105      	str	r1, [sp, #20]
 8004fd2:	6800      	ldr	r0, [r0, #0]
 8004fd4:	a902      	add	r1, sp, #8
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	f002 fbb0 	bl	800773c <_svfiprintf_r>
 8004fdc:	2200      	movs	r2, #0
 8004fde:	9b02      	ldr	r3, [sp, #8]
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	b01c      	add	sp, #112	@ 0x70
 8004fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fe8:	b003      	add	sp, #12
 8004fea:	4770      	bx	lr
 8004fec:	2000001c 	.word	0x2000001c
 8004ff0:	ffff0208 	.word	0xffff0208

08004ff4 <__sread>:
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffc:	f000 f86c 	bl	80050d8 <_read_r>
 8005000:	2800      	cmp	r0, #0
 8005002:	bfab      	itete	ge
 8005004:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005006:	89a3      	ldrhlt	r3, [r4, #12]
 8005008:	181b      	addge	r3, r3, r0
 800500a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800500e:	bfac      	ite	ge
 8005010:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005012:	81a3      	strhlt	r3, [r4, #12]
 8005014:	bd10      	pop	{r4, pc}

08005016 <__swrite>:
 8005016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800501a:	461f      	mov	r7, r3
 800501c:	898b      	ldrh	r3, [r1, #12]
 800501e:	4605      	mov	r5, r0
 8005020:	05db      	lsls	r3, r3, #23
 8005022:	460c      	mov	r4, r1
 8005024:	4616      	mov	r6, r2
 8005026:	d505      	bpl.n	8005034 <__swrite+0x1e>
 8005028:	2302      	movs	r3, #2
 800502a:	2200      	movs	r2, #0
 800502c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005030:	f000 f840 	bl	80050b4 <_lseek_r>
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	4632      	mov	r2, r6
 8005038:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800503c:	81a3      	strh	r3, [r4, #12]
 800503e:	4628      	mov	r0, r5
 8005040:	463b      	mov	r3, r7
 8005042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800504a:	f000 b857 	b.w	80050fc <_write_r>

0800504e <__sseek>:
 800504e:	b510      	push	{r4, lr}
 8005050:	460c      	mov	r4, r1
 8005052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005056:	f000 f82d 	bl	80050b4 <_lseek_r>
 800505a:	1c43      	adds	r3, r0, #1
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	bf15      	itete	ne
 8005060:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005062:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005066:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800506a:	81a3      	strheq	r3, [r4, #12]
 800506c:	bf18      	it	ne
 800506e:	81a3      	strhne	r3, [r4, #12]
 8005070:	bd10      	pop	{r4, pc}

08005072 <__sclose>:
 8005072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005076:	f000 b80d 	b.w	8005094 <_close_r>

0800507a <memset>:
 800507a:	4603      	mov	r3, r0
 800507c:	4402      	add	r2, r0
 800507e:	4293      	cmp	r3, r2
 8005080:	d100      	bne.n	8005084 <memset+0xa>
 8005082:	4770      	bx	lr
 8005084:	f803 1b01 	strb.w	r1, [r3], #1
 8005088:	e7f9      	b.n	800507e <memset+0x4>
	...

0800508c <_localeconv_r>:
 800508c:	4800      	ldr	r0, [pc, #0]	@ (8005090 <_localeconv_r+0x4>)
 800508e:	4770      	bx	lr
 8005090:	2000015c 	.word	0x2000015c

08005094 <_close_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	2300      	movs	r3, #0
 8005098:	4d05      	ldr	r5, [pc, #20]	@ (80050b0 <_close_r+0x1c>)
 800509a:	4604      	mov	r4, r0
 800509c:	4608      	mov	r0, r1
 800509e:	602b      	str	r3, [r5, #0]
 80050a0:	f7fc fc4f 	bl	8001942 <_close>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d102      	bne.n	80050ae <_close_r+0x1a>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	b103      	cbz	r3, 80050ae <_close_r+0x1a>
 80050ac:	6023      	str	r3, [r4, #0]
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	20000420 	.word	0x20000420

080050b4 <_lseek_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4604      	mov	r4, r0
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	2200      	movs	r2, #0
 80050be:	4d05      	ldr	r5, [pc, #20]	@ (80050d4 <_lseek_r+0x20>)
 80050c0:	602a      	str	r2, [r5, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f7fc fc61 	bl	800198a <_lseek>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_lseek_r+0x1e>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_lseek_r+0x1e>
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	20000420 	.word	0x20000420

080050d8 <_read_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	4611      	mov	r1, r2
 80050e0:	2200      	movs	r2, #0
 80050e2:	4d05      	ldr	r5, [pc, #20]	@ (80050f8 <_read_r+0x20>)
 80050e4:	602a      	str	r2, [r5, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f7fc fbf2 	bl	80018d0 <_read>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d102      	bne.n	80050f6 <_read_r+0x1e>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	b103      	cbz	r3, 80050f6 <_read_r+0x1e>
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	20000420 	.word	0x20000420

080050fc <_write_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	2200      	movs	r2, #0
 8005106:	4d05      	ldr	r5, [pc, #20]	@ (800511c <_write_r+0x20>)
 8005108:	602a      	str	r2, [r5, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	f7fc fbfd 	bl	800190a <_write>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_write_r+0x1e>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_write_r+0x1e>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	20000420 	.word	0x20000420

08005120 <__errno>:
 8005120:	4b01      	ldr	r3, [pc, #4]	@ (8005128 <__errno+0x8>)
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	2000001c 	.word	0x2000001c

0800512c <__libc_init_array>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	2600      	movs	r6, #0
 8005130:	4d0c      	ldr	r5, [pc, #48]	@ (8005164 <__libc_init_array+0x38>)
 8005132:	4c0d      	ldr	r4, [pc, #52]	@ (8005168 <__libc_init_array+0x3c>)
 8005134:	1b64      	subs	r4, r4, r5
 8005136:	10a4      	asrs	r4, r4, #2
 8005138:	42a6      	cmp	r6, r4
 800513a:	d109      	bne.n	8005150 <__libc_init_array+0x24>
 800513c:	f003 fb66 	bl	800880c <_init>
 8005140:	2600      	movs	r6, #0
 8005142:	4d0a      	ldr	r5, [pc, #40]	@ (800516c <__libc_init_array+0x40>)
 8005144:	4c0a      	ldr	r4, [pc, #40]	@ (8005170 <__libc_init_array+0x44>)
 8005146:	1b64      	subs	r4, r4, r5
 8005148:	10a4      	asrs	r4, r4, #2
 800514a:	42a6      	cmp	r6, r4
 800514c:	d105      	bne.n	800515a <__libc_init_array+0x2e>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	f855 3b04 	ldr.w	r3, [r5], #4
 8005154:	4798      	blx	r3
 8005156:	3601      	adds	r6, #1
 8005158:	e7ee      	b.n	8005138 <__libc_init_array+0xc>
 800515a:	f855 3b04 	ldr.w	r3, [r5], #4
 800515e:	4798      	blx	r3
 8005160:	3601      	adds	r6, #1
 8005162:	e7f2      	b.n	800514a <__libc_init_array+0x1e>
 8005164:	08008cd0 	.word	0x08008cd0
 8005168:	08008cd0 	.word	0x08008cd0
 800516c:	08008cd0 	.word	0x08008cd0
 8005170:	08008cd4 	.word	0x08008cd4

08005174 <__retarget_lock_init_recursive>:
 8005174:	4770      	bx	lr

08005176 <__retarget_lock_acquire_recursive>:
 8005176:	4770      	bx	lr

08005178 <__retarget_lock_release_recursive>:
 8005178:	4770      	bx	lr

0800517a <memchr>:
 800517a:	4603      	mov	r3, r0
 800517c:	b510      	push	{r4, lr}
 800517e:	b2c9      	uxtb	r1, r1
 8005180:	4402      	add	r2, r0
 8005182:	4293      	cmp	r3, r2
 8005184:	4618      	mov	r0, r3
 8005186:	d101      	bne.n	800518c <memchr+0x12>
 8005188:	2000      	movs	r0, #0
 800518a:	e003      	b.n	8005194 <memchr+0x1a>
 800518c:	7804      	ldrb	r4, [r0, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	428c      	cmp	r4, r1
 8005192:	d1f6      	bne.n	8005182 <memchr+0x8>
 8005194:	bd10      	pop	{r4, pc}
	...

08005198 <nanf>:
 8005198:	4800      	ldr	r0, [pc, #0]	@ (800519c <nanf+0x4>)
 800519a:	4770      	bx	lr
 800519c:	7fc00000 	.word	0x7fc00000

080051a0 <quorem>:
 80051a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	6903      	ldr	r3, [r0, #16]
 80051a6:	690c      	ldr	r4, [r1, #16]
 80051a8:	4607      	mov	r7, r0
 80051aa:	42a3      	cmp	r3, r4
 80051ac:	db7e      	blt.n	80052ac <quorem+0x10c>
 80051ae:	3c01      	subs	r4, #1
 80051b0:	00a3      	lsls	r3, r4, #2
 80051b2:	f100 0514 	add.w	r5, r0, #20
 80051b6:	f101 0814 	add.w	r8, r1, #20
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051ca:	3301      	adds	r3, #1
 80051cc:	429a      	cmp	r2, r3
 80051ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80051d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051d6:	d32e      	bcc.n	8005236 <quorem+0x96>
 80051d8:	f04f 0a00 	mov.w	sl, #0
 80051dc:	46c4      	mov	ip, r8
 80051de:	46ae      	mov	lr, r5
 80051e0:	46d3      	mov	fp, sl
 80051e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80051e6:	b298      	uxth	r0, r3
 80051e8:	fb06 a000 	mla	r0, r6, r0, sl
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	0c02      	lsrs	r2, r0, #16
 80051f0:	fb06 2303 	mla	r3, r6, r3, r2
 80051f4:	f8de 2000 	ldr.w	r2, [lr]
 80051f8:	b280      	uxth	r0, r0
 80051fa:	b292      	uxth	r2, r2
 80051fc:	1a12      	subs	r2, r2, r0
 80051fe:	445a      	add	r2, fp
 8005200:	f8de 0000 	ldr.w	r0, [lr]
 8005204:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005208:	b29b      	uxth	r3, r3
 800520a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800520e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005212:	b292      	uxth	r2, r2
 8005214:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005218:	45e1      	cmp	r9, ip
 800521a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800521e:	f84e 2b04 	str.w	r2, [lr], #4
 8005222:	d2de      	bcs.n	80051e2 <quorem+0x42>
 8005224:	9b00      	ldr	r3, [sp, #0]
 8005226:	58eb      	ldr	r3, [r5, r3]
 8005228:	b92b      	cbnz	r3, 8005236 <quorem+0x96>
 800522a:	9b01      	ldr	r3, [sp, #4]
 800522c:	3b04      	subs	r3, #4
 800522e:	429d      	cmp	r5, r3
 8005230:	461a      	mov	r2, r3
 8005232:	d32f      	bcc.n	8005294 <quorem+0xf4>
 8005234:	613c      	str	r4, [r7, #16]
 8005236:	4638      	mov	r0, r7
 8005238:	f001 f9c2 	bl	80065c0 <__mcmp>
 800523c:	2800      	cmp	r0, #0
 800523e:	db25      	blt.n	800528c <quorem+0xec>
 8005240:	4629      	mov	r1, r5
 8005242:	2000      	movs	r0, #0
 8005244:	f858 2b04 	ldr.w	r2, [r8], #4
 8005248:	f8d1 c000 	ldr.w	ip, [r1]
 800524c:	fa1f fe82 	uxth.w	lr, r2
 8005250:	fa1f f38c 	uxth.w	r3, ip
 8005254:	eba3 030e 	sub.w	r3, r3, lr
 8005258:	4403      	add	r3, r0
 800525a:	0c12      	lsrs	r2, r2, #16
 800525c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005260:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005264:	b29b      	uxth	r3, r3
 8005266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800526a:	45c1      	cmp	r9, r8
 800526c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005270:	f841 3b04 	str.w	r3, [r1], #4
 8005274:	d2e6      	bcs.n	8005244 <quorem+0xa4>
 8005276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800527a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800527e:	b922      	cbnz	r2, 800528a <quorem+0xea>
 8005280:	3b04      	subs	r3, #4
 8005282:	429d      	cmp	r5, r3
 8005284:	461a      	mov	r2, r3
 8005286:	d30b      	bcc.n	80052a0 <quorem+0x100>
 8005288:	613c      	str	r4, [r7, #16]
 800528a:	3601      	adds	r6, #1
 800528c:	4630      	mov	r0, r6
 800528e:	b003      	add	sp, #12
 8005290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	3b04      	subs	r3, #4
 8005298:	2a00      	cmp	r2, #0
 800529a:	d1cb      	bne.n	8005234 <quorem+0x94>
 800529c:	3c01      	subs	r4, #1
 800529e:	e7c6      	b.n	800522e <quorem+0x8e>
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	3b04      	subs	r3, #4
 80052a4:	2a00      	cmp	r2, #0
 80052a6:	d1ef      	bne.n	8005288 <quorem+0xe8>
 80052a8:	3c01      	subs	r4, #1
 80052aa:	e7ea      	b.n	8005282 <quorem+0xe2>
 80052ac:	2000      	movs	r0, #0
 80052ae:	e7ee      	b.n	800528e <quorem+0xee>

080052b0 <_dtoa_r>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	4614      	mov	r4, r2
 80052b6:	461d      	mov	r5, r3
 80052b8:	69c7      	ldr	r7, [r0, #28]
 80052ba:	b097      	sub	sp, #92	@ 0x5c
 80052bc:	4683      	mov	fp, r0
 80052be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80052c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80052c4:	b97f      	cbnz	r7, 80052e6 <_dtoa_r+0x36>
 80052c6:	2010      	movs	r0, #16
 80052c8:	f000 fe02 	bl	8005ed0 <malloc>
 80052cc:	4602      	mov	r2, r0
 80052ce:	f8cb 001c 	str.w	r0, [fp, #28]
 80052d2:	b920      	cbnz	r0, 80052de <_dtoa_r+0x2e>
 80052d4:	21ef      	movs	r1, #239	@ 0xef
 80052d6:	4ba8      	ldr	r3, [pc, #672]	@ (8005578 <_dtoa_r+0x2c8>)
 80052d8:	48a8      	ldr	r0, [pc, #672]	@ (800557c <_dtoa_r+0x2cc>)
 80052da:	f002 fc23 	bl	8007b24 <__assert_func>
 80052de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80052e2:	6007      	str	r7, [r0, #0]
 80052e4:	60c7      	str	r7, [r0, #12]
 80052e6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052ea:	6819      	ldr	r1, [r3, #0]
 80052ec:	b159      	cbz	r1, 8005306 <_dtoa_r+0x56>
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	2301      	movs	r3, #1
 80052f2:	4093      	lsls	r3, r2
 80052f4:	604a      	str	r2, [r1, #4]
 80052f6:	608b      	str	r3, [r1, #8]
 80052f8:	4658      	mov	r0, fp
 80052fa:	f000 fedf 	bl	80060bc <_Bfree>
 80052fe:	2200      	movs	r2, #0
 8005300:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	1e2b      	subs	r3, r5, #0
 8005308:	bfaf      	iteee	ge
 800530a:	2300      	movge	r3, #0
 800530c:	2201      	movlt	r2, #1
 800530e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005312:	9303      	strlt	r3, [sp, #12]
 8005314:	bfa8      	it	ge
 8005316:	6033      	strge	r3, [r6, #0]
 8005318:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800531c:	4b98      	ldr	r3, [pc, #608]	@ (8005580 <_dtoa_r+0x2d0>)
 800531e:	bfb8      	it	lt
 8005320:	6032      	strlt	r2, [r6, #0]
 8005322:	ea33 0308 	bics.w	r3, r3, r8
 8005326:	d112      	bne.n	800534e <_dtoa_r+0x9e>
 8005328:	f242 730f 	movw	r3, #9999	@ 0x270f
 800532c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005334:	4323      	orrs	r3, r4
 8005336:	f000 8550 	beq.w	8005dda <_dtoa_r+0xb2a>
 800533a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800533c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005584 <_dtoa_r+0x2d4>
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8552 	beq.w	8005dea <_dtoa_r+0xb3a>
 8005346:	f10a 0303 	add.w	r3, sl, #3
 800534a:	f000 bd4c 	b.w	8005de6 <_dtoa_r+0xb36>
 800534e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005352:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	f7fb fb23 	bl	80009a8 <__aeabi_dcmpeq>
 8005362:	4607      	mov	r7, r0
 8005364:	b158      	cbz	r0, 800537e <_dtoa_r+0xce>
 8005366:	2301      	movs	r3, #1
 8005368:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800536e:	b113      	cbz	r3, 8005376 <_dtoa_r+0xc6>
 8005370:	4b85      	ldr	r3, [pc, #532]	@ (8005588 <_dtoa_r+0x2d8>)
 8005372:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800558c <_dtoa_r+0x2dc>
 800537a:	f000 bd36 	b.w	8005dea <_dtoa_r+0xb3a>
 800537e:	ab14      	add	r3, sp, #80	@ 0x50
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	ab15      	add	r3, sp, #84	@ 0x54
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	4658      	mov	r0, fp
 8005388:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800538c:	f001 fa30 	bl	80067f0 <__d2b>
 8005390:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005394:	4681      	mov	r9, r0
 8005396:	2e00      	cmp	r6, #0
 8005398:	d077      	beq.n	800548a <_dtoa_r+0x1da>
 800539a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800539e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053a0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80053a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80053ac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80053b0:	9712      	str	r7, [sp, #72]	@ 0x48
 80053b2:	4619      	mov	r1, r3
 80053b4:	2200      	movs	r2, #0
 80053b6:	4b76      	ldr	r3, [pc, #472]	@ (8005590 <_dtoa_r+0x2e0>)
 80053b8:	f7fa fed6 	bl	8000168 <__aeabi_dsub>
 80053bc:	a368      	add	r3, pc, #416	@ (adr r3, 8005560 <_dtoa_r+0x2b0>)
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f7fb f889 	bl	80004d8 <__aeabi_dmul>
 80053c6:	a368      	add	r3, pc, #416	@ (adr r3, 8005568 <_dtoa_r+0x2b8>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f7fa fece 	bl	800016c <__adddf3>
 80053d0:	4604      	mov	r4, r0
 80053d2:	4630      	mov	r0, r6
 80053d4:	460d      	mov	r5, r1
 80053d6:	f7fb f815 	bl	8000404 <__aeabi_i2d>
 80053da:	a365      	add	r3, pc, #404	@ (adr r3, 8005570 <_dtoa_r+0x2c0>)
 80053dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e0:	f7fb f87a 	bl	80004d8 <__aeabi_dmul>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4620      	mov	r0, r4
 80053ea:	4629      	mov	r1, r5
 80053ec:	f7fa febe 	bl	800016c <__adddf3>
 80053f0:	4604      	mov	r4, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	f7fb fb20 	bl	8000a38 <__aeabi_d2iz>
 80053f8:	2200      	movs	r2, #0
 80053fa:	4607      	mov	r7, r0
 80053fc:	2300      	movs	r3, #0
 80053fe:	4620      	mov	r0, r4
 8005400:	4629      	mov	r1, r5
 8005402:	f7fb fadb 	bl	80009bc <__aeabi_dcmplt>
 8005406:	b140      	cbz	r0, 800541a <_dtoa_r+0x16a>
 8005408:	4638      	mov	r0, r7
 800540a:	f7fa fffb 	bl	8000404 <__aeabi_i2d>
 800540e:	4622      	mov	r2, r4
 8005410:	462b      	mov	r3, r5
 8005412:	f7fb fac9 	bl	80009a8 <__aeabi_dcmpeq>
 8005416:	b900      	cbnz	r0, 800541a <_dtoa_r+0x16a>
 8005418:	3f01      	subs	r7, #1
 800541a:	2f16      	cmp	r7, #22
 800541c:	d853      	bhi.n	80054c6 <_dtoa_r+0x216>
 800541e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005422:	4b5c      	ldr	r3, [pc, #368]	@ (8005594 <_dtoa_r+0x2e4>)
 8005424:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fb fac6 	bl	80009bc <__aeabi_dcmplt>
 8005430:	2800      	cmp	r0, #0
 8005432:	d04a      	beq.n	80054ca <_dtoa_r+0x21a>
 8005434:	2300      	movs	r3, #0
 8005436:	3f01      	subs	r7, #1
 8005438:	930f      	str	r3, [sp, #60]	@ 0x3c
 800543a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800543c:	1b9b      	subs	r3, r3, r6
 800543e:	1e5a      	subs	r2, r3, #1
 8005440:	bf46      	itte	mi
 8005442:	f1c3 0801 	rsbmi	r8, r3, #1
 8005446:	2300      	movmi	r3, #0
 8005448:	f04f 0800 	movpl.w	r8, #0
 800544c:	9209      	str	r2, [sp, #36]	@ 0x24
 800544e:	bf48      	it	mi
 8005450:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005452:	2f00      	cmp	r7, #0
 8005454:	db3b      	blt.n	80054ce <_dtoa_r+0x21e>
 8005456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005458:	970e      	str	r7, [sp, #56]	@ 0x38
 800545a:	443b      	add	r3, r7
 800545c:	9309      	str	r3, [sp, #36]	@ 0x24
 800545e:	2300      	movs	r3, #0
 8005460:	930a      	str	r3, [sp, #40]	@ 0x28
 8005462:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005464:	2b09      	cmp	r3, #9
 8005466:	d866      	bhi.n	8005536 <_dtoa_r+0x286>
 8005468:	2b05      	cmp	r3, #5
 800546a:	bfc4      	itt	gt
 800546c:	3b04      	subgt	r3, #4
 800546e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005470:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005472:	bfc8      	it	gt
 8005474:	2400      	movgt	r4, #0
 8005476:	f1a3 0302 	sub.w	r3, r3, #2
 800547a:	bfd8      	it	le
 800547c:	2401      	movle	r4, #1
 800547e:	2b03      	cmp	r3, #3
 8005480:	d864      	bhi.n	800554c <_dtoa_r+0x29c>
 8005482:	e8df f003 	tbb	[pc, r3]
 8005486:	382b      	.short	0x382b
 8005488:	5636      	.short	0x5636
 800548a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800548e:	441e      	add	r6, r3
 8005490:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005494:	2b20      	cmp	r3, #32
 8005496:	bfc1      	itttt	gt
 8005498:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800549c:	fa08 f803 	lslgt.w	r8, r8, r3
 80054a0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80054a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80054a8:	bfd6      	itet	le
 80054aa:	f1c3 0320 	rsble	r3, r3, #32
 80054ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80054b2:	fa04 f003 	lslle.w	r0, r4, r3
 80054b6:	f7fa ff95 	bl	80003e4 <__aeabi_ui2d>
 80054ba:	2201      	movs	r2, #1
 80054bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80054c0:	3e01      	subs	r6, #1
 80054c2:	9212      	str	r2, [sp, #72]	@ 0x48
 80054c4:	e775      	b.n	80053b2 <_dtoa_r+0x102>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e7b6      	b.n	8005438 <_dtoa_r+0x188>
 80054ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 80054cc:	e7b5      	b.n	800543a <_dtoa_r+0x18a>
 80054ce:	427b      	negs	r3, r7
 80054d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80054d2:	2300      	movs	r3, #0
 80054d4:	eba8 0807 	sub.w	r8, r8, r7
 80054d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80054da:	e7c2      	b.n	8005462 <_dtoa_r+0x1b2>
 80054dc:	2300      	movs	r3, #0
 80054de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	dc35      	bgt.n	8005552 <_dtoa_r+0x2a2>
 80054e6:	2301      	movs	r3, #1
 80054e8:	461a      	mov	r2, r3
 80054ea:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80054ee:	9221      	str	r2, [sp, #132]	@ 0x84
 80054f0:	e00b      	b.n	800550a <_dtoa_r+0x25a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e7f3      	b.n	80054de <_dtoa_r+0x22e>
 80054f6:	2300      	movs	r3, #0
 80054f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	9308      	str	r3, [sp, #32]
 8005500:	3301      	adds	r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	9307      	str	r3, [sp, #28]
 8005506:	bfb8      	it	lt
 8005508:	2301      	movlt	r3, #1
 800550a:	2100      	movs	r1, #0
 800550c:	2204      	movs	r2, #4
 800550e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005512:	f102 0514 	add.w	r5, r2, #20
 8005516:	429d      	cmp	r5, r3
 8005518:	d91f      	bls.n	800555a <_dtoa_r+0x2aa>
 800551a:	6041      	str	r1, [r0, #4]
 800551c:	4658      	mov	r0, fp
 800551e:	f000 fd8d 	bl	800603c <_Balloc>
 8005522:	4682      	mov	sl, r0
 8005524:	2800      	cmp	r0, #0
 8005526:	d139      	bne.n	800559c <_dtoa_r+0x2ec>
 8005528:	4602      	mov	r2, r0
 800552a:	f240 11af 	movw	r1, #431	@ 0x1af
 800552e:	4b1a      	ldr	r3, [pc, #104]	@ (8005598 <_dtoa_r+0x2e8>)
 8005530:	e6d2      	b.n	80052d8 <_dtoa_r+0x28>
 8005532:	2301      	movs	r3, #1
 8005534:	e7e0      	b.n	80054f8 <_dtoa_r+0x248>
 8005536:	2401      	movs	r4, #1
 8005538:	2300      	movs	r3, #0
 800553a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800553c:	9320      	str	r3, [sp, #128]	@ 0x80
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	2200      	movs	r2, #0
 8005544:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005548:	2312      	movs	r3, #18
 800554a:	e7d0      	b.n	80054ee <_dtoa_r+0x23e>
 800554c:	2301      	movs	r3, #1
 800554e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005550:	e7f5      	b.n	800553e <_dtoa_r+0x28e>
 8005552:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005554:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005558:	e7d7      	b.n	800550a <_dtoa_r+0x25a>
 800555a:	3101      	adds	r1, #1
 800555c:	0052      	lsls	r2, r2, #1
 800555e:	e7d8      	b.n	8005512 <_dtoa_r+0x262>
 8005560:	636f4361 	.word	0x636f4361
 8005564:	3fd287a7 	.word	0x3fd287a7
 8005568:	8b60c8b3 	.word	0x8b60c8b3
 800556c:	3fc68a28 	.word	0x3fc68a28
 8005570:	509f79fb 	.word	0x509f79fb
 8005574:	3fd34413 	.word	0x3fd34413
 8005578:	080088dc 	.word	0x080088dc
 800557c:	080088f3 	.word	0x080088f3
 8005580:	7ff00000 	.word	0x7ff00000
 8005584:	080088d8 	.word	0x080088d8
 8005588:	080088a7 	.word	0x080088a7
 800558c:	080088a6 	.word	0x080088a6
 8005590:	3ff80000 	.word	0x3ff80000
 8005594:	080089f0 	.word	0x080089f0
 8005598:	0800894b 	.word	0x0800894b
 800559c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80055a0:	6018      	str	r0, [r3, #0]
 80055a2:	9b07      	ldr	r3, [sp, #28]
 80055a4:	2b0e      	cmp	r3, #14
 80055a6:	f200 80a4 	bhi.w	80056f2 <_dtoa_r+0x442>
 80055aa:	2c00      	cmp	r4, #0
 80055ac:	f000 80a1 	beq.w	80056f2 <_dtoa_r+0x442>
 80055b0:	2f00      	cmp	r7, #0
 80055b2:	dd33      	ble.n	800561c <_dtoa_r+0x36c>
 80055b4:	4b86      	ldr	r3, [pc, #536]	@ (80057d0 <_dtoa_r+0x520>)
 80055b6:	f007 020f 	and.w	r2, r7, #15
 80055ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055be:	05f8      	lsls	r0, r7, #23
 80055c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80055cc:	d516      	bpl.n	80055fc <_dtoa_r+0x34c>
 80055ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055d2:	4b80      	ldr	r3, [pc, #512]	@ (80057d4 <_dtoa_r+0x524>)
 80055d4:	2603      	movs	r6, #3
 80055d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055da:	f7fb f8a7 	bl	800072c <__aeabi_ddiv>
 80055de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e2:	f004 040f 	and.w	r4, r4, #15
 80055e6:	4d7b      	ldr	r5, [pc, #492]	@ (80057d4 <_dtoa_r+0x524>)
 80055e8:	b954      	cbnz	r4, 8005600 <_dtoa_r+0x350>
 80055ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055f2:	f7fb f89b 	bl	800072c <__aeabi_ddiv>
 80055f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055fa:	e028      	b.n	800564e <_dtoa_r+0x39e>
 80055fc:	2602      	movs	r6, #2
 80055fe:	e7f2      	b.n	80055e6 <_dtoa_r+0x336>
 8005600:	07e1      	lsls	r1, r4, #31
 8005602:	d508      	bpl.n	8005616 <_dtoa_r+0x366>
 8005604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005608:	e9d5 2300 	ldrd	r2, r3, [r5]
 800560c:	f7fa ff64 	bl	80004d8 <__aeabi_dmul>
 8005610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005614:	3601      	adds	r6, #1
 8005616:	1064      	asrs	r4, r4, #1
 8005618:	3508      	adds	r5, #8
 800561a:	e7e5      	b.n	80055e8 <_dtoa_r+0x338>
 800561c:	f000 80d2 	beq.w	80057c4 <_dtoa_r+0x514>
 8005620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005624:	427c      	negs	r4, r7
 8005626:	4b6a      	ldr	r3, [pc, #424]	@ (80057d0 <_dtoa_r+0x520>)
 8005628:	f004 020f 	and.w	r2, r4, #15
 800562c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f7fa ff50 	bl	80004d8 <__aeabi_dmul>
 8005638:	2602      	movs	r6, #2
 800563a:	2300      	movs	r3, #0
 800563c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005640:	4d64      	ldr	r5, [pc, #400]	@ (80057d4 <_dtoa_r+0x524>)
 8005642:	1124      	asrs	r4, r4, #4
 8005644:	2c00      	cmp	r4, #0
 8005646:	f040 80b2 	bne.w	80057ae <_dtoa_r+0x4fe>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1d3      	bne.n	80055f6 <_dtoa_r+0x346>
 800564e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005652:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80b7 	beq.w	80057c8 <_dtoa_r+0x518>
 800565a:	2200      	movs	r2, #0
 800565c:	4620      	mov	r0, r4
 800565e:	4629      	mov	r1, r5
 8005660:	4b5d      	ldr	r3, [pc, #372]	@ (80057d8 <_dtoa_r+0x528>)
 8005662:	f7fb f9ab 	bl	80009bc <__aeabi_dcmplt>
 8005666:	2800      	cmp	r0, #0
 8005668:	f000 80ae 	beq.w	80057c8 <_dtoa_r+0x518>
 800566c:	9b07      	ldr	r3, [sp, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 80aa 	beq.w	80057c8 <_dtoa_r+0x518>
 8005674:	9b08      	ldr	r3, [sp, #32]
 8005676:	2b00      	cmp	r3, #0
 8005678:	dd37      	ble.n	80056ea <_dtoa_r+0x43a>
 800567a:	1e7b      	subs	r3, r7, #1
 800567c:	4620      	mov	r0, r4
 800567e:	9304      	str	r3, [sp, #16]
 8005680:	2200      	movs	r2, #0
 8005682:	4629      	mov	r1, r5
 8005684:	4b55      	ldr	r3, [pc, #340]	@ (80057dc <_dtoa_r+0x52c>)
 8005686:	f7fa ff27 	bl	80004d8 <__aeabi_dmul>
 800568a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800568e:	9c08      	ldr	r4, [sp, #32]
 8005690:	3601      	adds	r6, #1
 8005692:	4630      	mov	r0, r6
 8005694:	f7fa feb6 	bl	8000404 <__aeabi_i2d>
 8005698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800569c:	f7fa ff1c 	bl	80004d8 <__aeabi_dmul>
 80056a0:	2200      	movs	r2, #0
 80056a2:	4b4f      	ldr	r3, [pc, #316]	@ (80057e0 <_dtoa_r+0x530>)
 80056a4:	f7fa fd62 	bl	800016c <__adddf3>
 80056a8:	4605      	mov	r5, r0
 80056aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80056ae:	2c00      	cmp	r4, #0
 80056b0:	f040 809a 	bne.w	80057e8 <_dtoa_r+0x538>
 80056b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056b8:	2200      	movs	r2, #0
 80056ba:	4b4a      	ldr	r3, [pc, #296]	@ (80057e4 <_dtoa_r+0x534>)
 80056bc:	f7fa fd54 	bl	8000168 <__aeabi_dsub>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056c8:	462a      	mov	r2, r5
 80056ca:	4633      	mov	r3, r6
 80056cc:	f7fb f994 	bl	80009f8 <__aeabi_dcmpgt>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	f040 828e 	bne.w	8005bf2 <_dtoa_r+0x942>
 80056d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056da:	462a      	mov	r2, r5
 80056dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80056e0:	f7fb f96c 	bl	80009bc <__aeabi_dcmplt>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	f040 8127 	bne.w	8005938 <_dtoa_r+0x688>
 80056ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80056ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80056f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f2c0 8163 	blt.w	80059c0 <_dtoa_r+0x710>
 80056fa:	2f0e      	cmp	r7, #14
 80056fc:	f300 8160 	bgt.w	80059c0 <_dtoa_r+0x710>
 8005700:	4b33      	ldr	r3, [pc, #204]	@ (80057d0 <_dtoa_r+0x520>)
 8005702:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005706:	e9d3 3400 	ldrd	r3, r4, [r3]
 800570a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800570e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005710:	2b00      	cmp	r3, #0
 8005712:	da03      	bge.n	800571c <_dtoa_r+0x46c>
 8005714:	9b07      	ldr	r3, [sp, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f340 8100 	ble.w	800591c <_dtoa_r+0x66c>
 800571c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005720:	4656      	mov	r6, sl
 8005722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fa ffff 	bl	800072c <__aeabi_ddiv>
 800572e:	f7fb f983 	bl	8000a38 <__aeabi_d2iz>
 8005732:	4680      	mov	r8, r0
 8005734:	f7fa fe66 	bl	8000404 <__aeabi_i2d>
 8005738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800573c:	f7fa fecc 	bl	80004d8 <__aeabi_dmul>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4620      	mov	r0, r4
 8005746:	4629      	mov	r1, r5
 8005748:	f7fa fd0e 	bl	8000168 <__aeabi_dsub>
 800574c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005750:	9d07      	ldr	r5, [sp, #28]
 8005752:	f806 4b01 	strb.w	r4, [r6], #1
 8005756:	eba6 040a 	sub.w	r4, r6, sl
 800575a:	42a5      	cmp	r5, r4
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	f040 8116 	bne.w	8005990 <_dtoa_r+0x6e0>
 8005764:	f7fa fd02 	bl	800016c <__adddf3>
 8005768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800576c:	4604      	mov	r4, r0
 800576e:	460d      	mov	r5, r1
 8005770:	f7fb f942 	bl	80009f8 <__aeabi_dcmpgt>
 8005774:	2800      	cmp	r0, #0
 8005776:	f040 80f8 	bne.w	800596a <_dtoa_r+0x6ba>
 800577a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800577e:	4620      	mov	r0, r4
 8005780:	4629      	mov	r1, r5
 8005782:	f7fb f911 	bl	80009a8 <__aeabi_dcmpeq>
 8005786:	b118      	cbz	r0, 8005790 <_dtoa_r+0x4e0>
 8005788:	f018 0f01 	tst.w	r8, #1
 800578c:	f040 80ed 	bne.w	800596a <_dtoa_r+0x6ba>
 8005790:	4649      	mov	r1, r9
 8005792:	4658      	mov	r0, fp
 8005794:	f000 fc92 	bl	80060bc <_Bfree>
 8005798:	2300      	movs	r3, #0
 800579a:	7033      	strb	r3, [r6, #0]
 800579c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800579e:	3701      	adds	r7, #1
 80057a0:	601f      	str	r7, [r3, #0]
 80057a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8320 	beq.w	8005dea <_dtoa_r+0xb3a>
 80057aa:	601e      	str	r6, [r3, #0]
 80057ac:	e31d      	b.n	8005dea <_dtoa_r+0xb3a>
 80057ae:	07e2      	lsls	r2, r4, #31
 80057b0:	d505      	bpl.n	80057be <_dtoa_r+0x50e>
 80057b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057b6:	f7fa fe8f 	bl	80004d8 <__aeabi_dmul>
 80057ba:	2301      	movs	r3, #1
 80057bc:	3601      	adds	r6, #1
 80057be:	1064      	asrs	r4, r4, #1
 80057c0:	3508      	adds	r5, #8
 80057c2:	e73f      	b.n	8005644 <_dtoa_r+0x394>
 80057c4:	2602      	movs	r6, #2
 80057c6:	e742      	b.n	800564e <_dtoa_r+0x39e>
 80057c8:	9c07      	ldr	r4, [sp, #28]
 80057ca:	9704      	str	r7, [sp, #16]
 80057cc:	e761      	b.n	8005692 <_dtoa_r+0x3e2>
 80057ce:	bf00      	nop
 80057d0:	080089f0 	.word	0x080089f0
 80057d4:	080089c8 	.word	0x080089c8
 80057d8:	3ff00000 	.word	0x3ff00000
 80057dc:	40240000 	.word	0x40240000
 80057e0:	401c0000 	.word	0x401c0000
 80057e4:	40140000 	.word	0x40140000
 80057e8:	4b70      	ldr	r3, [pc, #448]	@ (80059ac <_dtoa_r+0x6fc>)
 80057ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057f4:	4454      	add	r4, sl
 80057f6:	2900      	cmp	r1, #0
 80057f8:	d045      	beq.n	8005886 <_dtoa_r+0x5d6>
 80057fa:	2000      	movs	r0, #0
 80057fc:	496c      	ldr	r1, [pc, #432]	@ (80059b0 <_dtoa_r+0x700>)
 80057fe:	f7fa ff95 	bl	800072c <__aeabi_ddiv>
 8005802:	4633      	mov	r3, r6
 8005804:	462a      	mov	r2, r5
 8005806:	f7fa fcaf 	bl	8000168 <__aeabi_dsub>
 800580a:	4656      	mov	r6, sl
 800580c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005814:	f7fb f910 	bl	8000a38 <__aeabi_d2iz>
 8005818:	4605      	mov	r5, r0
 800581a:	f7fa fdf3 	bl	8000404 <__aeabi_i2d>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005826:	f7fa fc9f 	bl	8000168 <__aeabi_dsub>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	3530      	adds	r5, #48	@ 0x30
 8005830:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005834:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005838:	f806 5b01 	strb.w	r5, [r6], #1
 800583c:	f7fb f8be 	bl	80009bc <__aeabi_dcmplt>
 8005840:	2800      	cmp	r0, #0
 8005842:	d163      	bne.n	800590c <_dtoa_r+0x65c>
 8005844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005848:	2000      	movs	r0, #0
 800584a:	495a      	ldr	r1, [pc, #360]	@ (80059b4 <_dtoa_r+0x704>)
 800584c:	f7fa fc8c 	bl	8000168 <__aeabi_dsub>
 8005850:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005854:	f7fb f8b2 	bl	80009bc <__aeabi_dcmplt>
 8005858:	2800      	cmp	r0, #0
 800585a:	f040 8087 	bne.w	800596c <_dtoa_r+0x6bc>
 800585e:	42a6      	cmp	r6, r4
 8005860:	f43f af43 	beq.w	80056ea <_dtoa_r+0x43a>
 8005864:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005868:	2200      	movs	r2, #0
 800586a:	4b53      	ldr	r3, [pc, #332]	@ (80059b8 <_dtoa_r+0x708>)
 800586c:	f7fa fe34 	bl	80004d8 <__aeabi_dmul>
 8005870:	2200      	movs	r2, #0
 8005872:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800587a:	4b4f      	ldr	r3, [pc, #316]	@ (80059b8 <_dtoa_r+0x708>)
 800587c:	f7fa fe2c 	bl	80004d8 <__aeabi_dmul>
 8005880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005884:	e7c4      	b.n	8005810 <_dtoa_r+0x560>
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	4656      	mov	r6, sl
 8005890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005894:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800589a:	f7fb f8cd 	bl	8000a38 <__aeabi_d2iz>
 800589e:	4605      	mov	r5, r0
 80058a0:	f7fa fdb0 	bl	8000404 <__aeabi_i2d>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ac:	f7fa fc5c 	bl	8000168 <__aeabi_dsub>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	3530      	adds	r5, #48	@ 0x30
 80058b6:	f806 5b01 	strb.w	r5, [r6], #1
 80058ba:	42a6      	cmp	r6, r4
 80058bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	d124      	bne.n	8005910 <_dtoa_r+0x660>
 80058c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058ca:	4b39      	ldr	r3, [pc, #228]	@ (80059b0 <_dtoa_r+0x700>)
 80058cc:	f7fa fc4e 	bl	800016c <__adddf3>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058d8:	f7fb f88e 	bl	80009f8 <__aeabi_dcmpgt>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d145      	bne.n	800596c <_dtoa_r+0x6bc>
 80058e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058e4:	2000      	movs	r0, #0
 80058e6:	4932      	ldr	r1, [pc, #200]	@ (80059b0 <_dtoa_r+0x700>)
 80058e8:	f7fa fc3e 	bl	8000168 <__aeabi_dsub>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058f4:	f7fb f862 	bl	80009bc <__aeabi_dcmplt>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	f43f aef6 	beq.w	80056ea <_dtoa_r+0x43a>
 80058fe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005900:	1e73      	subs	r3, r6, #1
 8005902:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005904:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005908:	2b30      	cmp	r3, #48	@ 0x30
 800590a:	d0f8      	beq.n	80058fe <_dtoa_r+0x64e>
 800590c:	9f04      	ldr	r7, [sp, #16]
 800590e:	e73f      	b.n	8005790 <_dtoa_r+0x4e0>
 8005910:	4b29      	ldr	r3, [pc, #164]	@ (80059b8 <_dtoa_r+0x708>)
 8005912:	f7fa fde1 	bl	80004d8 <__aeabi_dmul>
 8005916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800591a:	e7bc      	b.n	8005896 <_dtoa_r+0x5e6>
 800591c:	d10c      	bne.n	8005938 <_dtoa_r+0x688>
 800591e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005922:	2200      	movs	r2, #0
 8005924:	4b25      	ldr	r3, [pc, #148]	@ (80059bc <_dtoa_r+0x70c>)
 8005926:	f7fa fdd7 	bl	80004d8 <__aeabi_dmul>
 800592a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800592e:	f7fb f859 	bl	80009e4 <__aeabi_dcmpge>
 8005932:	2800      	cmp	r0, #0
 8005934:	f000 815b 	beq.w	8005bee <_dtoa_r+0x93e>
 8005938:	2400      	movs	r4, #0
 800593a:	4625      	mov	r5, r4
 800593c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800593e:	4656      	mov	r6, sl
 8005940:	43db      	mvns	r3, r3
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	2700      	movs	r7, #0
 8005946:	4621      	mov	r1, r4
 8005948:	4658      	mov	r0, fp
 800594a:	f000 fbb7 	bl	80060bc <_Bfree>
 800594e:	2d00      	cmp	r5, #0
 8005950:	d0dc      	beq.n	800590c <_dtoa_r+0x65c>
 8005952:	b12f      	cbz	r7, 8005960 <_dtoa_r+0x6b0>
 8005954:	42af      	cmp	r7, r5
 8005956:	d003      	beq.n	8005960 <_dtoa_r+0x6b0>
 8005958:	4639      	mov	r1, r7
 800595a:	4658      	mov	r0, fp
 800595c:	f000 fbae 	bl	80060bc <_Bfree>
 8005960:	4629      	mov	r1, r5
 8005962:	4658      	mov	r0, fp
 8005964:	f000 fbaa 	bl	80060bc <_Bfree>
 8005968:	e7d0      	b.n	800590c <_dtoa_r+0x65c>
 800596a:	9704      	str	r7, [sp, #16]
 800596c:	4633      	mov	r3, r6
 800596e:	461e      	mov	r6, r3
 8005970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005974:	2a39      	cmp	r2, #57	@ 0x39
 8005976:	d107      	bne.n	8005988 <_dtoa_r+0x6d8>
 8005978:	459a      	cmp	sl, r3
 800597a:	d1f8      	bne.n	800596e <_dtoa_r+0x6be>
 800597c:	9a04      	ldr	r2, [sp, #16]
 800597e:	3201      	adds	r2, #1
 8005980:	9204      	str	r2, [sp, #16]
 8005982:	2230      	movs	r2, #48	@ 0x30
 8005984:	f88a 2000 	strb.w	r2, [sl]
 8005988:	781a      	ldrb	r2, [r3, #0]
 800598a:	3201      	adds	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e7bd      	b.n	800590c <_dtoa_r+0x65c>
 8005990:	2200      	movs	r2, #0
 8005992:	4b09      	ldr	r3, [pc, #36]	@ (80059b8 <_dtoa_r+0x708>)
 8005994:	f7fa fda0 	bl	80004d8 <__aeabi_dmul>
 8005998:	2200      	movs	r2, #0
 800599a:	2300      	movs	r3, #0
 800599c:	4604      	mov	r4, r0
 800599e:	460d      	mov	r5, r1
 80059a0:	f7fb f802 	bl	80009a8 <__aeabi_dcmpeq>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	f43f aebc 	beq.w	8005722 <_dtoa_r+0x472>
 80059aa:	e6f1      	b.n	8005790 <_dtoa_r+0x4e0>
 80059ac:	080089f0 	.word	0x080089f0
 80059b0:	3fe00000 	.word	0x3fe00000
 80059b4:	3ff00000 	.word	0x3ff00000
 80059b8:	40240000 	.word	0x40240000
 80059bc:	40140000 	.word	0x40140000
 80059c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80059c2:	2a00      	cmp	r2, #0
 80059c4:	f000 80db 	beq.w	8005b7e <_dtoa_r+0x8ce>
 80059c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80059ca:	2a01      	cmp	r2, #1
 80059cc:	f300 80bf 	bgt.w	8005b4e <_dtoa_r+0x89e>
 80059d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80059d2:	2a00      	cmp	r2, #0
 80059d4:	f000 80b7 	beq.w	8005b46 <_dtoa_r+0x896>
 80059d8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80059dc:	4646      	mov	r6, r8
 80059de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80059e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059e2:	2101      	movs	r1, #1
 80059e4:	441a      	add	r2, r3
 80059e6:	4658      	mov	r0, fp
 80059e8:	4498      	add	r8, r3
 80059ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80059ec:	f000 fc64 	bl	80062b8 <__i2b>
 80059f0:	4605      	mov	r5, r0
 80059f2:	b15e      	cbz	r6, 8005a0c <_dtoa_r+0x75c>
 80059f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	dd08      	ble.n	8005a0c <_dtoa_r+0x75c>
 80059fa:	42b3      	cmp	r3, r6
 80059fc:	bfa8      	it	ge
 80059fe:	4633      	movge	r3, r6
 8005a00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a02:	eba8 0803 	sub.w	r8, r8, r3
 8005a06:	1af6      	subs	r6, r6, r3
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a0e:	b1f3      	cbz	r3, 8005a4e <_dtoa_r+0x79e>
 8005a10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80b7 	beq.w	8005b86 <_dtoa_r+0x8d6>
 8005a18:	b18c      	cbz	r4, 8005a3e <_dtoa_r+0x78e>
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	4658      	mov	r0, fp
 8005a20:	f000 fd08 	bl	8006434 <__pow5mult>
 8005a24:	464a      	mov	r2, r9
 8005a26:	4601      	mov	r1, r0
 8005a28:	4605      	mov	r5, r0
 8005a2a:	4658      	mov	r0, fp
 8005a2c:	f000 fc5a 	bl	80062e4 <__multiply>
 8005a30:	4649      	mov	r1, r9
 8005a32:	9004      	str	r0, [sp, #16]
 8005a34:	4658      	mov	r0, fp
 8005a36:	f000 fb41 	bl	80060bc <_Bfree>
 8005a3a:	9b04      	ldr	r3, [sp, #16]
 8005a3c:	4699      	mov	r9, r3
 8005a3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a40:	1b1a      	subs	r2, r3, r4
 8005a42:	d004      	beq.n	8005a4e <_dtoa_r+0x79e>
 8005a44:	4649      	mov	r1, r9
 8005a46:	4658      	mov	r0, fp
 8005a48:	f000 fcf4 	bl	8006434 <__pow5mult>
 8005a4c:	4681      	mov	r9, r0
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4658      	mov	r0, fp
 8005a52:	f000 fc31 	bl	80062b8 <__i2b>
 8005a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a58:	4604      	mov	r4, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 81c9 	beq.w	8005df2 <_dtoa_r+0xb42>
 8005a60:	461a      	mov	r2, r3
 8005a62:	4601      	mov	r1, r0
 8005a64:	4658      	mov	r0, fp
 8005a66:	f000 fce5 	bl	8006434 <__pow5mult>
 8005a6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	f300 808f 	bgt.w	8005b92 <_dtoa_r+0x8e2>
 8005a74:	9b02      	ldr	r3, [sp, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f040 8087 	bne.w	8005b8a <_dtoa_r+0x8da>
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 8083 	bne.w	8005b8e <_dtoa_r+0x8de>
 8005a88:	9b03      	ldr	r3, [sp, #12]
 8005a8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a8e:	0d1b      	lsrs	r3, r3, #20
 8005a90:	051b      	lsls	r3, r3, #20
 8005a92:	b12b      	cbz	r3, 8005aa0 <_dtoa_r+0x7f0>
 8005a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a96:	f108 0801 	add.w	r8, r8, #1
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 81aa 	beq.w	8005dfe <_dtoa_r+0xb4e>
 8005aaa:	6923      	ldr	r3, [r4, #16]
 8005aac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ab0:	6918      	ldr	r0, [r3, #16]
 8005ab2:	f000 fbb5 	bl	8006220 <__hi0bits>
 8005ab6:	f1c0 0020 	rsb	r0, r0, #32
 8005aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005abc:	4418      	add	r0, r3
 8005abe:	f010 001f 	ands.w	r0, r0, #31
 8005ac2:	d071      	beq.n	8005ba8 <_dtoa_r+0x8f8>
 8005ac4:	f1c0 0320 	rsb	r3, r0, #32
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	dd65      	ble.n	8005b98 <_dtoa_r+0x8e8>
 8005acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ace:	f1c0 001c 	rsb	r0, r0, #28
 8005ad2:	4403      	add	r3, r0
 8005ad4:	4480      	add	r8, r0
 8005ad6:	4406      	add	r6, r0
 8005ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ada:	f1b8 0f00 	cmp.w	r8, #0
 8005ade:	dd05      	ble.n	8005aec <_dtoa_r+0x83c>
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	4658      	mov	r0, fp
 8005ae6:	f000 fcff 	bl	80064e8 <__lshift>
 8005aea:	4681      	mov	r9, r0
 8005aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	dd05      	ble.n	8005afe <_dtoa_r+0x84e>
 8005af2:	4621      	mov	r1, r4
 8005af4:	461a      	mov	r2, r3
 8005af6:	4658      	mov	r0, fp
 8005af8:	f000 fcf6 	bl	80064e8 <__lshift>
 8005afc:	4604      	mov	r4, r0
 8005afe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d053      	beq.n	8005bac <_dtoa_r+0x8fc>
 8005b04:	4621      	mov	r1, r4
 8005b06:	4648      	mov	r0, r9
 8005b08:	f000 fd5a 	bl	80065c0 <__mcmp>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	da4d      	bge.n	8005bac <_dtoa_r+0x8fc>
 8005b10:	1e7b      	subs	r3, r7, #1
 8005b12:	4649      	mov	r1, r9
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	220a      	movs	r2, #10
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4658      	mov	r0, fp
 8005b1c:	f000 faf0 	bl	8006100 <__multadd>
 8005b20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b22:	4681      	mov	r9, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 816c 	beq.w	8005e02 <_dtoa_r+0xb52>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	220a      	movs	r2, #10
 8005b30:	4658      	mov	r0, fp
 8005b32:	f000 fae5 	bl	8006100 <__multadd>
 8005b36:	9b08      	ldr	r3, [sp, #32]
 8005b38:	4605      	mov	r5, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dc61      	bgt.n	8005c02 <_dtoa_r+0x952>
 8005b3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	dc3b      	bgt.n	8005bbc <_dtoa_r+0x90c>
 8005b44:	e05d      	b.n	8005c02 <_dtoa_r+0x952>
 8005b46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b48:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005b4c:	e746      	b.n	80059dc <_dtoa_r+0x72c>
 8005b4e:	9b07      	ldr	r3, [sp, #28]
 8005b50:	1e5c      	subs	r4, r3, #1
 8005b52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	bfbf      	itttt	lt
 8005b58:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005b5a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005b5c:	1ae3      	sublt	r3, r4, r3
 8005b5e:	18d2      	addlt	r2, r2, r3
 8005b60:	bfa8      	it	ge
 8005b62:	1b1c      	subge	r4, r3, r4
 8005b64:	9b07      	ldr	r3, [sp, #28]
 8005b66:	bfbe      	ittt	lt
 8005b68:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005b6a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005b6c:	2400      	movlt	r4, #0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bfb5      	itete	lt
 8005b72:	eba8 0603 	sublt.w	r6, r8, r3
 8005b76:	4646      	movge	r6, r8
 8005b78:	2300      	movlt	r3, #0
 8005b7a:	9b07      	ldrge	r3, [sp, #28]
 8005b7c:	e730      	b.n	80059e0 <_dtoa_r+0x730>
 8005b7e:	4646      	mov	r6, r8
 8005b80:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b82:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005b84:	e735      	b.n	80059f2 <_dtoa_r+0x742>
 8005b86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b88:	e75c      	b.n	8005a44 <_dtoa_r+0x794>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e788      	b.n	8005aa0 <_dtoa_r+0x7f0>
 8005b8e:	9b02      	ldr	r3, [sp, #8]
 8005b90:	e786      	b.n	8005aa0 <_dtoa_r+0x7f0>
 8005b92:	2300      	movs	r3, #0
 8005b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b96:	e788      	b.n	8005aaa <_dtoa_r+0x7fa>
 8005b98:	d09f      	beq.n	8005ada <_dtoa_r+0x82a>
 8005b9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b9c:	331c      	adds	r3, #28
 8005b9e:	441a      	add	r2, r3
 8005ba0:	4498      	add	r8, r3
 8005ba2:	441e      	add	r6, r3
 8005ba4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ba6:	e798      	b.n	8005ada <_dtoa_r+0x82a>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	e7f6      	b.n	8005b9a <_dtoa_r+0x8ea>
 8005bac:	9b07      	ldr	r3, [sp, #28]
 8005bae:	9704      	str	r7, [sp, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dc20      	bgt.n	8005bf6 <_dtoa_r+0x946>
 8005bb4:	9308      	str	r3, [sp, #32]
 8005bb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	dd1e      	ble.n	8005bfa <_dtoa_r+0x94a>
 8005bbc:	9b08      	ldr	r3, [sp, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f47f aebc 	bne.w	800593c <_dtoa_r+0x68c>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	2205      	movs	r2, #5
 8005bc8:	4658      	mov	r0, fp
 8005bca:	f000 fa99 	bl	8006100 <__multadd>
 8005bce:	4601      	mov	r1, r0
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	4648      	mov	r0, r9
 8005bd4:	f000 fcf4 	bl	80065c0 <__mcmp>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f77f aeaf 	ble.w	800593c <_dtoa_r+0x68c>
 8005bde:	2331      	movs	r3, #49	@ 0x31
 8005be0:	4656      	mov	r6, sl
 8005be2:	f806 3b01 	strb.w	r3, [r6], #1
 8005be6:	9b04      	ldr	r3, [sp, #16]
 8005be8:	3301      	adds	r3, #1
 8005bea:	9304      	str	r3, [sp, #16]
 8005bec:	e6aa      	b.n	8005944 <_dtoa_r+0x694>
 8005bee:	9c07      	ldr	r4, [sp, #28]
 8005bf0:	9704      	str	r7, [sp, #16]
 8005bf2:	4625      	mov	r5, r4
 8005bf4:	e7f3      	b.n	8005bde <_dtoa_r+0x92e>
 8005bf6:	9b07      	ldr	r3, [sp, #28]
 8005bf8:	9308      	str	r3, [sp, #32]
 8005bfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8104 	beq.w	8005e0a <_dtoa_r+0xb5a>
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	dd05      	ble.n	8005c12 <_dtoa_r+0x962>
 8005c06:	4629      	mov	r1, r5
 8005c08:	4632      	mov	r2, r6
 8005c0a:	4658      	mov	r0, fp
 8005c0c:	f000 fc6c 	bl	80064e8 <__lshift>
 8005c10:	4605      	mov	r5, r0
 8005c12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d05a      	beq.n	8005cce <_dtoa_r+0xa1e>
 8005c18:	4658      	mov	r0, fp
 8005c1a:	6869      	ldr	r1, [r5, #4]
 8005c1c:	f000 fa0e 	bl	800603c <_Balloc>
 8005c20:	4606      	mov	r6, r0
 8005c22:	b928      	cbnz	r0, 8005c30 <_dtoa_r+0x980>
 8005c24:	4602      	mov	r2, r0
 8005c26:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005c2a:	4b83      	ldr	r3, [pc, #524]	@ (8005e38 <_dtoa_r+0xb88>)
 8005c2c:	f7ff bb54 	b.w	80052d8 <_dtoa_r+0x28>
 8005c30:	692a      	ldr	r2, [r5, #16]
 8005c32:	f105 010c 	add.w	r1, r5, #12
 8005c36:	3202      	adds	r2, #2
 8005c38:	0092      	lsls	r2, r2, #2
 8005c3a:	300c      	adds	r0, #12
 8005c3c:	f001 ff5e 	bl	8007afc <memcpy>
 8005c40:	2201      	movs	r2, #1
 8005c42:	4631      	mov	r1, r6
 8005c44:	4658      	mov	r0, fp
 8005c46:	f000 fc4f 	bl	80064e8 <__lshift>
 8005c4a:	462f      	mov	r7, r5
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	f10a 0301 	add.w	r3, sl, #1
 8005c52:	9307      	str	r3, [sp, #28]
 8005c54:	9b08      	ldr	r3, [sp, #32]
 8005c56:	4453      	add	r3, sl
 8005c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c5a:	9b02      	ldr	r3, [sp, #8]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c62:	9b07      	ldr	r3, [sp, #28]
 8005c64:	4621      	mov	r1, r4
 8005c66:	3b01      	subs	r3, #1
 8005c68:	4648      	mov	r0, r9
 8005c6a:	9302      	str	r3, [sp, #8]
 8005c6c:	f7ff fa98 	bl	80051a0 <quorem>
 8005c70:	4639      	mov	r1, r7
 8005c72:	9008      	str	r0, [sp, #32]
 8005c74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c78:	4648      	mov	r0, r9
 8005c7a:	f000 fca1 	bl	80065c0 <__mcmp>
 8005c7e:	462a      	mov	r2, r5
 8005c80:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c82:	4621      	mov	r1, r4
 8005c84:	4658      	mov	r0, fp
 8005c86:	f000 fcb7 	bl	80065f8 <__mdiff>
 8005c8a:	68c2      	ldr	r2, [r0, #12]
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	bb02      	cbnz	r2, 8005cd2 <_dtoa_r+0xa22>
 8005c90:	4601      	mov	r1, r0
 8005c92:	4648      	mov	r0, r9
 8005c94:	f000 fc94 	bl	80065c0 <__mcmp>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4658      	mov	r0, fp
 8005c9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ca0:	f000 fa0c 	bl	80060bc <_Bfree>
 8005ca4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ca6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ca8:	9e07      	ldr	r6, [sp, #28]
 8005caa:	ea43 0102 	orr.w	r1, r3, r2
 8005cae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cb0:	4319      	orrs	r1, r3
 8005cb2:	d110      	bne.n	8005cd6 <_dtoa_r+0xa26>
 8005cb4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005cb8:	d029      	beq.n	8005d0e <_dtoa_r+0xa5e>
 8005cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	dd02      	ble.n	8005cc6 <_dtoa_r+0xa16>
 8005cc0:	9b08      	ldr	r3, [sp, #32]
 8005cc2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005cc6:	9b02      	ldr	r3, [sp, #8]
 8005cc8:	f883 8000 	strb.w	r8, [r3]
 8005ccc:	e63b      	b.n	8005946 <_dtoa_r+0x696>
 8005cce:	4628      	mov	r0, r5
 8005cd0:	e7bb      	b.n	8005c4a <_dtoa_r+0x99a>
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	e7e1      	b.n	8005c9a <_dtoa_r+0x9ea>
 8005cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	db04      	blt.n	8005ce6 <_dtoa_r+0xa36>
 8005cdc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	d120      	bne.n	8005d28 <_dtoa_r+0xa78>
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	dded      	ble.n	8005cc6 <_dtoa_r+0xa16>
 8005cea:	4649      	mov	r1, r9
 8005cec:	2201      	movs	r2, #1
 8005cee:	4658      	mov	r0, fp
 8005cf0:	f000 fbfa 	bl	80064e8 <__lshift>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4681      	mov	r9, r0
 8005cf8:	f000 fc62 	bl	80065c0 <__mcmp>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	dc03      	bgt.n	8005d08 <_dtoa_r+0xa58>
 8005d00:	d1e1      	bne.n	8005cc6 <_dtoa_r+0xa16>
 8005d02:	f018 0f01 	tst.w	r8, #1
 8005d06:	d0de      	beq.n	8005cc6 <_dtoa_r+0xa16>
 8005d08:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d0c:	d1d8      	bne.n	8005cc0 <_dtoa_r+0xa10>
 8005d0e:	2339      	movs	r3, #57	@ 0x39
 8005d10:	9a02      	ldr	r2, [sp, #8]
 8005d12:	7013      	strb	r3, [r2, #0]
 8005d14:	4633      	mov	r3, r6
 8005d16:	461e      	mov	r6, r3
 8005d18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	2a39      	cmp	r2, #57	@ 0x39
 8005d20:	d052      	beq.n	8005dc8 <_dtoa_r+0xb18>
 8005d22:	3201      	adds	r2, #1
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	e60e      	b.n	8005946 <_dtoa_r+0x696>
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	dd07      	ble.n	8005d3c <_dtoa_r+0xa8c>
 8005d2c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d30:	d0ed      	beq.n	8005d0e <_dtoa_r+0xa5e>
 8005d32:	9a02      	ldr	r2, [sp, #8]
 8005d34:	f108 0301 	add.w	r3, r8, #1
 8005d38:	7013      	strb	r3, [r2, #0]
 8005d3a:	e604      	b.n	8005946 <_dtoa_r+0x696>
 8005d3c:	9b07      	ldr	r3, [sp, #28]
 8005d3e:	9a07      	ldr	r2, [sp, #28]
 8005d40:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005d44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d028      	beq.n	8005d9c <_dtoa_r+0xaec>
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	220a      	movs	r2, #10
 8005d50:	4658      	mov	r0, fp
 8005d52:	f000 f9d5 	bl	8006100 <__multadd>
 8005d56:	42af      	cmp	r7, r5
 8005d58:	4681      	mov	r9, r0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	f04f 020a 	mov.w	r2, #10
 8005d62:	4639      	mov	r1, r7
 8005d64:	4658      	mov	r0, fp
 8005d66:	d107      	bne.n	8005d78 <_dtoa_r+0xac8>
 8005d68:	f000 f9ca 	bl	8006100 <__multadd>
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	4605      	mov	r5, r0
 8005d70:	9b07      	ldr	r3, [sp, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	9307      	str	r3, [sp, #28]
 8005d76:	e774      	b.n	8005c62 <_dtoa_r+0x9b2>
 8005d78:	f000 f9c2 	bl	8006100 <__multadd>
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4607      	mov	r7, r0
 8005d80:	2300      	movs	r3, #0
 8005d82:	220a      	movs	r2, #10
 8005d84:	4658      	mov	r0, fp
 8005d86:	f000 f9bb 	bl	8006100 <__multadd>
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	e7f0      	b.n	8005d70 <_dtoa_r+0xac0>
 8005d8e:	9b08      	ldr	r3, [sp, #32]
 8005d90:	2700      	movs	r7, #0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bfcc      	ite	gt
 8005d96:	461e      	movgt	r6, r3
 8005d98:	2601      	movle	r6, #1
 8005d9a:	4456      	add	r6, sl
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4658      	mov	r0, fp
 8005da2:	f000 fba1 	bl	80064e8 <__lshift>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4681      	mov	r9, r0
 8005daa:	f000 fc09 	bl	80065c0 <__mcmp>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	dcb0      	bgt.n	8005d14 <_dtoa_r+0xa64>
 8005db2:	d102      	bne.n	8005dba <_dtoa_r+0xb0a>
 8005db4:	f018 0f01 	tst.w	r8, #1
 8005db8:	d1ac      	bne.n	8005d14 <_dtoa_r+0xa64>
 8005dba:	4633      	mov	r3, r6
 8005dbc:	461e      	mov	r6, r3
 8005dbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dc2:	2a30      	cmp	r2, #48	@ 0x30
 8005dc4:	d0fa      	beq.n	8005dbc <_dtoa_r+0xb0c>
 8005dc6:	e5be      	b.n	8005946 <_dtoa_r+0x696>
 8005dc8:	459a      	cmp	sl, r3
 8005dca:	d1a4      	bne.n	8005d16 <_dtoa_r+0xa66>
 8005dcc:	9b04      	ldr	r3, [sp, #16]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	9304      	str	r3, [sp, #16]
 8005dd2:	2331      	movs	r3, #49	@ 0x31
 8005dd4:	f88a 3000 	strb.w	r3, [sl]
 8005dd8:	e5b5      	b.n	8005946 <_dtoa_r+0x696>
 8005dda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ddc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005e3c <_dtoa_r+0xb8c>
 8005de0:	b11b      	cbz	r3, 8005dea <_dtoa_r+0xb3a>
 8005de2:	f10a 0308 	add.w	r3, sl, #8
 8005de6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	4650      	mov	r0, sl
 8005dec:	b017      	add	sp, #92	@ 0x5c
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	f77f ae3d 	ble.w	8005a74 <_dtoa_r+0x7c4>
 8005dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dfc:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dfe:	2001      	movs	r0, #1
 8005e00:	e65b      	b.n	8005aba <_dtoa_r+0x80a>
 8005e02:	9b08      	ldr	r3, [sp, #32]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f77f aed6 	ble.w	8005bb6 <_dtoa_r+0x906>
 8005e0a:	4656      	mov	r6, sl
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4648      	mov	r0, r9
 8005e10:	f7ff f9c6 	bl	80051a0 <quorem>
 8005e14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e18:	9b08      	ldr	r3, [sp, #32]
 8005e1a:	f806 8b01 	strb.w	r8, [r6], #1
 8005e1e:	eba6 020a 	sub.w	r2, r6, sl
 8005e22:	4293      	cmp	r3, r2
 8005e24:	ddb3      	ble.n	8005d8e <_dtoa_r+0xade>
 8005e26:	4649      	mov	r1, r9
 8005e28:	2300      	movs	r3, #0
 8005e2a:	220a      	movs	r2, #10
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	f000 f967 	bl	8006100 <__multadd>
 8005e32:	4681      	mov	r9, r0
 8005e34:	e7ea      	b.n	8005e0c <_dtoa_r+0xb5c>
 8005e36:	bf00      	nop
 8005e38:	0800894b 	.word	0x0800894b
 8005e3c:	080088cf 	.word	0x080088cf

08005e40 <_free_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4605      	mov	r5, r0
 8005e44:	2900      	cmp	r1, #0
 8005e46:	d040      	beq.n	8005eca <_free_r+0x8a>
 8005e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4c:	1f0c      	subs	r4, r1, #4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	bfb8      	it	lt
 8005e52:	18e4      	addlt	r4, r4, r3
 8005e54:	f000 f8e6 	bl	8006024 <__malloc_lock>
 8005e58:	4a1c      	ldr	r2, [pc, #112]	@ (8005ecc <_free_r+0x8c>)
 8005e5a:	6813      	ldr	r3, [r2, #0]
 8005e5c:	b933      	cbnz	r3, 8005e6c <_free_r+0x2c>
 8005e5e:	6063      	str	r3, [r4, #4]
 8005e60:	6014      	str	r4, [r2, #0]
 8005e62:	4628      	mov	r0, r5
 8005e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e68:	f000 b8e2 	b.w	8006030 <__malloc_unlock>
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	d908      	bls.n	8005e82 <_free_r+0x42>
 8005e70:	6820      	ldr	r0, [r4, #0]
 8005e72:	1821      	adds	r1, r4, r0
 8005e74:	428b      	cmp	r3, r1
 8005e76:	bf01      	itttt	eq
 8005e78:	6819      	ldreq	r1, [r3, #0]
 8005e7a:	685b      	ldreq	r3, [r3, #4]
 8005e7c:	1809      	addeq	r1, r1, r0
 8005e7e:	6021      	streq	r1, [r4, #0]
 8005e80:	e7ed      	b.n	8005e5e <_free_r+0x1e>
 8005e82:	461a      	mov	r2, r3
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	b10b      	cbz	r3, 8005e8c <_free_r+0x4c>
 8005e88:	42a3      	cmp	r3, r4
 8005e8a:	d9fa      	bls.n	8005e82 <_free_r+0x42>
 8005e8c:	6811      	ldr	r1, [r2, #0]
 8005e8e:	1850      	adds	r0, r2, r1
 8005e90:	42a0      	cmp	r0, r4
 8005e92:	d10b      	bne.n	8005eac <_free_r+0x6c>
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	4401      	add	r1, r0
 8005e98:	1850      	adds	r0, r2, r1
 8005e9a:	4283      	cmp	r3, r0
 8005e9c:	6011      	str	r1, [r2, #0]
 8005e9e:	d1e0      	bne.n	8005e62 <_free_r+0x22>
 8005ea0:	6818      	ldr	r0, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4408      	add	r0, r1
 8005ea6:	6010      	str	r0, [r2, #0]
 8005ea8:	6053      	str	r3, [r2, #4]
 8005eaa:	e7da      	b.n	8005e62 <_free_r+0x22>
 8005eac:	d902      	bls.n	8005eb4 <_free_r+0x74>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	e7d6      	b.n	8005e62 <_free_r+0x22>
 8005eb4:	6820      	ldr	r0, [r4, #0]
 8005eb6:	1821      	adds	r1, r4, r0
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	bf01      	itttt	eq
 8005ebc:	6819      	ldreq	r1, [r3, #0]
 8005ebe:	685b      	ldreq	r3, [r3, #4]
 8005ec0:	1809      	addeq	r1, r1, r0
 8005ec2:	6021      	streq	r1, [r4, #0]
 8005ec4:	6063      	str	r3, [r4, #4]
 8005ec6:	6054      	str	r4, [r2, #4]
 8005ec8:	e7cb      	b.n	8005e62 <_free_r+0x22>
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	2000042c 	.word	0x2000042c

08005ed0 <malloc>:
 8005ed0:	4b02      	ldr	r3, [pc, #8]	@ (8005edc <malloc+0xc>)
 8005ed2:	4601      	mov	r1, r0
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f000 b825 	b.w	8005f24 <_malloc_r>
 8005eda:	bf00      	nop
 8005edc:	2000001c 	.word	0x2000001c

08005ee0 <sbrk_aligned>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4e0f      	ldr	r6, [pc, #60]	@ (8005f20 <sbrk_aligned+0x40>)
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	6831      	ldr	r1, [r6, #0]
 8005ee8:	4605      	mov	r5, r0
 8005eea:	b911      	cbnz	r1, 8005ef2 <sbrk_aligned+0x12>
 8005eec:	f001 fdf6 	bl	8007adc <_sbrk_r>
 8005ef0:	6030      	str	r0, [r6, #0]
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f001 fdf1 	bl	8007adc <_sbrk_r>
 8005efa:	1c43      	adds	r3, r0, #1
 8005efc:	d103      	bne.n	8005f06 <sbrk_aligned+0x26>
 8005efe:	f04f 34ff 	mov.w	r4, #4294967295
 8005f02:	4620      	mov	r0, r4
 8005f04:	bd70      	pop	{r4, r5, r6, pc}
 8005f06:	1cc4      	adds	r4, r0, #3
 8005f08:	f024 0403 	bic.w	r4, r4, #3
 8005f0c:	42a0      	cmp	r0, r4
 8005f0e:	d0f8      	beq.n	8005f02 <sbrk_aligned+0x22>
 8005f10:	1a21      	subs	r1, r4, r0
 8005f12:	4628      	mov	r0, r5
 8005f14:	f001 fde2 	bl	8007adc <_sbrk_r>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d1f2      	bne.n	8005f02 <sbrk_aligned+0x22>
 8005f1c:	e7ef      	b.n	8005efe <sbrk_aligned+0x1e>
 8005f1e:	bf00      	nop
 8005f20:	20000428 	.word	0x20000428

08005f24 <_malloc_r>:
 8005f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f28:	1ccd      	adds	r5, r1, #3
 8005f2a:	f025 0503 	bic.w	r5, r5, #3
 8005f2e:	3508      	adds	r5, #8
 8005f30:	2d0c      	cmp	r5, #12
 8005f32:	bf38      	it	cc
 8005f34:	250c      	movcc	r5, #12
 8005f36:	2d00      	cmp	r5, #0
 8005f38:	4606      	mov	r6, r0
 8005f3a:	db01      	blt.n	8005f40 <_malloc_r+0x1c>
 8005f3c:	42a9      	cmp	r1, r5
 8005f3e:	d904      	bls.n	8005f4a <_malloc_r+0x26>
 8005f40:	230c      	movs	r3, #12
 8005f42:	6033      	str	r3, [r6, #0]
 8005f44:	2000      	movs	r0, #0
 8005f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006020 <_malloc_r+0xfc>
 8005f4e:	f000 f869 	bl	8006024 <__malloc_lock>
 8005f52:	f8d8 3000 	ldr.w	r3, [r8]
 8005f56:	461c      	mov	r4, r3
 8005f58:	bb44      	cbnz	r4, 8005fac <_malloc_r+0x88>
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f7ff ffbf 	bl	8005ee0 <sbrk_aligned>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	4604      	mov	r4, r0
 8005f66:	d158      	bne.n	800601a <_malloc_r+0xf6>
 8005f68:	f8d8 4000 	ldr.w	r4, [r8]
 8005f6c:	4627      	mov	r7, r4
 8005f6e:	2f00      	cmp	r7, #0
 8005f70:	d143      	bne.n	8005ffa <_malloc_r+0xd6>
 8005f72:	2c00      	cmp	r4, #0
 8005f74:	d04b      	beq.n	800600e <_malloc_r+0xea>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	4639      	mov	r1, r7
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	eb04 0903 	add.w	r9, r4, r3
 8005f80:	f001 fdac 	bl	8007adc <_sbrk_r>
 8005f84:	4581      	cmp	r9, r0
 8005f86:	d142      	bne.n	800600e <_malloc_r+0xea>
 8005f88:	6821      	ldr	r1, [r4, #0]
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	1a6d      	subs	r5, r5, r1
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7ff ffa6 	bl	8005ee0 <sbrk_aligned>
 8005f94:	3001      	adds	r0, #1
 8005f96:	d03a      	beq.n	800600e <_malloc_r+0xea>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	442b      	add	r3, r5
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	bb62      	cbnz	r2, 8006000 <_malloc_r+0xdc>
 8005fa6:	f8c8 7000 	str.w	r7, [r8]
 8005faa:	e00f      	b.n	8005fcc <_malloc_r+0xa8>
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	1b52      	subs	r2, r2, r5
 8005fb0:	d420      	bmi.n	8005ff4 <_malloc_r+0xd0>
 8005fb2:	2a0b      	cmp	r2, #11
 8005fb4:	d917      	bls.n	8005fe6 <_malloc_r+0xc2>
 8005fb6:	1961      	adds	r1, r4, r5
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	6025      	str	r5, [r4, #0]
 8005fbc:	bf18      	it	ne
 8005fbe:	6059      	strne	r1, [r3, #4]
 8005fc0:	6863      	ldr	r3, [r4, #4]
 8005fc2:	bf08      	it	eq
 8005fc4:	f8c8 1000 	streq.w	r1, [r8]
 8005fc8:	5162      	str	r2, [r4, r5]
 8005fca:	604b      	str	r3, [r1, #4]
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 f82f 	bl	8006030 <__malloc_unlock>
 8005fd2:	f104 000b 	add.w	r0, r4, #11
 8005fd6:	1d23      	adds	r3, r4, #4
 8005fd8:	f020 0007 	bic.w	r0, r0, #7
 8005fdc:	1ac2      	subs	r2, r0, r3
 8005fde:	bf1c      	itt	ne
 8005fe0:	1a1b      	subne	r3, r3, r0
 8005fe2:	50a3      	strne	r3, [r4, r2]
 8005fe4:	e7af      	b.n	8005f46 <_malloc_r+0x22>
 8005fe6:	6862      	ldr	r2, [r4, #4]
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	bf0c      	ite	eq
 8005fec:	f8c8 2000 	streq.w	r2, [r8]
 8005ff0:	605a      	strne	r2, [r3, #4]
 8005ff2:	e7eb      	b.n	8005fcc <_malloc_r+0xa8>
 8005ff4:	4623      	mov	r3, r4
 8005ff6:	6864      	ldr	r4, [r4, #4]
 8005ff8:	e7ae      	b.n	8005f58 <_malloc_r+0x34>
 8005ffa:	463c      	mov	r4, r7
 8005ffc:	687f      	ldr	r7, [r7, #4]
 8005ffe:	e7b6      	b.n	8005f6e <_malloc_r+0x4a>
 8006000:	461a      	mov	r2, r3
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	42a3      	cmp	r3, r4
 8006006:	d1fb      	bne.n	8006000 <_malloc_r+0xdc>
 8006008:	2300      	movs	r3, #0
 800600a:	6053      	str	r3, [r2, #4]
 800600c:	e7de      	b.n	8005fcc <_malloc_r+0xa8>
 800600e:	230c      	movs	r3, #12
 8006010:	4630      	mov	r0, r6
 8006012:	6033      	str	r3, [r6, #0]
 8006014:	f000 f80c 	bl	8006030 <__malloc_unlock>
 8006018:	e794      	b.n	8005f44 <_malloc_r+0x20>
 800601a:	6005      	str	r5, [r0, #0]
 800601c:	e7d6      	b.n	8005fcc <_malloc_r+0xa8>
 800601e:	bf00      	nop
 8006020:	2000042c 	.word	0x2000042c

08006024 <__malloc_lock>:
 8006024:	4801      	ldr	r0, [pc, #4]	@ (800602c <__malloc_lock+0x8>)
 8006026:	f7ff b8a6 	b.w	8005176 <__retarget_lock_acquire_recursive>
 800602a:	bf00      	nop
 800602c:	20000424 	.word	0x20000424

08006030 <__malloc_unlock>:
 8006030:	4801      	ldr	r0, [pc, #4]	@ (8006038 <__malloc_unlock+0x8>)
 8006032:	f7ff b8a1 	b.w	8005178 <__retarget_lock_release_recursive>
 8006036:	bf00      	nop
 8006038:	20000424 	.word	0x20000424

0800603c <_Balloc>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	69c6      	ldr	r6, [r0, #28]
 8006040:	4604      	mov	r4, r0
 8006042:	460d      	mov	r5, r1
 8006044:	b976      	cbnz	r6, 8006064 <_Balloc+0x28>
 8006046:	2010      	movs	r0, #16
 8006048:	f7ff ff42 	bl	8005ed0 <malloc>
 800604c:	4602      	mov	r2, r0
 800604e:	61e0      	str	r0, [r4, #28]
 8006050:	b920      	cbnz	r0, 800605c <_Balloc+0x20>
 8006052:	216b      	movs	r1, #107	@ 0x6b
 8006054:	4b17      	ldr	r3, [pc, #92]	@ (80060b4 <_Balloc+0x78>)
 8006056:	4818      	ldr	r0, [pc, #96]	@ (80060b8 <_Balloc+0x7c>)
 8006058:	f001 fd64 	bl	8007b24 <__assert_func>
 800605c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006060:	6006      	str	r6, [r0, #0]
 8006062:	60c6      	str	r6, [r0, #12]
 8006064:	69e6      	ldr	r6, [r4, #28]
 8006066:	68f3      	ldr	r3, [r6, #12]
 8006068:	b183      	cbz	r3, 800608c <_Balloc+0x50>
 800606a:	69e3      	ldr	r3, [r4, #28]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006072:	b9b8      	cbnz	r0, 80060a4 <_Balloc+0x68>
 8006074:	2101      	movs	r1, #1
 8006076:	fa01 f605 	lsl.w	r6, r1, r5
 800607a:	1d72      	adds	r2, r6, #5
 800607c:	4620      	mov	r0, r4
 800607e:	0092      	lsls	r2, r2, #2
 8006080:	f001 fd6e 	bl	8007b60 <_calloc_r>
 8006084:	b160      	cbz	r0, 80060a0 <_Balloc+0x64>
 8006086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800608a:	e00e      	b.n	80060aa <_Balloc+0x6e>
 800608c:	2221      	movs	r2, #33	@ 0x21
 800608e:	2104      	movs	r1, #4
 8006090:	4620      	mov	r0, r4
 8006092:	f001 fd65 	bl	8007b60 <_calloc_r>
 8006096:	69e3      	ldr	r3, [r4, #28]
 8006098:	60f0      	str	r0, [r6, #12]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e4      	bne.n	800606a <_Balloc+0x2e>
 80060a0:	2000      	movs	r0, #0
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	6802      	ldr	r2, [r0, #0]
 80060a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060aa:	2300      	movs	r3, #0
 80060ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060b0:	e7f7      	b.n	80060a2 <_Balloc+0x66>
 80060b2:	bf00      	nop
 80060b4:	080088dc 	.word	0x080088dc
 80060b8:	0800895c 	.word	0x0800895c

080060bc <_Bfree>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	69c6      	ldr	r6, [r0, #28]
 80060c0:	4605      	mov	r5, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	b976      	cbnz	r6, 80060e4 <_Bfree+0x28>
 80060c6:	2010      	movs	r0, #16
 80060c8:	f7ff ff02 	bl	8005ed0 <malloc>
 80060cc:	4602      	mov	r2, r0
 80060ce:	61e8      	str	r0, [r5, #28]
 80060d0:	b920      	cbnz	r0, 80060dc <_Bfree+0x20>
 80060d2:	218f      	movs	r1, #143	@ 0x8f
 80060d4:	4b08      	ldr	r3, [pc, #32]	@ (80060f8 <_Bfree+0x3c>)
 80060d6:	4809      	ldr	r0, [pc, #36]	@ (80060fc <_Bfree+0x40>)
 80060d8:	f001 fd24 	bl	8007b24 <__assert_func>
 80060dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060e0:	6006      	str	r6, [r0, #0]
 80060e2:	60c6      	str	r6, [r0, #12]
 80060e4:	b13c      	cbz	r4, 80060f6 <_Bfree+0x3a>
 80060e6:	69eb      	ldr	r3, [r5, #28]
 80060e8:	6862      	ldr	r2, [r4, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060f0:	6021      	str	r1, [r4, #0]
 80060f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	080088dc 	.word	0x080088dc
 80060fc:	0800895c 	.word	0x0800895c

08006100 <__multadd>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	4607      	mov	r7, r0
 8006106:	460c      	mov	r4, r1
 8006108:	461e      	mov	r6, r3
 800610a:	2000      	movs	r0, #0
 800610c:	690d      	ldr	r5, [r1, #16]
 800610e:	f101 0c14 	add.w	ip, r1, #20
 8006112:	f8dc 3000 	ldr.w	r3, [ip]
 8006116:	3001      	adds	r0, #1
 8006118:	b299      	uxth	r1, r3
 800611a:	fb02 6101 	mla	r1, r2, r1, r6
 800611e:	0c1e      	lsrs	r6, r3, #16
 8006120:	0c0b      	lsrs	r3, r1, #16
 8006122:	fb02 3306 	mla	r3, r2, r6, r3
 8006126:	b289      	uxth	r1, r1
 8006128:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800612c:	4285      	cmp	r5, r0
 800612e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006132:	f84c 1b04 	str.w	r1, [ip], #4
 8006136:	dcec      	bgt.n	8006112 <__multadd+0x12>
 8006138:	b30e      	cbz	r6, 800617e <__multadd+0x7e>
 800613a:	68a3      	ldr	r3, [r4, #8]
 800613c:	42ab      	cmp	r3, r5
 800613e:	dc19      	bgt.n	8006174 <__multadd+0x74>
 8006140:	6861      	ldr	r1, [r4, #4]
 8006142:	4638      	mov	r0, r7
 8006144:	3101      	adds	r1, #1
 8006146:	f7ff ff79 	bl	800603c <_Balloc>
 800614a:	4680      	mov	r8, r0
 800614c:	b928      	cbnz	r0, 800615a <__multadd+0x5a>
 800614e:	4602      	mov	r2, r0
 8006150:	21ba      	movs	r1, #186	@ 0xba
 8006152:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <__multadd+0x84>)
 8006154:	480c      	ldr	r0, [pc, #48]	@ (8006188 <__multadd+0x88>)
 8006156:	f001 fce5 	bl	8007b24 <__assert_func>
 800615a:	6922      	ldr	r2, [r4, #16]
 800615c:	f104 010c 	add.w	r1, r4, #12
 8006160:	3202      	adds	r2, #2
 8006162:	0092      	lsls	r2, r2, #2
 8006164:	300c      	adds	r0, #12
 8006166:	f001 fcc9 	bl	8007afc <memcpy>
 800616a:	4621      	mov	r1, r4
 800616c:	4638      	mov	r0, r7
 800616e:	f7ff ffa5 	bl	80060bc <_Bfree>
 8006172:	4644      	mov	r4, r8
 8006174:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006178:	3501      	adds	r5, #1
 800617a:	615e      	str	r6, [r3, #20]
 800617c:	6125      	str	r5, [r4, #16]
 800617e:	4620      	mov	r0, r4
 8006180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006184:	0800894b 	.word	0x0800894b
 8006188:	0800895c 	.word	0x0800895c

0800618c <__s2b>:
 800618c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006190:	4615      	mov	r5, r2
 8006192:	2209      	movs	r2, #9
 8006194:	461f      	mov	r7, r3
 8006196:	3308      	adds	r3, #8
 8006198:	460c      	mov	r4, r1
 800619a:	fb93 f3f2 	sdiv	r3, r3, r2
 800619e:	4606      	mov	r6, r0
 80061a0:	2201      	movs	r2, #1
 80061a2:	2100      	movs	r1, #0
 80061a4:	429a      	cmp	r2, r3
 80061a6:	db09      	blt.n	80061bc <__s2b+0x30>
 80061a8:	4630      	mov	r0, r6
 80061aa:	f7ff ff47 	bl	800603c <_Balloc>
 80061ae:	b940      	cbnz	r0, 80061c2 <__s2b+0x36>
 80061b0:	4602      	mov	r2, r0
 80061b2:	21d3      	movs	r1, #211	@ 0xd3
 80061b4:	4b18      	ldr	r3, [pc, #96]	@ (8006218 <__s2b+0x8c>)
 80061b6:	4819      	ldr	r0, [pc, #100]	@ (800621c <__s2b+0x90>)
 80061b8:	f001 fcb4 	bl	8007b24 <__assert_func>
 80061bc:	0052      	lsls	r2, r2, #1
 80061be:	3101      	adds	r1, #1
 80061c0:	e7f0      	b.n	80061a4 <__s2b+0x18>
 80061c2:	9b08      	ldr	r3, [sp, #32]
 80061c4:	2d09      	cmp	r5, #9
 80061c6:	6143      	str	r3, [r0, #20]
 80061c8:	f04f 0301 	mov.w	r3, #1
 80061cc:	6103      	str	r3, [r0, #16]
 80061ce:	dd16      	ble.n	80061fe <__s2b+0x72>
 80061d0:	f104 0909 	add.w	r9, r4, #9
 80061d4:	46c8      	mov	r8, r9
 80061d6:	442c      	add	r4, r5
 80061d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80061dc:	4601      	mov	r1, r0
 80061de:	220a      	movs	r2, #10
 80061e0:	4630      	mov	r0, r6
 80061e2:	3b30      	subs	r3, #48	@ 0x30
 80061e4:	f7ff ff8c 	bl	8006100 <__multadd>
 80061e8:	45a0      	cmp	r8, r4
 80061ea:	d1f5      	bne.n	80061d8 <__s2b+0x4c>
 80061ec:	f1a5 0408 	sub.w	r4, r5, #8
 80061f0:	444c      	add	r4, r9
 80061f2:	1b2d      	subs	r5, r5, r4
 80061f4:	1963      	adds	r3, r4, r5
 80061f6:	42bb      	cmp	r3, r7
 80061f8:	db04      	blt.n	8006204 <__s2b+0x78>
 80061fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fe:	2509      	movs	r5, #9
 8006200:	340a      	adds	r4, #10
 8006202:	e7f6      	b.n	80061f2 <__s2b+0x66>
 8006204:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006208:	4601      	mov	r1, r0
 800620a:	220a      	movs	r2, #10
 800620c:	4630      	mov	r0, r6
 800620e:	3b30      	subs	r3, #48	@ 0x30
 8006210:	f7ff ff76 	bl	8006100 <__multadd>
 8006214:	e7ee      	b.n	80061f4 <__s2b+0x68>
 8006216:	bf00      	nop
 8006218:	0800894b 	.word	0x0800894b
 800621c:	0800895c 	.word	0x0800895c

08006220 <__hi0bits>:
 8006220:	4603      	mov	r3, r0
 8006222:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006226:	bf3a      	itte	cc
 8006228:	0403      	lslcc	r3, r0, #16
 800622a:	2010      	movcc	r0, #16
 800622c:	2000      	movcs	r0, #0
 800622e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006232:	bf3c      	itt	cc
 8006234:	021b      	lslcc	r3, r3, #8
 8006236:	3008      	addcc	r0, #8
 8006238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800623c:	bf3c      	itt	cc
 800623e:	011b      	lslcc	r3, r3, #4
 8006240:	3004      	addcc	r0, #4
 8006242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006246:	bf3c      	itt	cc
 8006248:	009b      	lslcc	r3, r3, #2
 800624a:	3002      	addcc	r0, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	db05      	blt.n	800625c <__hi0bits+0x3c>
 8006250:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006254:	f100 0001 	add.w	r0, r0, #1
 8006258:	bf08      	it	eq
 800625a:	2020      	moveq	r0, #32
 800625c:	4770      	bx	lr

0800625e <__lo0bits>:
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	4602      	mov	r2, r0
 8006262:	f013 0007 	ands.w	r0, r3, #7
 8006266:	d00b      	beq.n	8006280 <__lo0bits+0x22>
 8006268:	07d9      	lsls	r1, r3, #31
 800626a:	d421      	bmi.n	80062b0 <__lo0bits+0x52>
 800626c:	0798      	lsls	r0, r3, #30
 800626e:	bf49      	itett	mi
 8006270:	085b      	lsrmi	r3, r3, #1
 8006272:	089b      	lsrpl	r3, r3, #2
 8006274:	2001      	movmi	r0, #1
 8006276:	6013      	strmi	r3, [r2, #0]
 8006278:	bf5c      	itt	pl
 800627a:	2002      	movpl	r0, #2
 800627c:	6013      	strpl	r3, [r2, #0]
 800627e:	4770      	bx	lr
 8006280:	b299      	uxth	r1, r3
 8006282:	b909      	cbnz	r1, 8006288 <__lo0bits+0x2a>
 8006284:	2010      	movs	r0, #16
 8006286:	0c1b      	lsrs	r3, r3, #16
 8006288:	b2d9      	uxtb	r1, r3
 800628a:	b909      	cbnz	r1, 8006290 <__lo0bits+0x32>
 800628c:	3008      	adds	r0, #8
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	0719      	lsls	r1, r3, #28
 8006292:	bf04      	itt	eq
 8006294:	091b      	lsreq	r3, r3, #4
 8006296:	3004      	addeq	r0, #4
 8006298:	0799      	lsls	r1, r3, #30
 800629a:	bf04      	itt	eq
 800629c:	089b      	lsreq	r3, r3, #2
 800629e:	3002      	addeq	r0, #2
 80062a0:	07d9      	lsls	r1, r3, #31
 80062a2:	d403      	bmi.n	80062ac <__lo0bits+0x4e>
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	f100 0001 	add.w	r0, r0, #1
 80062aa:	d003      	beq.n	80062b4 <__lo0bits+0x56>
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	4770      	bx	lr
 80062b0:	2000      	movs	r0, #0
 80062b2:	4770      	bx	lr
 80062b4:	2020      	movs	r0, #32
 80062b6:	4770      	bx	lr

080062b8 <__i2b>:
 80062b8:	b510      	push	{r4, lr}
 80062ba:	460c      	mov	r4, r1
 80062bc:	2101      	movs	r1, #1
 80062be:	f7ff febd 	bl	800603c <_Balloc>
 80062c2:	4602      	mov	r2, r0
 80062c4:	b928      	cbnz	r0, 80062d2 <__i2b+0x1a>
 80062c6:	f240 1145 	movw	r1, #325	@ 0x145
 80062ca:	4b04      	ldr	r3, [pc, #16]	@ (80062dc <__i2b+0x24>)
 80062cc:	4804      	ldr	r0, [pc, #16]	@ (80062e0 <__i2b+0x28>)
 80062ce:	f001 fc29 	bl	8007b24 <__assert_func>
 80062d2:	2301      	movs	r3, #1
 80062d4:	6144      	str	r4, [r0, #20]
 80062d6:	6103      	str	r3, [r0, #16]
 80062d8:	bd10      	pop	{r4, pc}
 80062da:	bf00      	nop
 80062dc:	0800894b 	.word	0x0800894b
 80062e0:	0800895c 	.word	0x0800895c

080062e4 <__multiply>:
 80062e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e8:	4614      	mov	r4, r2
 80062ea:	690a      	ldr	r2, [r1, #16]
 80062ec:	6923      	ldr	r3, [r4, #16]
 80062ee:	460f      	mov	r7, r1
 80062f0:	429a      	cmp	r2, r3
 80062f2:	bfa2      	ittt	ge
 80062f4:	4623      	movge	r3, r4
 80062f6:	460c      	movge	r4, r1
 80062f8:	461f      	movge	r7, r3
 80062fa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80062fe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006302:	68a3      	ldr	r3, [r4, #8]
 8006304:	6861      	ldr	r1, [r4, #4]
 8006306:	eb0a 0609 	add.w	r6, sl, r9
 800630a:	42b3      	cmp	r3, r6
 800630c:	b085      	sub	sp, #20
 800630e:	bfb8      	it	lt
 8006310:	3101      	addlt	r1, #1
 8006312:	f7ff fe93 	bl	800603c <_Balloc>
 8006316:	b930      	cbnz	r0, 8006326 <__multiply+0x42>
 8006318:	4602      	mov	r2, r0
 800631a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800631e:	4b43      	ldr	r3, [pc, #268]	@ (800642c <__multiply+0x148>)
 8006320:	4843      	ldr	r0, [pc, #268]	@ (8006430 <__multiply+0x14c>)
 8006322:	f001 fbff 	bl	8007b24 <__assert_func>
 8006326:	f100 0514 	add.w	r5, r0, #20
 800632a:	462b      	mov	r3, r5
 800632c:	2200      	movs	r2, #0
 800632e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006332:	4543      	cmp	r3, r8
 8006334:	d321      	bcc.n	800637a <__multiply+0x96>
 8006336:	f107 0114 	add.w	r1, r7, #20
 800633a:	f104 0214 	add.w	r2, r4, #20
 800633e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006342:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006346:	9302      	str	r3, [sp, #8]
 8006348:	1b13      	subs	r3, r2, r4
 800634a:	3b15      	subs	r3, #21
 800634c:	f023 0303 	bic.w	r3, r3, #3
 8006350:	3304      	adds	r3, #4
 8006352:	f104 0715 	add.w	r7, r4, #21
 8006356:	42ba      	cmp	r2, r7
 8006358:	bf38      	it	cc
 800635a:	2304      	movcc	r3, #4
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	9b02      	ldr	r3, [sp, #8]
 8006360:	9103      	str	r1, [sp, #12]
 8006362:	428b      	cmp	r3, r1
 8006364:	d80c      	bhi.n	8006380 <__multiply+0x9c>
 8006366:	2e00      	cmp	r6, #0
 8006368:	dd03      	ble.n	8006372 <__multiply+0x8e>
 800636a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800636e:	2b00      	cmp	r3, #0
 8006370:	d05a      	beq.n	8006428 <__multiply+0x144>
 8006372:	6106      	str	r6, [r0, #16]
 8006374:	b005      	add	sp, #20
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637a:	f843 2b04 	str.w	r2, [r3], #4
 800637e:	e7d8      	b.n	8006332 <__multiply+0x4e>
 8006380:	f8b1 a000 	ldrh.w	sl, [r1]
 8006384:	f1ba 0f00 	cmp.w	sl, #0
 8006388:	d023      	beq.n	80063d2 <__multiply+0xee>
 800638a:	46a9      	mov	r9, r5
 800638c:	f04f 0c00 	mov.w	ip, #0
 8006390:	f104 0e14 	add.w	lr, r4, #20
 8006394:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006398:	f8d9 3000 	ldr.w	r3, [r9]
 800639c:	fa1f fb87 	uxth.w	fp, r7
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	fb0a 330b 	mla	r3, sl, fp, r3
 80063a6:	4463      	add	r3, ip
 80063a8:	f8d9 c000 	ldr.w	ip, [r9]
 80063ac:	0c3f      	lsrs	r7, r7, #16
 80063ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80063b2:	fb0a c707 	mla	r7, sl, r7, ip
 80063b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80063c0:	4572      	cmp	r2, lr
 80063c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80063c6:	f849 3b04 	str.w	r3, [r9], #4
 80063ca:	d8e3      	bhi.n	8006394 <__multiply+0xb0>
 80063cc:	9b01      	ldr	r3, [sp, #4]
 80063ce:	f845 c003 	str.w	ip, [r5, r3]
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	3104      	adds	r1, #4
 80063d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80063da:	f1b9 0f00 	cmp.w	r9, #0
 80063de:	d021      	beq.n	8006424 <__multiply+0x140>
 80063e0:	46ae      	mov	lr, r5
 80063e2:	f04f 0a00 	mov.w	sl, #0
 80063e6:	682b      	ldr	r3, [r5, #0]
 80063e8:	f104 0c14 	add.w	ip, r4, #20
 80063ec:	f8bc b000 	ldrh.w	fp, [ip]
 80063f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	fb09 770b 	mla	r7, r9, fp, r7
 80063fa:	4457      	add	r7, sl
 80063fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006400:	f84e 3b04 	str.w	r3, [lr], #4
 8006404:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006408:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800640c:	f8be 3000 	ldrh.w	r3, [lr]
 8006410:	4562      	cmp	r2, ip
 8006412:	fb09 330a 	mla	r3, r9, sl, r3
 8006416:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800641a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800641e:	d8e5      	bhi.n	80063ec <__multiply+0x108>
 8006420:	9f01      	ldr	r7, [sp, #4]
 8006422:	51eb      	str	r3, [r5, r7]
 8006424:	3504      	adds	r5, #4
 8006426:	e79a      	b.n	800635e <__multiply+0x7a>
 8006428:	3e01      	subs	r6, #1
 800642a:	e79c      	b.n	8006366 <__multiply+0x82>
 800642c:	0800894b 	.word	0x0800894b
 8006430:	0800895c 	.word	0x0800895c

08006434 <__pow5mult>:
 8006434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006438:	4615      	mov	r5, r2
 800643a:	f012 0203 	ands.w	r2, r2, #3
 800643e:	4607      	mov	r7, r0
 8006440:	460e      	mov	r6, r1
 8006442:	d007      	beq.n	8006454 <__pow5mult+0x20>
 8006444:	4c25      	ldr	r4, [pc, #148]	@ (80064dc <__pow5mult+0xa8>)
 8006446:	3a01      	subs	r2, #1
 8006448:	2300      	movs	r3, #0
 800644a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800644e:	f7ff fe57 	bl	8006100 <__multadd>
 8006452:	4606      	mov	r6, r0
 8006454:	10ad      	asrs	r5, r5, #2
 8006456:	d03d      	beq.n	80064d4 <__pow5mult+0xa0>
 8006458:	69fc      	ldr	r4, [r7, #28]
 800645a:	b97c      	cbnz	r4, 800647c <__pow5mult+0x48>
 800645c:	2010      	movs	r0, #16
 800645e:	f7ff fd37 	bl	8005ed0 <malloc>
 8006462:	4602      	mov	r2, r0
 8006464:	61f8      	str	r0, [r7, #28]
 8006466:	b928      	cbnz	r0, 8006474 <__pow5mult+0x40>
 8006468:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800646c:	4b1c      	ldr	r3, [pc, #112]	@ (80064e0 <__pow5mult+0xac>)
 800646e:	481d      	ldr	r0, [pc, #116]	@ (80064e4 <__pow5mult+0xb0>)
 8006470:	f001 fb58 	bl	8007b24 <__assert_func>
 8006474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006478:	6004      	str	r4, [r0, #0]
 800647a:	60c4      	str	r4, [r0, #12]
 800647c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006484:	b94c      	cbnz	r4, 800649a <__pow5mult+0x66>
 8006486:	f240 2171 	movw	r1, #625	@ 0x271
 800648a:	4638      	mov	r0, r7
 800648c:	f7ff ff14 	bl	80062b8 <__i2b>
 8006490:	2300      	movs	r3, #0
 8006492:	4604      	mov	r4, r0
 8006494:	f8c8 0008 	str.w	r0, [r8, #8]
 8006498:	6003      	str	r3, [r0, #0]
 800649a:	f04f 0900 	mov.w	r9, #0
 800649e:	07eb      	lsls	r3, r5, #31
 80064a0:	d50a      	bpl.n	80064b8 <__pow5mult+0x84>
 80064a2:	4631      	mov	r1, r6
 80064a4:	4622      	mov	r2, r4
 80064a6:	4638      	mov	r0, r7
 80064a8:	f7ff ff1c 	bl	80062e4 <__multiply>
 80064ac:	4680      	mov	r8, r0
 80064ae:	4631      	mov	r1, r6
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff fe03 	bl	80060bc <_Bfree>
 80064b6:	4646      	mov	r6, r8
 80064b8:	106d      	asrs	r5, r5, #1
 80064ba:	d00b      	beq.n	80064d4 <__pow5mult+0xa0>
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	b938      	cbnz	r0, 80064d0 <__pow5mult+0x9c>
 80064c0:	4622      	mov	r2, r4
 80064c2:	4621      	mov	r1, r4
 80064c4:	4638      	mov	r0, r7
 80064c6:	f7ff ff0d 	bl	80062e4 <__multiply>
 80064ca:	6020      	str	r0, [r4, #0]
 80064cc:	f8c0 9000 	str.w	r9, [r0]
 80064d0:	4604      	mov	r4, r0
 80064d2:	e7e4      	b.n	800649e <__pow5mult+0x6a>
 80064d4:	4630      	mov	r0, r6
 80064d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064da:	bf00      	nop
 80064dc:	080089b8 	.word	0x080089b8
 80064e0:	080088dc 	.word	0x080088dc
 80064e4:	0800895c 	.word	0x0800895c

080064e8 <__lshift>:
 80064e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ec:	460c      	mov	r4, r1
 80064ee:	4607      	mov	r7, r0
 80064f0:	4691      	mov	r9, r2
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	6849      	ldr	r1, [r1, #4]
 80064f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064fa:	68a3      	ldr	r3, [r4, #8]
 80064fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006500:	f108 0601 	add.w	r6, r8, #1
 8006504:	42b3      	cmp	r3, r6
 8006506:	db0b      	blt.n	8006520 <__lshift+0x38>
 8006508:	4638      	mov	r0, r7
 800650a:	f7ff fd97 	bl	800603c <_Balloc>
 800650e:	4605      	mov	r5, r0
 8006510:	b948      	cbnz	r0, 8006526 <__lshift+0x3e>
 8006512:	4602      	mov	r2, r0
 8006514:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006518:	4b27      	ldr	r3, [pc, #156]	@ (80065b8 <__lshift+0xd0>)
 800651a:	4828      	ldr	r0, [pc, #160]	@ (80065bc <__lshift+0xd4>)
 800651c:	f001 fb02 	bl	8007b24 <__assert_func>
 8006520:	3101      	adds	r1, #1
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	e7ee      	b.n	8006504 <__lshift+0x1c>
 8006526:	2300      	movs	r3, #0
 8006528:	f100 0114 	add.w	r1, r0, #20
 800652c:	f100 0210 	add.w	r2, r0, #16
 8006530:	4618      	mov	r0, r3
 8006532:	4553      	cmp	r3, sl
 8006534:	db33      	blt.n	800659e <__lshift+0xb6>
 8006536:	6920      	ldr	r0, [r4, #16]
 8006538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800653c:	f104 0314 	add.w	r3, r4, #20
 8006540:	f019 091f 	ands.w	r9, r9, #31
 8006544:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006548:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800654c:	d02b      	beq.n	80065a6 <__lshift+0xbe>
 800654e:	468a      	mov	sl, r1
 8006550:	2200      	movs	r2, #0
 8006552:	f1c9 0e20 	rsb	lr, r9, #32
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	fa00 f009 	lsl.w	r0, r0, r9
 800655c:	4310      	orrs	r0, r2
 800655e:	f84a 0b04 	str.w	r0, [sl], #4
 8006562:	f853 2b04 	ldr.w	r2, [r3], #4
 8006566:	459c      	cmp	ip, r3
 8006568:	fa22 f20e 	lsr.w	r2, r2, lr
 800656c:	d8f3      	bhi.n	8006556 <__lshift+0x6e>
 800656e:	ebac 0304 	sub.w	r3, ip, r4
 8006572:	3b15      	subs	r3, #21
 8006574:	f023 0303 	bic.w	r3, r3, #3
 8006578:	3304      	adds	r3, #4
 800657a:	f104 0015 	add.w	r0, r4, #21
 800657e:	4584      	cmp	ip, r0
 8006580:	bf38      	it	cc
 8006582:	2304      	movcc	r3, #4
 8006584:	50ca      	str	r2, [r1, r3]
 8006586:	b10a      	cbz	r2, 800658c <__lshift+0xa4>
 8006588:	f108 0602 	add.w	r6, r8, #2
 800658c:	3e01      	subs	r6, #1
 800658e:	4638      	mov	r0, r7
 8006590:	4621      	mov	r1, r4
 8006592:	612e      	str	r6, [r5, #16]
 8006594:	f7ff fd92 	bl	80060bc <_Bfree>
 8006598:	4628      	mov	r0, r5
 800659a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659e:	f842 0f04 	str.w	r0, [r2, #4]!
 80065a2:	3301      	adds	r3, #1
 80065a4:	e7c5      	b.n	8006532 <__lshift+0x4a>
 80065a6:	3904      	subs	r1, #4
 80065a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ac:	459c      	cmp	ip, r3
 80065ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80065b2:	d8f9      	bhi.n	80065a8 <__lshift+0xc0>
 80065b4:	e7ea      	b.n	800658c <__lshift+0xa4>
 80065b6:	bf00      	nop
 80065b8:	0800894b 	.word	0x0800894b
 80065bc:	0800895c 	.word	0x0800895c

080065c0 <__mcmp>:
 80065c0:	4603      	mov	r3, r0
 80065c2:	690a      	ldr	r2, [r1, #16]
 80065c4:	6900      	ldr	r0, [r0, #16]
 80065c6:	b530      	push	{r4, r5, lr}
 80065c8:	1a80      	subs	r0, r0, r2
 80065ca:	d10e      	bne.n	80065ea <__mcmp+0x2a>
 80065cc:	3314      	adds	r3, #20
 80065ce:	3114      	adds	r1, #20
 80065d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065e0:	4295      	cmp	r5, r2
 80065e2:	d003      	beq.n	80065ec <__mcmp+0x2c>
 80065e4:	d205      	bcs.n	80065f2 <__mcmp+0x32>
 80065e6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ea:	bd30      	pop	{r4, r5, pc}
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	d3f3      	bcc.n	80065d8 <__mcmp+0x18>
 80065f0:	e7fb      	b.n	80065ea <__mcmp+0x2a>
 80065f2:	2001      	movs	r0, #1
 80065f4:	e7f9      	b.n	80065ea <__mcmp+0x2a>
	...

080065f8 <__mdiff>:
 80065f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	4689      	mov	r9, r1
 80065fe:	4606      	mov	r6, r0
 8006600:	4611      	mov	r1, r2
 8006602:	4648      	mov	r0, r9
 8006604:	4614      	mov	r4, r2
 8006606:	f7ff ffdb 	bl	80065c0 <__mcmp>
 800660a:	1e05      	subs	r5, r0, #0
 800660c:	d112      	bne.n	8006634 <__mdiff+0x3c>
 800660e:	4629      	mov	r1, r5
 8006610:	4630      	mov	r0, r6
 8006612:	f7ff fd13 	bl	800603c <_Balloc>
 8006616:	4602      	mov	r2, r0
 8006618:	b928      	cbnz	r0, 8006626 <__mdiff+0x2e>
 800661a:	f240 2137 	movw	r1, #567	@ 0x237
 800661e:	4b3e      	ldr	r3, [pc, #248]	@ (8006718 <__mdiff+0x120>)
 8006620:	483e      	ldr	r0, [pc, #248]	@ (800671c <__mdiff+0x124>)
 8006622:	f001 fa7f 	bl	8007b24 <__assert_func>
 8006626:	2301      	movs	r3, #1
 8006628:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800662c:	4610      	mov	r0, r2
 800662e:	b003      	add	sp, #12
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	bfbc      	itt	lt
 8006636:	464b      	movlt	r3, r9
 8006638:	46a1      	movlt	r9, r4
 800663a:	4630      	mov	r0, r6
 800663c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006640:	bfba      	itte	lt
 8006642:	461c      	movlt	r4, r3
 8006644:	2501      	movlt	r5, #1
 8006646:	2500      	movge	r5, #0
 8006648:	f7ff fcf8 	bl	800603c <_Balloc>
 800664c:	4602      	mov	r2, r0
 800664e:	b918      	cbnz	r0, 8006658 <__mdiff+0x60>
 8006650:	f240 2145 	movw	r1, #581	@ 0x245
 8006654:	4b30      	ldr	r3, [pc, #192]	@ (8006718 <__mdiff+0x120>)
 8006656:	e7e3      	b.n	8006620 <__mdiff+0x28>
 8006658:	f100 0b14 	add.w	fp, r0, #20
 800665c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006660:	f109 0310 	add.w	r3, r9, #16
 8006664:	60c5      	str	r5, [r0, #12]
 8006666:	f04f 0c00 	mov.w	ip, #0
 800666a:	f109 0514 	add.w	r5, r9, #20
 800666e:	46d9      	mov	r9, fp
 8006670:	6926      	ldr	r6, [r4, #16]
 8006672:	f104 0e14 	add.w	lr, r4, #20
 8006676:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800667a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	9b01      	ldr	r3, [sp, #4]
 8006682:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006686:	f853 af04 	ldr.w	sl, [r3, #4]!
 800668a:	b281      	uxth	r1, r0
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	fa1f f38a 	uxth.w	r3, sl
 8006692:	1a5b      	subs	r3, r3, r1
 8006694:	0c00      	lsrs	r0, r0, #16
 8006696:	4463      	add	r3, ip
 8006698:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800669c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066a6:	4576      	cmp	r6, lr
 80066a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066ac:	f849 3b04 	str.w	r3, [r9], #4
 80066b0:	d8e6      	bhi.n	8006680 <__mdiff+0x88>
 80066b2:	1b33      	subs	r3, r6, r4
 80066b4:	3b15      	subs	r3, #21
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	3415      	adds	r4, #21
 80066bc:	3304      	adds	r3, #4
 80066be:	42a6      	cmp	r6, r4
 80066c0:	bf38      	it	cc
 80066c2:	2304      	movcc	r3, #4
 80066c4:	441d      	add	r5, r3
 80066c6:	445b      	add	r3, fp
 80066c8:	461e      	mov	r6, r3
 80066ca:	462c      	mov	r4, r5
 80066cc:	4544      	cmp	r4, r8
 80066ce:	d30e      	bcc.n	80066ee <__mdiff+0xf6>
 80066d0:	f108 0103 	add.w	r1, r8, #3
 80066d4:	1b49      	subs	r1, r1, r5
 80066d6:	f021 0103 	bic.w	r1, r1, #3
 80066da:	3d03      	subs	r5, #3
 80066dc:	45a8      	cmp	r8, r5
 80066de:	bf38      	it	cc
 80066e0:	2100      	movcc	r1, #0
 80066e2:	440b      	add	r3, r1
 80066e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066e8:	b199      	cbz	r1, 8006712 <__mdiff+0x11a>
 80066ea:	6117      	str	r7, [r2, #16]
 80066ec:	e79e      	b.n	800662c <__mdiff+0x34>
 80066ee:	46e6      	mov	lr, ip
 80066f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80066f4:	fa1f fc81 	uxth.w	ip, r1
 80066f8:	44f4      	add	ip, lr
 80066fa:	0c08      	lsrs	r0, r1, #16
 80066fc:	4471      	add	r1, lr
 80066fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006702:	b289      	uxth	r1, r1
 8006704:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006708:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800670c:	f846 1b04 	str.w	r1, [r6], #4
 8006710:	e7dc      	b.n	80066cc <__mdiff+0xd4>
 8006712:	3f01      	subs	r7, #1
 8006714:	e7e6      	b.n	80066e4 <__mdiff+0xec>
 8006716:	bf00      	nop
 8006718:	0800894b 	.word	0x0800894b
 800671c:	0800895c 	.word	0x0800895c

08006720 <__ulp>:
 8006720:	4b0e      	ldr	r3, [pc, #56]	@ (800675c <__ulp+0x3c>)
 8006722:	400b      	ands	r3, r1
 8006724:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006728:	2b00      	cmp	r3, #0
 800672a:	dc08      	bgt.n	800673e <__ulp+0x1e>
 800672c:	425b      	negs	r3, r3
 800672e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006732:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006736:	da04      	bge.n	8006742 <__ulp+0x22>
 8006738:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800673c:	4113      	asrs	r3, r2
 800673e:	2200      	movs	r2, #0
 8006740:	e008      	b.n	8006754 <__ulp+0x34>
 8006742:	f1a2 0314 	sub.w	r3, r2, #20
 8006746:	2b1e      	cmp	r3, #30
 8006748:	bfd6      	itet	le
 800674a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800674e:	2201      	movgt	r2, #1
 8006750:	40da      	lsrle	r2, r3
 8006752:	2300      	movs	r3, #0
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	7ff00000 	.word	0x7ff00000

08006760 <__b2d>:
 8006760:	6902      	ldr	r2, [r0, #16]
 8006762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006764:	f100 0614 	add.w	r6, r0, #20
 8006768:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800676c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006770:	4f1e      	ldr	r7, [pc, #120]	@ (80067ec <__b2d+0x8c>)
 8006772:	4620      	mov	r0, r4
 8006774:	f7ff fd54 	bl	8006220 <__hi0bits>
 8006778:	4603      	mov	r3, r0
 800677a:	f1c0 0020 	rsb	r0, r0, #32
 800677e:	2b0a      	cmp	r3, #10
 8006780:	f1a2 0504 	sub.w	r5, r2, #4
 8006784:	6008      	str	r0, [r1, #0]
 8006786:	dc12      	bgt.n	80067ae <__b2d+0x4e>
 8006788:	42ae      	cmp	r6, r5
 800678a:	bf2c      	ite	cs
 800678c:	2200      	movcs	r2, #0
 800678e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006792:	f1c3 0c0b 	rsb	ip, r3, #11
 8006796:	3315      	adds	r3, #21
 8006798:	fa24 fe0c 	lsr.w	lr, r4, ip
 800679c:	fa04 f303 	lsl.w	r3, r4, r3
 80067a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80067a4:	ea4e 0107 	orr.w	r1, lr, r7
 80067a8:	431a      	orrs	r2, r3
 80067aa:	4610      	mov	r0, r2
 80067ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ae:	42ae      	cmp	r6, r5
 80067b0:	bf36      	itet	cc
 80067b2:	f1a2 0508 	subcc.w	r5, r2, #8
 80067b6:	2200      	movcs	r2, #0
 80067b8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80067bc:	3b0b      	subs	r3, #11
 80067be:	d012      	beq.n	80067e6 <__b2d+0x86>
 80067c0:	f1c3 0720 	rsb	r7, r3, #32
 80067c4:	fa22 f107 	lsr.w	r1, r2, r7
 80067c8:	409c      	lsls	r4, r3
 80067ca:	430c      	orrs	r4, r1
 80067cc:	42b5      	cmp	r5, r6
 80067ce:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80067d2:	bf94      	ite	ls
 80067d4:	2400      	movls	r4, #0
 80067d6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80067da:	409a      	lsls	r2, r3
 80067dc:	40fc      	lsrs	r4, r7
 80067de:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80067e2:	4322      	orrs	r2, r4
 80067e4:	e7e1      	b.n	80067aa <__b2d+0x4a>
 80067e6:	ea44 0107 	orr.w	r1, r4, r7
 80067ea:	e7de      	b.n	80067aa <__b2d+0x4a>
 80067ec:	3ff00000 	.word	0x3ff00000

080067f0 <__d2b>:
 80067f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80067f4:	2101      	movs	r1, #1
 80067f6:	4690      	mov	r8, r2
 80067f8:	4699      	mov	r9, r3
 80067fa:	9e08      	ldr	r6, [sp, #32]
 80067fc:	f7ff fc1e 	bl	800603c <_Balloc>
 8006800:	4604      	mov	r4, r0
 8006802:	b930      	cbnz	r0, 8006812 <__d2b+0x22>
 8006804:	4602      	mov	r2, r0
 8006806:	f240 310f 	movw	r1, #783	@ 0x30f
 800680a:	4b23      	ldr	r3, [pc, #140]	@ (8006898 <__d2b+0xa8>)
 800680c:	4823      	ldr	r0, [pc, #140]	@ (800689c <__d2b+0xac>)
 800680e:	f001 f989 	bl	8007b24 <__assert_func>
 8006812:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006816:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800681a:	b10d      	cbz	r5, 8006820 <__d2b+0x30>
 800681c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	f1b8 0300 	subs.w	r3, r8, #0
 8006826:	d024      	beq.n	8006872 <__d2b+0x82>
 8006828:	4668      	mov	r0, sp
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	f7ff fd17 	bl	800625e <__lo0bits>
 8006830:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006834:	b1d8      	cbz	r0, 800686e <__d2b+0x7e>
 8006836:	f1c0 0320 	rsb	r3, r0, #32
 800683a:	fa02 f303 	lsl.w	r3, r2, r3
 800683e:	430b      	orrs	r3, r1
 8006840:	40c2      	lsrs	r2, r0
 8006842:	6163      	str	r3, [r4, #20]
 8006844:	9201      	str	r2, [sp, #4]
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf0c      	ite	eq
 800684c:	2201      	moveq	r2, #1
 800684e:	2202      	movne	r2, #2
 8006850:	61a3      	str	r3, [r4, #24]
 8006852:	6122      	str	r2, [r4, #16]
 8006854:	b1ad      	cbz	r5, 8006882 <__d2b+0x92>
 8006856:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800685a:	4405      	add	r5, r0
 800685c:	6035      	str	r5, [r6, #0]
 800685e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006864:	6018      	str	r0, [r3, #0]
 8006866:	4620      	mov	r0, r4
 8006868:	b002      	add	sp, #8
 800686a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800686e:	6161      	str	r1, [r4, #20]
 8006870:	e7e9      	b.n	8006846 <__d2b+0x56>
 8006872:	a801      	add	r0, sp, #4
 8006874:	f7ff fcf3 	bl	800625e <__lo0bits>
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	6163      	str	r3, [r4, #20]
 800687e:	3020      	adds	r0, #32
 8006880:	e7e7      	b.n	8006852 <__d2b+0x62>
 8006882:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006886:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800688a:	6030      	str	r0, [r6, #0]
 800688c:	6918      	ldr	r0, [r3, #16]
 800688e:	f7ff fcc7 	bl	8006220 <__hi0bits>
 8006892:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006896:	e7e4      	b.n	8006862 <__d2b+0x72>
 8006898:	0800894b 	.word	0x0800894b
 800689c:	0800895c 	.word	0x0800895c

080068a0 <__ratio>:
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	b085      	sub	sp, #20
 80068a6:	e9cd 1000 	strd	r1, r0, [sp]
 80068aa:	a902      	add	r1, sp, #8
 80068ac:	f7ff ff58 	bl	8006760 <__b2d>
 80068b0:	468b      	mov	fp, r1
 80068b2:	4606      	mov	r6, r0
 80068b4:	460f      	mov	r7, r1
 80068b6:	9800      	ldr	r0, [sp, #0]
 80068b8:	a903      	add	r1, sp, #12
 80068ba:	f7ff ff51 	bl	8006760 <__b2d>
 80068be:	460d      	mov	r5, r1
 80068c0:	9b01      	ldr	r3, [sp, #4]
 80068c2:	4689      	mov	r9, r1
 80068c4:	6919      	ldr	r1, [r3, #16]
 80068c6:	9b00      	ldr	r3, [sp, #0]
 80068c8:	4604      	mov	r4, r0
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	4630      	mov	r0, r6
 80068ce:	1ac9      	subs	r1, r1, r3
 80068d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80068da:	2b00      	cmp	r3, #0
 80068dc:	bfcd      	iteet	gt
 80068de:	463a      	movgt	r2, r7
 80068e0:	462a      	movle	r2, r5
 80068e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80068e6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80068ea:	bfd8      	it	le
 80068ec:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80068f0:	464b      	mov	r3, r9
 80068f2:	4622      	mov	r2, r4
 80068f4:	4659      	mov	r1, fp
 80068f6:	f7f9 ff19 	bl	800072c <__aeabi_ddiv>
 80068fa:	b005      	add	sp, #20
 80068fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006900 <__copybits>:
 8006900:	3901      	subs	r1, #1
 8006902:	b570      	push	{r4, r5, r6, lr}
 8006904:	1149      	asrs	r1, r1, #5
 8006906:	6914      	ldr	r4, [r2, #16]
 8006908:	3101      	adds	r1, #1
 800690a:	f102 0314 	add.w	r3, r2, #20
 800690e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006912:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006916:	1f05      	subs	r5, r0, #4
 8006918:	42a3      	cmp	r3, r4
 800691a:	d30c      	bcc.n	8006936 <__copybits+0x36>
 800691c:	1aa3      	subs	r3, r4, r2
 800691e:	3b11      	subs	r3, #17
 8006920:	f023 0303 	bic.w	r3, r3, #3
 8006924:	3211      	adds	r2, #17
 8006926:	42a2      	cmp	r2, r4
 8006928:	bf88      	it	hi
 800692a:	2300      	movhi	r3, #0
 800692c:	4418      	add	r0, r3
 800692e:	2300      	movs	r3, #0
 8006930:	4288      	cmp	r0, r1
 8006932:	d305      	bcc.n	8006940 <__copybits+0x40>
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	f853 6b04 	ldr.w	r6, [r3], #4
 800693a:	f845 6f04 	str.w	r6, [r5, #4]!
 800693e:	e7eb      	b.n	8006918 <__copybits+0x18>
 8006940:	f840 3b04 	str.w	r3, [r0], #4
 8006944:	e7f4      	b.n	8006930 <__copybits+0x30>

08006946 <__any_on>:
 8006946:	f100 0214 	add.w	r2, r0, #20
 800694a:	6900      	ldr	r0, [r0, #16]
 800694c:	114b      	asrs	r3, r1, #5
 800694e:	4298      	cmp	r0, r3
 8006950:	b510      	push	{r4, lr}
 8006952:	db11      	blt.n	8006978 <__any_on+0x32>
 8006954:	dd0a      	ble.n	800696c <__any_on+0x26>
 8006956:	f011 011f 	ands.w	r1, r1, #31
 800695a:	d007      	beq.n	800696c <__any_on+0x26>
 800695c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006960:	fa24 f001 	lsr.w	r0, r4, r1
 8006964:	fa00 f101 	lsl.w	r1, r0, r1
 8006968:	428c      	cmp	r4, r1
 800696a:	d10b      	bne.n	8006984 <__any_on+0x3e>
 800696c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006970:	4293      	cmp	r3, r2
 8006972:	d803      	bhi.n	800697c <__any_on+0x36>
 8006974:	2000      	movs	r0, #0
 8006976:	bd10      	pop	{r4, pc}
 8006978:	4603      	mov	r3, r0
 800697a:	e7f7      	b.n	800696c <__any_on+0x26>
 800697c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006980:	2900      	cmp	r1, #0
 8006982:	d0f5      	beq.n	8006970 <__any_on+0x2a>
 8006984:	2001      	movs	r0, #1
 8006986:	e7f6      	b.n	8006976 <__any_on+0x30>

08006988 <sulp>:
 8006988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800698c:	460f      	mov	r7, r1
 800698e:	4690      	mov	r8, r2
 8006990:	f7ff fec6 	bl	8006720 <__ulp>
 8006994:	4604      	mov	r4, r0
 8006996:	460d      	mov	r5, r1
 8006998:	f1b8 0f00 	cmp.w	r8, #0
 800699c:	d011      	beq.n	80069c2 <sulp+0x3a>
 800699e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80069a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dd0b      	ble.n	80069c2 <sulp+0x3a>
 80069aa:	2400      	movs	r4, #0
 80069ac:	051b      	lsls	r3, r3, #20
 80069ae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80069b2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80069b6:	4622      	mov	r2, r4
 80069b8:	462b      	mov	r3, r5
 80069ba:	f7f9 fd8d 	bl	80004d8 <__aeabi_dmul>
 80069be:	4604      	mov	r4, r0
 80069c0:	460d      	mov	r5, r1
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069ca:	0000      	movs	r0, r0
 80069cc:	0000      	movs	r0, r0
	...

080069d0 <_strtod_l>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	b09f      	sub	sp, #124	@ 0x7c
 80069d6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80069d8:	2200      	movs	r2, #0
 80069da:	460c      	mov	r4, r1
 80069dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80069de:	f04f 0a00 	mov.w	sl, #0
 80069e2:	f04f 0b00 	mov.w	fp, #0
 80069e6:	460a      	mov	r2, r1
 80069e8:	9005      	str	r0, [sp, #20]
 80069ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80069ec:	7811      	ldrb	r1, [r2, #0]
 80069ee:	292b      	cmp	r1, #43	@ 0x2b
 80069f0:	d048      	beq.n	8006a84 <_strtod_l+0xb4>
 80069f2:	d836      	bhi.n	8006a62 <_strtod_l+0x92>
 80069f4:	290d      	cmp	r1, #13
 80069f6:	d830      	bhi.n	8006a5a <_strtod_l+0x8a>
 80069f8:	2908      	cmp	r1, #8
 80069fa:	d830      	bhi.n	8006a5e <_strtod_l+0x8e>
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d039      	beq.n	8006a74 <_strtod_l+0xa4>
 8006a00:	2200      	movs	r2, #0
 8006a02:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006a04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006a06:	782a      	ldrb	r2, [r5, #0]
 8006a08:	2a30      	cmp	r2, #48	@ 0x30
 8006a0a:	f040 80b1 	bne.w	8006b70 <_strtod_l+0x1a0>
 8006a0e:	786a      	ldrb	r2, [r5, #1]
 8006a10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a14:	2a58      	cmp	r2, #88	@ 0x58
 8006a16:	d16c      	bne.n	8006af2 <_strtod_l+0x122>
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a1c:	4a8e      	ldr	r2, [pc, #568]	@ (8006c58 <_strtod_l+0x288>)
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	ab1a      	add	r3, sp, #104	@ 0x68
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	9805      	ldr	r0, [sp, #20]
 8006a26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006a28:	a919      	add	r1, sp, #100	@ 0x64
 8006a2a:	f001 f915 	bl	8007c58 <__gethex>
 8006a2e:	f010 060f 	ands.w	r6, r0, #15
 8006a32:	4604      	mov	r4, r0
 8006a34:	d005      	beq.n	8006a42 <_strtod_l+0x72>
 8006a36:	2e06      	cmp	r6, #6
 8006a38:	d126      	bne.n	8006a88 <_strtod_l+0xb8>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 8584 	bne.w	8007552 <_strtod_l+0xb82>
 8006a4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a4c:	b1bb      	cbz	r3, 8006a7e <_strtod_l+0xae>
 8006a4e:	4650      	mov	r0, sl
 8006a50:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006a54:	b01f      	add	sp, #124	@ 0x7c
 8006a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5a:	2920      	cmp	r1, #32
 8006a5c:	d1d0      	bne.n	8006a00 <_strtod_l+0x30>
 8006a5e:	3201      	adds	r2, #1
 8006a60:	e7c3      	b.n	80069ea <_strtod_l+0x1a>
 8006a62:	292d      	cmp	r1, #45	@ 0x2d
 8006a64:	d1cc      	bne.n	8006a00 <_strtod_l+0x30>
 8006a66:	2101      	movs	r1, #1
 8006a68:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006a6a:	1c51      	adds	r1, r2, #1
 8006a6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a6e:	7852      	ldrb	r2, [r2, #1]
 8006a70:	2a00      	cmp	r2, #0
 8006a72:	d1c7      	bne.n	8006a04 <_strtod_l+0x34>
 8006a74:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006a76:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 8568 	bne.w	800754e <_strtod_l+0xb7e>
 8006a7e:	4650      	mov	r0, sl
 8006a80:	4659      	mov	r1, fp
 8006a82:	e7e7      	b.n	8006a54 <_strtod_l+0x84>
 8006a84:	2100      	movs	r1, #0
 8006a86:	e7ef      	b.n	8006a68 <_strtod_l+0x98>
 8006a88:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006a8a:	b13a      	cbz	r2, 8006a9c <_strtod_l+0xcc>
 8006a8c:	2135      	movs	r1, #53	@ 0x35
 8006a8e:	a81c      	add	r0, sp, #112	@ 0x70
 8006a90:	f7ff ff36 	bl	8006900 <__copybits>
 8006a94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a96:	9805      	ldr	r0, [sp, #20]
 8006a98:	f7ff fb10 	bl	80060bc <_Bfree>
 8006a9c:	3e01      	subs	r6, #1
 8006a9e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006aa0:	2e04      	cmp	r6, #4
 8006aa2:	d806      	bhi.n	8006ab2 <_strtod_l+0xe2>
 8006aa4:	e8df f006 	tbb	[pc, r6]
 8006aa8:	201d0314 	.word	0x201d0314
 8006aac:	14          	.byte	0x14
 8006aad:	00          	.byte	0x00
 8006aae:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006ab2:	05e1      	lsls	r1, r4, #23
 8006ab4:	bf48      	it	mi
 8006ab6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006aba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006abe:	0d1b      	lsrs	r3, r3, #20
 8006ac0:	051b      	lsls	r3, r3, #20
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1bd      	bne.n	8006a42 <_strtod_l+0x72>
 8006ac6:	f7fe fb2b 	bl	8005120 <__errno>
 8006aca:	2322      	movs	r3, #34	@ 0x22
 8006acc:	6003      	str	r3, [r0, #0]
 8006ace:	e7b8      	b.n	8006a42 <_strtod_l+0x72>
 8006ad0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006ad4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006ad8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006adc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006ae0:	e7e7      	b.n	8006ab2 <_strtod_l+0xe2>
 8006ae2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006c5c <_strtod_l+0x28c>
 8006ae6:	e7e4      	b.n	8006ab2 <_strtod_l+0xe2>
 8006ae8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006aec:	f04f 3aff 	mov.w	sl, #4294967295
 8006af0:	e7df      	b.n	8006ab2 <_strtod_l+0xe2>
 8006af2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b30      	cmp	r3, #48	@ 0x30
 8006afc:	d0f9      	beq.n	8006af2 <_strtod_l+0x122>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d09f      	beq.n	8006a42 <_strtod_l+0x72>
 8006b02:	2301      	movs	r3, #1
 8006b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b08:	220a      	movs	r2, #10
 8006b0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	461f      	mov	r7, r3
 8006b10:	9308      	str	r3, [sp, #32]
 8006b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b14:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006b16:	7805      	ldrb	r5, [r0, #0]
 8006b18:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006b1c:	b2d9      	uxtb	r1, r3
 8006b1e:	2909      	cmp	r1, #9
 8006b20:	d928      	bls.n	8006b74 <_strtod_l+0x1a4>
 8006b22:	2201      	movs	r2, #1
 8006b24:	494e      	ldr	r1, [pc, #312]	@ (8006c60 <_strtod_l+0x290>)
 8006b26:	f000 ffc7 	bl	8007ab8 <strncmp>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d032      	beq.n	8006b94 <_strtod_l+0x1c4>
 8006b2e:	2000      	movs	r0, #0
 8006b30:	462a      	mov	r2, r5
 8006b32:	4681      	mov	r9, r0
 8006b34:	463d      	mov	r5, r7
 8006b36:	4603      	mov	r3, r0
 8006b38:	2a65      	cmp	r2, #101	@ 0x65
 8006b3a:	d001      	beq.n	8006b40 <_strtod_l+0x170>
 8006b3c:	2a45      	cmp	r2, #69	@ 0x45
 8006b3e:	d114      	bne.n	8006b6a <_strtod_l+0x19a>
 8006b40:	b91d      	cbnz	r5, 8006b4a <_strtod_l+0x17a>
 8006b42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b44:	4302      	orrs	r2, r0
 8006b46:	d095      	beq.n	8006a74 <_strtod_l+0xa4>
 8006b48:	2500      	movs	r5, #0
 8006b4a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006b4c:	1c62      	adds	r2, r4, #1
 8006b4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b50:	7862      	ldrb	r2, [r4, #1]
 8006b52:	2a2b      	cmp	r2, #43	@ 0x2b
 8006b54:	d077      	beq.n	8006c46 <_strtod_l+0x276>
 8006b56:	2a2d      	cmp	r2, #45	@ 0x2d
 8006b58:	d07b      	beq.n	8006c52 <_strtod_l+0x282>
 8006b5a:	f04f 0c00 	mov.w	ip, #0
 8006b5e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006b62:	2909      	cmp	r1, #9
 8006b64:	f240 8082 	bls.w	8006c6c <_strtod_l+0x29c>
 8006b68:	9419      	str	r4, [sp, #100]	@ 0x64
 8006b6a:	f04f 0800 	mov.w	r8, #0
 8006b6e:	e0a2      	b.n	8006cb6 <_strtod_l+0x2e6>
 8006b70:	2300      	movs	r3, #0
 8006b72:	e7c7      	b.n	8006b04 <_strtod_l+0x134>
 8006b74:	2f08      	cmp	r7, #8
 8006b76:	bfd5      	itete	le
 8006b78:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006b7a:	9908      	ldrgt	r1, [sp, #32]
 8006b7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b80:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006b84:	f100 0001 	add.w	r0, r0, #1
 8006b88:	bfd4      	ite	le
 8006b8a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006b8c:	9308      	strgt	r3, [sp, #32]
 8006b8e:	3701      	adds	r7, #1
 8006b90:	9019      	str	r0, [sp, #100]	@ 0x64
 8006b92:	e7bf      	b.n	8006b14 <_strtod_l+0x144>
 8006b94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b9a:	785a      	ldrb	r2, [r3, #1]
 8006b9c:	b37f      	cbz	r7, 8006bfe <_strtod_l+0x22e>
 8006b9e:	4681      	mov	r9, r0
 8006ba0:	463d      	mov	r5, r7
 8006ba2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006ba6:	2b09      	cmp	r3, #9
 8006ba8:	d912      	bls.n	8006bd0 <_strtod_l+0x200>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e7c4      	b.n	8006b38 <_strtod_l+0x168>
 8006bae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006bb6:	785a      	ldrb	r2, [r3, #1]
 8006bb8:	2a30      	cmp	r2, #48	@ 0x30
 8006bba:	d0f8      	beq.n	8006bae <_strtod_l+0x1de>
 8006bbc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	f200 84cb 	bhi.w	800755c <_strtod_l+0xb8c>
 8006bc6:	4681      	mov	r9, r0
 8006bc8:	2000      	movs	r0, #0
 8006bca:	4605      	mov	r5, r0
 8006bcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bce:	930c      	str	r3, [sp, #48]	@ 0x30
 8006bd0:	3a30      	subs	r2, #48	@ 0x30
 8006bd2:	f100 0301 	add.w	r3, r0, #1
 8006bd6:	d02a      	beq.n	8006c2e <_strtod_l+0x25e>
 8006bd8:	4499      	add	r9, r3
 8006bda:	210a      	movs	r1, #10
 8006bdc:	462b      	mov	r3, r5
 8006bde:	eb00 0c05 	add.w	ip, r0, r5
 8006be2:	4563      	cmp	r3, ip
 8006be4:	d10d      	bne.n	8006c02 <_strtod_l+0x232>
 8006be6:	1c69      	adds	r1, r5, #1
 8006be8:	4401      	add	r1, r0
 8006bea:	4428      	add	r0, r5
 8006bec:	2808      	cmp	r0, #8
 8006bee:	dc16      	bgt.n	8006c1e <_strtod_l+0x24e>
 8006bf0:	230a      	movs	r3, #10
 8006bf2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006bf4:	fb03 2300 	mla	r3, r3, r0, r2
 8006bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e018      	b.n	8006c30 <_strtod_l+0x260>
 8006bfe:	4638      	mov	r0, r7
 8006c00:	e7da      	b.n	8006bb8 <_strtod_l+0x1e8>
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	f103 0301 	add.w	r3, r3, #1
 8006c08:	dc03      	bgt.n	8006c12 <_strtod_l+0x242>
 8006c0a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006c0c:	434e      	muls	r6, r1
 8006c0e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006c10:	e7e7      	b.n	8006be2 <_strtod_l+0x212>
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	bfde      	ittt	le
 8006c16:	9e08      	ldrle	r6, [sp, #32]
 8006c18:	434e      	mulle	r6, r1
 8006c1a:	9608      	strle	r6, [sp, #32]
 8006c1c:	e7e1      	b.n	8006be2 <_strtod_l+0x212>
 8006c1e:	280f      	cmp	r0, #15
 8006c20:	dceb      	bgt.n	8006bfa <_strtod_l+0x22a>
 8006c22:	230a      	movs	r3, #10
 8006c24:	9808      	ldr	r0, [sp, #32]
 8006c26:	fb03 2300 	mla	r3, r3, r0, r2
 8006c2a:	9308      	str	r3, [sp, #32]
 8006c2c:	e7e5      	b.n	8006bfa <_strtod_l+0x22a>
 8006c2e:	4629      	mov	r1, r5
 8006c30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c32:	460d      	mov	r5, r1
 8006c34:	1c50      	adds	r0, r2, #1
 8006c36:	9019      	str	r0, [sp, #100]	@ 0x64
 8006c38:	7852      	ldrb	r2, [r2, #1]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	e7b1      	b.n	8006ba2 <_strtod_l+0x1d2>
 8006c3e:	f04f 0900 	mov.w	r9, #0
 8006c42:	2301      	movs	r3, #1
 8006c44:	e77d      	b.n	8006b42 <_strtod_l+0x172>
 8006c46:	f04f 0c00 	mov.w	ip, #0
 8006c4a:	1ca2      	adds	r2, r4, #2
 8006c4c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c4e:	78a2      	ldrb	r2, [r4, #2]
 8006c50:	e785      	b.n	8006b5e <_strtod_l+0x18e>
 8006c52:	f04f 0c01 	mov.w	ip, #1
 8006c56:	e7f8      	b.n	8006c4a <_strtod_l+0x27a>
 8006c58:	08008ad0 	.word	0x08008ad0
 8006c5c:	7ff00000 	.word	0x7ff00000
 8006c60:	08008ab8 	.word	0x08008ab8
 8006c64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c66:	1c51      	adds	r1, r2, #1
 8006c68:	9119      	str	r1, [sp, #100]	@ 0x64
 8006c6a:	7852      	ldrb	r2, [r2, #1]
 8006c6c:	2a30      	cmp	r2, #48	@ 0x30
 8006c6e:	d0f9      	beq.n	8006c64 <_strtod_l+0x294>
 8006c70:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006c74:	2908      	cmp	r1, #8
 8006c76:	f63f af78 	bhi.w	8006b6a <_strtod_l+0x19a>
 8006c7a:	f04f 080a 	mov.w	r8, #10
 8006c7e:	3a30      	subs	r2, #48	@ 0x30
 8006c80:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c84:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006c86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006c88:	1c56      	adds	r6, r2, #1
 8006c8a:	9619      	str	r6, [sp, #100]	@ 0x64
 8006c8c:	7852      	ldrb	r2, [r2, #1]
 8006c8e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006c92:	f1be 0f09 	cmp.w	lr, #9
 8006c96:	d939      	bls.n	8006d0c <_strtod_l+0x33c>
 8006c98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006c9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006c9e:	1a76      	subs	r6, r6, r1
 8006ca0:	2e08      	cmp	r6, #8
 8006ca2:	dc03      	bgt.n	8006cac <_strtod_l+0x2dc>
 8006ca4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ca6:	4588      	cmp	r8, r1
 8006ca8:	bfa8      	it	ge
 8006caa:	4688      	movge	r8, r1
 8006cac:	f1bc 0f00 	cmp.w	ip, #0
 8006cb0:	d001      	beq.n	8006cb6 <_strtod_l+0x2e6>
 8006cb2:	f1c8 0800 	rsb	r8, r8, #0
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	d14e      	bne.n	8006d58 <_strtod_l+0x388>
 8006cba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cbc:	4308      	orrs	r0, r1
 8006cbe:	f47f aec0 	bne.w	8006a42 <_strtod_l+0x72>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f47f aed6 	bne.w	8006a74 <_strtod_l+0xa4>
 8006cc8:	2a69      	cmp	r2, #105	@ 0x69
 8006cca:	d028      	beq.n	8006d1e <_strtod_l+0x34e>
 8006ccc:	dc25      	bgt.n	8006d1a <_strtod_l+0x34a>
 8006cce:	2a49      	cmp	r2, #73	@ 0x49
 8006cd0:	d025      	beq.n	8006d1e <_strtod_l+0x34e>
 8006cd2:	2a4e      	cmp	r2, #78	@ 0x4e
 8006cd4:	f47f aece 	bne.w	8006a74 <_strtod_l+0xa4>
 8006cd8:	499a      	ldr	r1, [pc, #616]	@ (8006f44 <_strtod_l+0x574>)
 8006cda:	a819      	add	r0, sp, #100	@ 0x64
 8006cdc:	f001 f9de 	bl	800809c <__match>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	f43f aec7 	beq.w	8006a74 <_strtod_l+0xa4>
 8006ce6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b28      	cmp	r3, #40	@ 0x28
 8006cec:	d12e      	bne.n	8006d4c <_strtod_l+0x37c>
 8006cee:	4996      	ldr	r1, [pc, #600]	@ (8006f48 <_strtod_l+0x578>)
 8006cf0:	aa1c      	add	r2, sp, #112	@ 0x70
 8006cf2:	a819      	add	r0, sp, #100	@ 0x64
 8006cf4:	f001 f9e6 	bl	80080c4 <__hexnan>
 8006cf8:	2805      	cmp	r0, #5
 8006cfa:	d127      	bne.n	8006d4c <_strtod_l+0x37c>
 8006cfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006cfe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006d02:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006d06:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006d0a:	e69a      	b.n	8006a42 <_strtod_l+0x72>
 8006d0c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006d0e:	fb08 2101 	mla	r1, r8, r1, r2
 8006d12:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006d16:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d18:	e7b5      	b.n	8006c86 <_strtod_l+0x2b6>
 8006d1a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006d1c:	e7da      	b.n	8006cd4 <_strtod_l+0x304>
 8006d1e:	498b      	ldr	r1, [pc, #556]	@ (8006f4c <_strtod_l+0x57c>)
 8006d20:	a819      	add	r0, sp, #100	@ 0x64
 8006d22:	f001 f9bb 	bl	800809c <__match>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f43f aea4 	beq.w	8006a74 <_strtod_l+0xa4>
 8006d2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d2e:	4988      	ldr	r1, [pc, #544]	@ (8006f50 <_strtod_l+0x580>)
 8006d30:	3b01      	subs	r3, #1
 8006d32:	a819      	add	r0, sp, #100	@ 0x64
 8006d34:	9319      	str	r3, [sp, #100]	@ 0x64
 8006d36:	f001 f9b1 	bl	800809c <__match>
 8006d3a:	b910      	cbnz	r0, 8006d42 <_strtod_l+0x372>
 8006d3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d3e:	3301      	adds	r3, #1
 8006d40:	9319      	str	r3, [sp, #100]	@ 0x64
 8006d42:	f04f 0a00 	mov.w	sl, #0
 8006d46:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006f54 <_strtod_l+0x584>
 8006d4a:	e67a      	b.n	8006a42 <_strtod_l+0x72>
 8006d4c:	4882      	ldr	r0, [pc, #520]	@ (8006f58 <_strtod_l+0x588>)
 8006d4e:	f000 fee3 	bl	8007b18 <nan>
 8006d52:	4682      	mov	sl, r0
 8006d54:	468b      	mov	fp, r1
 8006d56:	e674      	b.n	8006a42 <_strtod_l+0x72>
 8006d58:	eba8 0309 	sub.w	r3, r8, r9
 8006d5c:	2f00      	cmp	r7, #0
 8006d5e:	bf08      	it	eq
 8006d60:	462f      	moveq	r7, r5
 8006d62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d64:	2d10      	cmp	r5, #16
 8006d66:	462c      	mov	r4, r5
 8006d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d6a:	bfa8      	it	ge
 8006d6c:	2410      	movge	r4, #16
 8006d6e:	f7f9 fb39 	bl	80003e4 <__aeabi_ui2d>
 8006d72:	2d09      	cmp	r5, #9
 8006d74:	4682      	mov	sl, r0
 8006d76:	468b      	mov	fp, r1
 8006d78:	dc11      	bgt.n	8006d9e <_strtod_l+0x3ce>
 8006d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f43f ae60 	beq.w	8006a42 <_strtod_l+0x72>
 8006d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d84:	dd76      	ble.n	8006e74 <_strtod_l+0x4a4>
 8006d86:	2b16      	cmp	r3, #22
 8006d88:	dc5d      	bgt.n	8006e46 <_strtod_l+0x476>
 8006d8a:	4974      	ldr	r1, [pc, #464]	@ (8006f5c <_strtod_l+0x58c>)
 8006d8c:	4652      	mov	r2, sl
 8006d8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d92:	465b      	mov	r3, fp
 8006d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d98:	f7f9 fb9e 	bl	80004d8 <__aeabi_dmul>
 8006d9c:	e7d9      	b.n	8006d52 <_strtod_l+0x382>
 8006d9e:	4b6f      	ldr	r3, [pc, #444]	@ (8006f5c <_strtod_l+0x58c>)
 8006da0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006da4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006da8:	f7f9 fb96 	bl	80004d8 <__aeabi_dmul>
 8006dac:	4682      	mov	sl, r0
 8006dae:	9808      	ldr	r0, [sp, #32]
 8006db0:	468b      	mov	fp, r1
 8006db2:	f7f9 fb17 	bl	80003e4 <__aeabi_ui2d>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4650      	mov	r0, sl
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	f7f9 f9d5 	bl	800016c <__adddf3>
 8006dc2:	2d0f      	cmp	r5, #15
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	468b      	mov	fp, r1
 8006dc8:	ddd7      	ble.n	8006d7a <_strtod_l+0x3aa>
 8006dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dcc:	1b2c      	subs	r4, r5, r4
 8006dce:	441c      	add	r4, r3
 8006dd0:	2c00      	cmp	r4, #0
 8006dd2:	f340 8096 	ble.w	8006f02 <_strtod_l+0x532>
 8006dd6:	f014 030f 	ands.w	r3, r4, #15
 8006dda:	d00a      	beq.n	8006df2 <_strtod_l+0x422>
 8006ddc:	495f      	ldr	r1, [pc, #380]	@ (8006f5c <_strtod_l+0x58c>)
 8006dde:	4652      	mov	r2, sl
 8006de0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006de8:	465b      	mov	r3, fp
 8006dea:	f7f9 fb75 	bl	80004d8 <__aeabi_dmul>
 8006dee:	4682      	mov	sl, r0
 8006df0:	468b      	mov	fp, r1
 8006df2:	f034 040f 	bics.w	r4, r4, #15
 8006df6:	d073      	beq.n	8006ee0 <_strtod_l+0x510>
 8006df8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006dfc:	dd48      	ble.n	8006e90 <_strtod_l+0x4c0>
 8006dfe:	2400      	movs	r4, #0
 8006e00:	46a0      	mov	r8, r4
 8006e02:	46a1      	mov	r9, r4
 8006e04:	940a      	str	r4, [sp, #40]	@ 0x28
 8006e06:	2322      	movs	r3, #34	@ 0x22
 8006e08:	f04f 0a00 	mov.w	sl, #0
 8006e0c:	9a05      	ldr	r2, [sp, #20]
 8006e0e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006f54 <_strtod_l+0x584>
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f43f ae13 	beq.w	8006a42 <_strtod_l+0x72>
 8006e1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e1e:	9805      	ldr	r0, [sp, #20]
 8006e20:	f7ff f94c 	bl	80060bc <_Bfree>
 8006e24:	4649      	mov	r1, r9
 8006e26:	9805      	ldr	r0, [sp, #20]
 8006e28:	f7ff f948 	bl	80060bc <_Bfree>
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	9805      	ldr	r0, [sp, #20]
 8006e30:	f7ff f944 	bl	80060bc <_Bfree>
 8006e34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006e36:	9805      	ldr	r0, [sp, #20]
 8006e38:	f7ff f940 	bl	80060bc <_Bfree>
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	9805      	ldr	r0, [sp, #20]
 8006e40:	f7ff f93c 	bl	80060bc <_Bfree>
 8006e44:	e5fd      	b.n	8006a42 <_strtod_l+0x72>
 8006e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	dbbc      	blt.n	8006dca <_strtod_l+0x3fa>
 8006e50:	4c42      	ldr	r4, [pc, #264]	@ (8006f5c <_strtod_l+0x58c>)
 8006e52:	f1c5 050f 	rsb	r5, r5, #15
 8006e56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e60:	465b      	mov	r3, fp
 8006e62:	f7f9 fb39 	bl	80004d8 <__aeabi_dmul>
 8006e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e68:	1b5d      	subs	r5, r3, r5
 8006e6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e72:	e791      	b.n	8006d98 <_strtod_l+0x3c8>
 8006e74:	3316      	adds	r3, #22
 8006e76:	dba8      	blt.n	8006dca <_strtod_l+0x3fa>
 8006e78:	4b38      	ldr	r3, [pc, #224]	@ (8006f5c <_strtod_l+0x58c>)
 8006e7a:	eba9 0808 	sub.w	r8, r9, r8
 8006e7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006e82:	4650      	mov	r0, sl
 8006e84:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006e88:	4659      	mov	r1, fp
 8006e8a:	f7f9 fc4f 	bl	800072c <__aeabi_ddiv>
 8006e8e:	e760      	b.n	8006d52 <_strtod_l+0x382>
 8006e90:	4b33      	ldr	r3, [pc, #204]	@ (8006f60 <_strtod_l+0x590>)
 8006e92:	4650      	mov	r0, sl
 8006e94:	9308      	str	r3, [sp, #32]
 8006e96:	2300      	movs	r3, #0
 8006e98:	4659      	mov	r1, fp
 8006e9a:	461e      	mov	r6, r3
 8006e9c:	1124      	asrs	r4, r4, #4
 8006e9e:	2c01      	cmp	r4, #1
 8006ea0:	dc21      	bgt.n	8006ee6 <_strtod_l+0x516>
 8006ea2:	b10b      	cbz	r3, 8006ea8 <_strtod_l+0x4d8>
 8006ea4:	4682      	mov	sl, r0
 8006ea6:	468b      	mov	fp, r1
 8006ea8:	492d      	ldr	r1, [pc, #180]	@ (8006f60 <_strtod_l+0x590>)
 8006eaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006eae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006eb2:	4652      	mov	r2, sl
 8006eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eb8:	465b      	mov	r3, fp
 8006eba:	f7f9 fb0d 	bl	80004d8 <__aeabi_dmul>
 8006ebe:	4b25      	ldr	r3, [pc, #148]	@ (8006f54 <_strtod_l+0x584>)
 8006ec0:	460a      	mov	r2, r1
 8006ec2:	400b      	ands	r3, r1
 8006ec4:	4927      	ldr	r1, [pc, #156]	@ (8006f64 <_strtod_l+0x594>)
 8006ec6:	4682      	mov	sl, r0
 8006ec8:	428b      	cmp	r3, r1
 8006eca:	d898      	bhi.n	8006dfe <_strtod_l+0x42e>
 8006ecc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	bf86      	itte	hi
 8006ed4:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ed8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006f68 <_strtod_l+0x598>
 8006edc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9308      	str	r3, [sp, #32]
 8006ee4:	e07a      	b.n	8006fdc <_strtod_l+0x60c>
 8006ee6:	07e2      	lsls	r2, r4, #31
 8006ee8:	d505      	bpl.n	8006ef6 <_strtod_l+0x526>
 8006eea:	9b08      	ldr	r3, [sp, #32]
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 faf2 	bl	80004d8 <__aeabi_dmul>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	9a08      	ldr	r2, [sp, #32]
 8006ef8:	3601      	adds	r6, #1
 8006efa:	3208      	adds	r2, #8
 8006efc:	1064      	asrs	r4, r4, #1
 8006efe:	9208      	str	r2, [sp, #32]
 8006f00:	e7cd      	b.n	8006e9e <_strtod_l+0x4ce>
 8006f02:	d0ed      	beq.n	8006ee0 <_strtod_l+0x510>
 8006f04:	4264      	negs	r4, r4
 8006f06:	f014 020f 	ands.w	r2, r4, #15
 8006f0a:	d00a      	beq.n	8006f22 <_strtod_l+0x552>
 8006f0c:	4b13      	ldr	r3, [pc, #76]	@ (8006f5c <_strtod_l+0x58c>)
 8006f0e:	4650      	mov	r0, sl
 8006f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f14:	4659      	mov	r1, fp
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	f7f9 fc07 	bl	800072c <__aeabi_ddiv>
 8006f1e:	4682      	mov	sl, r0
 8006f20:	468b      	mov	fp, r1
 8006f22:	1124      	asrs	r4, r4, #4
 8006f24:	d0dc      	beq.n	8006ee0 <_strtod_l+0x510>
 8006f26:	2c1f      	cmp	r4, #31
 8006f28:	dd20      	ble.n	8006f6c <_strtod_l+0x59c>
 8006f2a:	2400      	movs	r4, #0
 8006f2c:	46a0      	mov	r8, r4
 8006f2e:	46a1      	mov	r9, r4
 8006f30:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f32:	2322      	movs	r3, #34	@ 0x22
 8006f34:	9a05      	ldr	r2, [sp, #20]
 8006f36:	f04f 0a00 	mov.w	sl, #0
 8006f3a:	f04f 0b00 	mov.w	fp, #0
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	e768      	b.n	8006e14 <_strtod_l+0x444>
 8006f42:	bf00      	nop
 8006f44:	080088a3 	.word	0x080088a3
 8006f48:	08008abc 	.word	0x08008abc
 8006f4c:	0800889b 	.word	0x0800889b
 8006f50:	080088d2 	.word	0x080088d2
 8006f54:	7ff00000 	.word	0x7ff00000
 8006f58:	08008c65 	.word	0x08008c65
 8006f5c:	080089f0 	.word	0x080089f0
 8006f60:	080089c8 	.word	0x080089c8
 8006f64:	7ca00000 	.word	0x7ca00000
 8006f68:	7fefffff 	.word	0x7fefffff
 8006f6c:	f014 0310 	ands.w	r3, r4, #16
 8006f70:	bf18      	it	ne
 8006f72:	236a      	movne	r3, #106	@ 0x6a
 8006f74:	4650      	mov	r0, sl
 8006f76:	9308      	str	r3, [sp, #32]
 8006f78:	4659      	mov	r1, fp
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4ea9      	ldr	r6, [pc, #676]	@ (8007224 <_strtod_l+0x854>)
 8006f7e:	07e2      	lsls	r2, r4, #31
 8006f80:	d504      	bpl.n	8006f8c <_strtod_l+0x5bc>
 8006f82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f86:	f7f9 faa7 	bl	80004d8 <__aeabi_dmul>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	1064      	asrs	r4, r4, #1
 8006f8e:	f106 0608 	add.w	r6, r6, #8
 8006f92:	d1f4      	bne.n	8006f7e <_strtod_l+0x5ae>
 8006f94:	b10b      	cbz	r3, 8006f9a <_strtod_l+0x5ca>
 8006f96:	4682      	mov	sl, r0
 8006f98:	468b      	mov	fp, r1
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	b1b3      	cbz	r3, 8006fcc <_strtod_l+0x5fc>
 8006f9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006fa2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	4659      	mov	r1, fp
 8006faa:	dd0f      	ble.n	8006fcc <_strtod_l+0x5fc>
 8006fac:	2b1f      	cmp	r3, #31
 8006fae:	dd57      	ble.n	8007060 <_strtod_l+0x690>
 8006fb0:	2b34      	cmp	r3, #52	@ 0x34
 8006fb2:	bfd8      	it	le
 8006fb4:	f04f 33ff 	movle.w	r3, #4294967295
 8006fb8:	f04f 0a00 	mov.w	sl, #0
 8006fbc:	bfcf      	iteee	gt
 8006fbe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006fc2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006fc6:	4093      	lslle	r3, r2
 8006fc8:	ea03 0b01 	andle.w	fp, r3, r1
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	f7f9 fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d1a6      	bne.n	8006f2a <_strtod_l+0x55a>
 8006fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fde:	463a      	mov	r2, r7
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	9805      	ldr	r0, [sp, #20]
 8006fe8:	f7ff f8d0 	bl	800618c <__s2b>
 8006fec:	900a      	str	r0, [sp, #40]	@ 0x28
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f af05 	beq.w	8006dfe <_strtod_l+0x42e>
 8006ff4:	2400      	movs	r4, #0
 8006ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ff8:	eba9 0308 	sub.w	r3, r9, r8
 8006ffc:	2a00      	cmp	r2, #0
 8006ffe:	bfa8      	it	ge
 8007000:	2300      	movge	r3, #0
 8007002:	46a0      	mov	r8, r4
 8007004:	9312      	str	r3, [sp, #72]	@ 0x48
 8007006:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800700a:	9316      	str	r3, [sp, #88]	@ 0x58
 800700c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800700e:	9805      	ldr	r0, [sp, #20]
 8007010:	6859      	ldr	r1, [r3, #4]
 8007012:	f7ff f813 	bl	800603c <_Balloc>
 8007016:	4681      	mov	r9, r0
 8007018:	2800      	cmp	r0, #0
 800701a:	f43f aef4 	beq.w	8006e06 <_strtod_l+0x436>
 800701e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007020:	300c      	adds	r0, #12
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	f103 010c 	add.w	r1, r3, #12
 8007028:	3202      	adds	r2, #2
 800702a:	0092      	lsls	r2, r2, #2
 800702c:	f000 fd66 	bl	8007afc <memcpy>
 8007030:	ab1c      	add	r3, sp, #112	@ 0x70
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4652      	mov	r2, sl
 800703a:	465b      	mov	r3, fp
 800703c:	9805      	ldr	r0, [sp, #20]
 800703e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007042:	f7ff fbd5 	bl	80067f0 <__d2b>
 8007046:	901a      	str	r0, [sp, #104]	@ 0x68
 8007048:	2800      	cmp	r0, #0
 800704a:	f43f aedc 	beq.w	8006e06 <_strtod_l+0x436>
 800704e:	2101      	movs	r1, #1
 8007050:	9805      	ldr	r0, [sp, #20]
 8007052:	f7ff f931 	bl	80062b8 <__i2b>
 8007056:	4680      	mov	r8, r0
 8007058:	b948      	cbnz	r0, 800706e <_strtod_l+0x69e>
 800705a:	f04f 0800 	mov.w	r8, #0
 800705e:	e6d2      	b.n	8006e06 <_strtod_l+0x436>
 8007060:	f04f 32ff 	mov.w	r2, #4294967295
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	ea03 0a0a 	and.w	sl, r3, sl
 800706c:	e7ae      	b.n	8006fcc <_strtod_l+0x5fc>
 800706e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007070:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007072:	2d00      	cmp	r5, #0
 8007074:	bfab      	itete	ge
 8007076:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007078:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800707a:	18ef      	addge	r7, r5, r3
 800707c:	1b5e      	sublt	r6, r3, r5
 800707e:	9b08      	ldr	r3, [sp, #32]
 8007080:	bfa8      	it	ge
 8007082:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007084:	eba5 0503 	sub.w	r5, r5, r3
 8007088:	4415      	add	r5, r2
 800708a:	4b67      	ldr	r3, [pc, #412]	@ (8007228 <_strtod_l+0x858>)
 800708c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007090:	bfb8      	it	lt
 8007092:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007094:	429d      	cmp	r5, r3
 8007096:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800709a:	da50      	bge.n	800713e <_strtod_l+0x76e>
 800709c:	1b5b      	subs	r3, r3, r5
 800709e:	2b1f      	cmp	r3, #31
 80070a0:	f04f 0101 	mov.w	r1, #1
 80070a4:	eba2 0203 	sub.w	r2, r2, r3
 80070a8:	dc3d      	bgt.n	8007126 <_strtod_l+0x756>
 80070aa:	fa01 f303 	lsl.w	r3, r1, r3
 80070ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070b0:	2300      	movs	r3, #0
 80070b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80070b4:	18bd      	adds	r5, r7, r2
 80070b6:	9b08      	ldr	r3, [sp, #32]
 80070b8:	42af      	cmp	r7, r5
 80070ba:	4416      	add	r6, r2
 80070bc:	441e      	add	r6, r3
 80070be:	463b      	mov	r3, r7
 80070c0:	bfa8      	it	ge
 80070c2:	462b      	movge	r3, r5
 80070c4:	42b3      	cmp	r3, r6
 80070c6:	bfa8      	it	ge
 80070c8:	4633      	movge	r3, r6
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	bfc2      	ittt	gt
 80070ce:	1aed      	subgt	r5, r5, r3
 80070d0:	1af6      	subgt	r6, r6, r3
 80070d2:	1aff      	subgt	r7, r7, r3
 80070d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	dd16      	ble.n	8007108 <_strtod_l+0x738>
 80070da:	4641      	mov	r1, r8
 80070dc:	461a      	mov	r2, r3
 80070de:	9805      	ldr	r0, [sp, #20]
 80070e0:	f7ff f9a8 	bl	8006434 <__pow5mult>
 80070e4:	4680      	mov	r8, r0
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d0b7      	beq.n	800705a <_strtod_l+0x68a>
 80070ea:	4601      	mov	r1, r0
 80070ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80070ee:	9805      	ldr	r0, [sp, #20]
 80070f0:	f7ff f8f8 	bl	80062e4 <__multiply>
 80070f4:	900e      	str	r0, [sp, #56]	@ 0x38
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f43f ae85 	beq.w	8006e06 <_strtod_l+0x436>
 80070fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070fe:	9805      	ldr	r0, [sp, #20]
 8007100:	f7fe ffdc 	bl	80060bc <_Bfree>
 8007104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007106:	931a      	str	r3, [sp, #104]	@ 0x68
 8007108:	2d00      	cmp	r5, #0
 800710a:	dc1d      	bgt.n	8007148 <_strtod_l+0x778>
 800710c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd23      	ble.n	800715a <_strtod_l+0x78a>
 8007112:	4649      	mov	r1, r9
 8007114:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007116:	9805      	ldr	r0, [sp, #20]
 8007118:	f7ff f98c 	bl	8006434 <__pow5mult>
 800711c:	4681      	mov	r9, r0
 800711e:	b9e0      	cbnz	r0, 800715a <_strtod_l+0x78a>
 8007120:	f04f 0900 	mov.w	r9, #0
 8007124:	e66f      	b.n	8006e06 <_strtod_l+0x436>
 8007126:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800712a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800712e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007132:	35e2      	adds	r5, #226	@ 0xe2
 8007134:	fa01 f305 	lsl.w	r3, r1, r5
 8007138:	9310      	str	r3, [sp, #64]	@ 0x40
 800713a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800713c:	e7ba      	b.n	80070b4 <_strtod_l+0x6e4>
 800713e:	2300      	movs	r3, #0
 8007140:	9310      	str	r3, [sp, #64]	@ 0x40
 8007142:	2301      	movs	r3, #1
 8007144:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007146:	e7b5      	b.n	80070b4 <_strtod_l+0x6e4>
 8007148:	462a      	mov	r2, r5
 800714a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800714c:	9805      	ldr	r0, [sp, #20]
 800714e:	f7ff f9cb 	bl	80064e8 <__lshift>
 8007152:	901a      	str	r0, [sp, #104]	@ 0x68
 8007154:	2800      	cmp	r0, #0
 8007156:	d1d9      	bne.n	800710c <_strtod_l+0x73c>
 8007158:	e655      	b.n	8006e06 <_strtod_l+0x436>
 800715a:	2e00      	cmp	r6, #0
 800715c:	dd07      	ble.n	800716e <_strtod_l+0x79e>
 800715e:	4649      	mov	r1, r9
 8007160:	4632      	mov	r2, r6
 8007162:	9805      	ldr	r0, [sp, #20]
 8007164:	f7ff f9c0 	bl	80064e8 <__lshift>
 8007168:	4681      	mov	r9, r0
 800716a:	2800      	cmp	r0, #0
 800716c:	d0d8      	beq.n	8007120 <_strtod_l+0x750>
 800716e:	2f00      	cmp	r7, #0
 8007170:	dd08      	ble.n	8007184 <_strtod_l+0x7b4>
 8007172:	4641      	mov	r1, r8
 8007174:	463a      	mov	r2, r7
 8007176:	9805      	ldr	r0, [sp, #20]
 8007178:	f7ff f9b6 	bl	80064e8 <__lshift>
 800717c:	4680      	mov	r8, r0
 800717e:	2800      	cmp	r0, #0
 8007180:	f43f ae41 	beq.w	8006e06 <_strtod_l+0x436>
 8007184:	464a      	mov	r2, r9
 8007186:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007188:	9805      	ldr	r0, [sp, #20]
 800718a:	f7ff fa35 	bl	80065f8 <__mdiff>
 800718e:	4604      	mov	r4, r0
 8007190:	2800      	cmp	r0, #0
 8007192:	f43f ae38 	beq.w	8006e06 <_strtod_l+0x436>
 8007196:	68c3      	ldr	r3, [r0, #12]
 8007198:	4641      	mov	r1, r8
 800719a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800719c:	2300      	movs	r3, #0
 800719e:	60c3      	str	r3, [r0, #12]
 80071a0:	f7ff fa0e 	bl	80065c0 <__mcmp>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	da45      	bge.n	8007234 <_strtod_l+0x864>
 80071a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071aa:	ea53 030a 	orrs.w	r3, r3, sl
 80071ae:	d16b      	bne.n	8007288 <_strtod_l+0x8b8>
 80071b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d167      	bne.n	8007288 <_strtod_l+0x8b8>
 80071b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071bc:	0d1b      	lsrs	r3, r3, #20
 80071be:	051b      	lsls	r3, r3, #20
 80071c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80071c4:	d960      	bls.n	8007288 <_strtod_l+0x8b8>
 80071c6:	6963      	ldr	r3, [r4, #20]
 80071c8:	b913      	cbnz	r3, 80071d0 <_strtod_l+0x800>
 80071ca:	6923      	ldr	r3, [r4, #16]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	dd5b      	ble.n	8007288 <_strtod_l+0x8b8>
 80071d0:	4621      	mov	r1, r4
 80071d2:	2201      	movs	r2, #1
 80071d4:	9805      	ldr	r0, [sp, #20]
 80071d6:	f7ff f987 	bl	80064e8 <__lshift>
 80071da:	4641      	mov	r1, r8
 80071dc:	4604      	mov	r4, r0
 80071de:	f7ff f9ef 	bl	80065c0 <__mcmp>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	dd50      	ble.n	8007288 <_strtod_l+0x8b8>
 80071e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071ea:	9a08      	ldr	r2, [sp, #32]
 80071ec:	0d1b      	lsrs	r3, r3, #20
 80071ee:	051b      	lsls	r3, r3, #20
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d06a      	beq.n	80072ca <_strtod_l+0x8fa>
 80071f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80071f8:	d867      	bhi.n	80072ca <_strtod_l+0x8fa>
 80071fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80071fe:	f67f ae98 	bls.w	8006f32 <_strtod_l+0x562>
 8007202:	4650      	mov	r0, sl
 8007204:	4659      	mov	r1, fp
 8007206:	4b09      	ldr	r3, [pc, #36]	@ (800722c <_strtod_l+0x85c>)
 8007208:	2200      	movs	r2, #0
 800720a:	f7f9 f965 	bl	80004d8 <__aeabi_dmul>
 800720e:	4b08      	ldr	r3, [pc, #32]	@ (8007230 <_strtod_l+0x860>)
 8007210:	4682      	mov	sl, r0
 8007212:	400b      	ands	r3, r1
 8007214:	468b      	mov	fp, r1
 8007216:	2b00      	cmp	r3, #0
 8007218:	f47f ae00 	bne.w	8006e1c <_strtod_l+0x44c>
 800721c:	2322      	movs	r3, #34	@ 0x22
 800721e:	9a05      	ldr	r2, [sp, #20]
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	e5fb      	b.n	8006e1c <_strtod_l+0x44c>
 8007224:	08008ae8 	.word	0x08008ae8
 8007228:	fffffc02 	.word	0xfffffc02
 800722c:	39500000 	.word	0x39500000
 8007230:	7ff00000 	.word	0x7ff00000
 8007234:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007238:	d165      	bne.n	8007306 <_strtod_l+0x936>
 800723a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800723c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007240:	b35a      	cbz	r2, 800729a <_strtod_l+0x8ca>
 8007242:	4a99      	ldr	r2, [pc, #612]	@ (80074a8 <_strtod_l+0xad8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d12b      	bne.n	80072a0 <_strtod_l+0x8d0>
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	4651      	mov	r1, sl
 800724c:	b303      	cbz	r3, 8007290 <_strtod_l+0x8c0>
 800724e:	465a      	mov	r2, fp
 8007250:	4b96      	ldr	r3, [pc, #600]	@ (80074ac <_strtod_l+0xadc>)
 8007252:	4013      	ands	r3, r2
 8007254:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007258:	f04f 32ff 	mov.w	r2, #4294967295
 800725c:	d81b      	bhi.n	8007296 <_strtod_l+0x8c6>
 800725e:	0d1b      	lsrs	r3, r3, #20
 8007260:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007264:	fa02 f303 	lsl.w	r3, r2, r3
 8007268:	4299      	cmp	r1, r3
 800726a:	d119      	bne.n	80072a0 <_strtod_l+0x8d0>
 800726c:	4b90      	ldr	r3, [pc, #576]	@ (80074b0 <_strtod_l+0xae0>)
 800726e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007270:	429a      	cmp	r2, r3
 8007272:	d102      	bne.n	800727a <_strtod_l+0x8aa>
 8007274:	3101      	adds	r1, #1
 8007276:	f43f adc6 	beq.w	8006e06 <_strtod_l+0x436>
 800727a:	f04f 0a00 	mov.w	sl, #0
 800727e:	4b8b      	ldr	r3, [pc, #556]	@ (80074ac <_strtod_l+0xadc>)
 8007280:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007282:	401a      	ands	r2, r3
 8007284:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007288:	9b08      	ldr	r3, [sp, #32]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1b9      	bne.n	8007202 <_strtod_l+0x832>
 800728e:	e5c5      	b.n	8006e1c <_strtod_l+0x44c>
 8007290:	f04f 33ff 	mov.w	r3, #4294967295
 8007294:	e7e8      	b.n	8007268 <_strtod_l+0x898>
 8007296:	4613      	mov	r3, r2
 8007298:	e7e6      	b.n	8007268 <_strtod_l+0x898>
 800729a:	ea53 030a 	orrs.w	r3, r3, sl
 800729e:	d0a2      	beq.n	80071e6 <_strtod_l+0x816>
 80072a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072a2:	b1db      	cbz	r3, 80072dc <_strtod_l+0x90c>
 80072a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072a6:	4213      	tst	r3, r2
 80072a8:	d0ee      	beq.n	8007288 <_strtod_l+0x8b8>
 80072aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ac:	4650      	mov	r0, sl
 80072ae:	4659      	mov	r1, fp
 80072b0:	9a08      	ldr	r2, [sp, #32]
 80072b2:	b1bb      	cbz	r3, 80072e4 <_strtod_l+0x914>
 80072b4:	f7ff fb68 	bl	8006988 <sulp>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072c0:	f7f8 ff54 	bl	800016c <__adddf3>
 80072c4:	4682      	mov	sl, r0
 80072c6:	468b      	mov	fp, r1
 80072c8:	e7de      	b.n	8007288 <_strtod_l+0x8b8>
 80072ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80072ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80072d2:	f04f 3aff 	mov.w	sl, #4294967295
 80072d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80072da:	e7d5      	b.n	8007288 <_strtod_l+0x8b8>
 80072dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072de:	ea13 0f0a 	tst.w	r3, sl
 80072e2:	e7e1      	b.n	80072a8 <_strtod_l+0x8d8>
 80072e4:	f7ff fb50 	bl	8006988 <sulp>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072f0:	f7f8 ff3a 	bl	8000168 <__aeabi_dsub>
 80072f4:	2200      	movs	r2, #0
 80072f6:	2300      	movs	r3, #0
 80072f8:	4682      	mov	sl, r0
 80072fa:	468b      	mov	fp, r1
 80072fc:	f7f9 fb54 	bl	80009a8 <__aeabi_dcmpeq>
 8007300:	2800      	cmp	r0, #0
 8007302:	d0c1      	beq.n	8007288 <_strtod_l+0x8b8>
 8007304:	e615      	b.n	8006f32 <_strtod_l+0x562>
 8007306:	4641      	mov	r1, r8
 8007308:	4620      	mov	r0, r4
 800730a:	f7ff fac9 	bl	80068a0 <__ratio>
 800730e:	2200      	movs	r2, #0
 8007310:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007314:	4606      	mov	r6, r0
 8007316:	460f      	mov	r7, r1
 8007318:	f7f9 fb5a 	bl	80009d0 <__aeabi_dcmple>
 800731c:	2800      	cmp	r0, #0
 800731e:	d06d      	beq.n	80073fc <_strtod_l+0xa2c>
 8007320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d178      	bne.n	8007418 <_strtod_l+0xa48>
 8007326:	f1ba 0f00 	cmp.w	sl, #0
 800732a:	d156      	bne.n	80073da <_strtod_l+0xa0a>
 800732c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800732e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007332:	2b00      	cmp	r3, #0
 8007334:	d158      	bne.n	80073e8 <_strtod_l+0xa18>
 8007336:	2200      	movs	r2, #0
 8007338:	4630      	mov	r0, r6
 800733a:	4639      	mov	r1, r7
 800733c:	4b5d      	ldr	r3, [pc, #372]	@ (80074b4 <_strtod_l+0xae4>)
 800733e:	f7f9 fb3d 	bl	80009bc <__aeabi_dcmplt>
 8007342:	2800      	cmp	r0, #0
 8007344:	d157      	bne.n	80073f6 <_strtod_l+0xa26>
 8007346:	4630      	mov	r0, r6
 8007348:	4639      	mov	r1, r7
 800734a:	2200      	movs	r2, #0
 800734c:	4b5a      	ldr	r3, [pc, #360]	@ (80074b8 <_strtod_l+0xae8>)
 800734e:	f7f9 f8c3 	bl	80004d8 <__aeabi_dmul>
 8007352:	4606      	mov	r6, r0
 8007354:	460f      	mov	r7, r1
 8007356:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800735a:	9606      	str	r6, [sp, #24]
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007362:	4d52      	ldr	r5, [pc, #328]	@ (80074ac <_strtod_l+0xadc>)
 8007364:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800736a:	401d      	ands	r5, r3
 800736c:	4b53      	ldr	r3, [pc, #332]	@ (80074bc <_strtod_l+0xaec>)
 800736e:	429d      	cmp	r5, r3
 8007370:	f040 80aa 	bne.w	80074c8 <_strtod_l+0xaf8>
 8007374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007376:	4650      	mov	r0, sl
 8007378:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800737c:	4659      	mov	r1, fp
 800737e:	f7ff f9cf 	bl	8006720 <__ulp>
 8007382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007386:	f7f9 f8a7 	bl	80004d8 <__aeabi_dmul>
 800738a:	4652      	mov	r2, sl
 800738c:	465b      	mov	r3, fp
 800738e:	f7f8 feed 	bl	800016c <__adddf3>
 8007392:	460b      	mov	r3, r1
 8007394:	4945      	ldr	r1, [pc, #276]	@ (80074ac <_strtod_l+0xadc>)
 8007396:	4a4a      	ldr	r2, [pc, #296]	@ (80074c0 <_strtod_l+0xaf0>)
 8007398:	4019      	ands	r1, r3
 800739a:	4291      	cmp	r1, r2
 800739c:	4682      	mov	sl, r0
 800739e:	d942      	bls.n	8007426 <_strtod_l+0xa56>
 80073a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073a2:	4b43      	ldr	r3, [pc, #268]	@ (80074b0 <_strtod_l+0xae0>)
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d103      	bne.n	80073b0 <_strtod_l+0x9e0>
 80073a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073aa:	3301      	adds	r3, #1
 80073ac:	f43f ad2b 	beq.w	8006e06 <_strtod_l+0x436>
 80073b0:	f04f 3aff 	mov.w	sl, #4294967295
 80073b4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80074b0 <_strtod_l+0xae0>
 80073b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073ba:	9805      	ldr	r0, [sp, #20]
 80073bc:	f7fe fe7e 	bl	80060bc <_Bfree>
 80073c0:	4649      	mov	r1, r9
 80073c2:	9805      	ldr	r0, [sp, #20]
 80073c4:	f7fe fe7a 	bl	80060bc <_Bfree>
 80073c8:	4641      	mov	r1, r8
 80073ca:	9805      	ldr	r0, [sp, #20]
 80073cc:	f7fe fe76 	bl	80060bc <_Bfree>
 80073d0:	4621      	mov	r1, r4
 80073d2:	9805      	ldr	r0, [sp, #20]
 80073d4:	f7fe fe72 	bl	80060bc <_Bfree>
 80073d8:	e618      	b.n	800700c <_strtod_l+0x63c>
 80073da:	f1ba 0f01 	cmp.w	sl, #1
 80073de:	d103      	bne.n	80073e8 <_strtod_l+0xa18>
 80073e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f43f ada5 	beq.w	8006f32 <_strtod_l+0x562>
 80073e8:	2200      	movs	r2, #0
 80073ea:	4b36      	ldr	r3, [pc, #216]	@ (80074c4 <_strtod_l+0xaf4>)
 80073ec:	2600      	movs	r6, #0
 80073ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80073f2:	4f30      	ldr	r7, [pc, #192]	@ (80074b4 <_strtod_l+0xae4>)
 80073f4:	e7b3      	b.n	800735e <_strtod_l+0x98e>
 80073f6:	2600      	movs	r6, #0
 80073f8:	4f2f      	ldr	r7, [pc, #188]	@ (80074b8 <_strtod_l+0xae8>)
 80073fa:	e7ac      	b.n	8007356 <_strtod_l+0x986>
 80073fc:	4630      	mov	r0, r6
 80073fe:	4639      	mov	r1, r7
 8007400:	4b2d      	ldr	r3, [pc, #180]	@ (80074b8 <_strtod_l+0xae8>)
 8007402:	2200      	movs	r2, #0
 8007404:	f7f9 f868 	bl	80004d8 <__aeabi_dmul>
 8007408:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0a1      	beq.n	8007356 <_strtod_l+0x986>
 8007412:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007416:	e7a2      	b.n	800735e <_strtod_l+0x98e>
 8007418:	2200      	movs	r2, #0
 800741a:	4b26      	ldr	r3, [pc, #152]	@ (80074b4 <_strtod_l+0xae4>)
 800741c:	4616      	mov	r6, r2
 800741e:	461f      	mov	r7, r3
 8007420:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007424:	e79b      	b.n	800735e <_strtod_l+0x98e>
 8007426:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800742a:	9b08      	ldr	r3, [sp, #32]
 800742c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1c1      	bne.n	80073b8 <_strtod_l+0x9e8>
 8007434:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007438:	0d1b      	lsrs	r3, r3, #20
 800743a:	051b      	lsls	r3, r3, #20
 800743c:	429d      	cmp	r5, r3
 800743e:	d1bb      	bne.n	80073b8 <_strtod_l+0x9e8>
 8007440:	4630      	mov	r0, r6
 8007442:	4639      	mov	r1, r7
 8007444:	f7f9 fc06 	bl	8000c54 <__aeabi_d2lz>
 8007448:	f7f9 f818 	bl	800047c <__aeabi_l2d>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4630      	mov	r0, r6
 8007452:	4639      	mov	r1, r7
 8007454:	f7f8 fe88 	bl	8000168 <__aeabi_dsub>
 8007458:	460b      	mov	r3, r1
 800745a:	4602      	mov	r2, r0
 800745c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007460:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007466:	ea46 060a 	orr.w	r6, r6, sl
 800746a:	431e      	orrs	r6, r3
 800746c:	d069      	beq.n	8007542 <_strtod_l+0xb72>
 800746e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007498 <_strtod_l+0xac8>)
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f7f9 faa2 	bl	80009bc <__aeabi_dcmplt>
 8007478:	2800      	cmp	r0, #0
 800747a:	f47f accf 	bne.w	8006e1c <_strtod_l+0x44c>
 800747e:	a308      	add	r3, pc, #32	@ (adr r3, 80074a0 <_strtod_l+0xad0>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007488:	f7f9 fab6 	bl	80009f8 <__aeabi_dcmpgt>
 800748c:	2800      	cmp	r0, #0
 800748e:	d093      	beq.n	80073b8 <_strtod_l+0x9e8>
 8007490:	e4c4      	b.n	8006e1c <_strtod_l+0x44c>
 8007492:	bf00      	nop
 8007494:	f3af 8000 	nop.w
 8007498:	94a03595 	.word	0x94a03595
 800749c:	3fdfffff 	.word	0x3fdfffff
 80074a0:	35afe535 	.word	0x35afe535
 80074a4:	3fe00000 	.word	0x3fe00000
 80074a8:	000fffff 	.word	0x000fffff
 80074ac:	7ff00000 	.word	0x7ff00000
 80074b0:	7fefffff 	.word	0x7fefffff
 80074b4:	3ff00000 	.word	0x3ff00000
 80074b8:	3fe00000 	.word	0x3fe00000
 80074bc:	7fe00000 	.word	0x7fe00000
 80074c0:	7c9fffff 	.word	0x7c9fffff
 80074c4:	bff00000 	.word	0xbff00000
 80074c8:	9b08      	ldr	r3, [sp, #32]
 80074ca:	b323      	cbz	r3, 8007516 <_strtod_l+0xb46>
 80074cc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80074d0:	d821      	bhi.n	8007516 <_strtod_l+0xb46>
 80074d2:	a327      	add	r3, pc, #156	@ (adr r3, 8007570 <_strtod_l+0xba0>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	4630      	mov	r0, r6
 80074da:	4639      	mov	r1, r7
 80074dc:	f7f9 fa78 	bl	80009d0 <__aeabi_dcmple>
 80074e0:	b1a0      	cbz	r0, 800750c <_strtod_l+0xb3c>
 80074e2:	4639      	mov	r1, r7
 80074e4:	4630      	mov	r0, r6
 80074e6:	f7f9 facf 	bl	8000a88 <__aeabi_d2uiz>
 80074ea:	2801      	cmp	r0, #1
 80074ec:	bf38      	it	cc
 80074ee:	2001      	movcc	r0, #1
 80074f0:	f7f8 ff78 	bl	80003e4 <__aeabi_ui2d>
 80074f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074f6:	4606      	mov	r6, r0
 80074f8:	460f      	mov	r7, r1
 80074fa:	b9fb      	cbnz	r3, 800753c <_strtod_l+0xb6c>
 80074fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007500:	9014      	str	r0, [sp, #80]	@ 0x50
 8007502:	9315      	str	r3, [sp, #84]	@ 0x54
 8007504:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007508:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800750c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800750e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007512:	1b5b      	subs	r3, r3, r5
 8007514:	9311      	str	r3, [sp, #68]	@ 0x44
 8007516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800751a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800751e:	f7ff f8ff 	bl	8006720 <__ulp>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4650      	mov	r0, sl
 8007528:	4659      	mov	r1, fp
 800752a:	f7f8 ffd5 	bl	80004d8 <__aeabi_dmul>
 800752e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007532:	f7f8 fe1b 	bl	800016c <__adddf3>
 8007536:	4682      	mov	sl, r0
 8007538:	468b      	mov	fp, r1
 800753a:	e776      	b.n	800742a <_strtod_l+0xa5a>
 800753c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007540:	e7e0      	b.n	8007504 <_strtod_l+0xb34>
 8007542:	a30d      	add	r3, pc, #52	@ (adr r3, 8007578 <_strtod_l+0xba8>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f7f9 fa38 	bl	80009bc <__aeabi_dcmplt>
 800754c:	e79e      	b.n	800748c <_strtod_l+0xabc>
 800754e:	2300      	movs	r3, #0
 8007550:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007554:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	f7ff ba77 	b.w	8006a4a <_strtod_l+0x7a>
 800755c:	2a65      	cmp	r2, #101	@ 0x65
 800755e:	f43f ab6e 	beq.w	8006c3e <_strtod_l+0x26e>
 8007562:	2a45      	cmp	r2, #69	@ 0x45
 8007564:	f43f ab6b 	beq.w	8006c3e <_strtod_l+0x26e>
 8007568:	2301      	movs	r3, #1
 800756a:	f7ff bba6 	b.w	8006cba <_strtod_l+0x2ea>
 800756e:	bf00      	nop
 8007570:	ffc00000 	.word	0xffc00000
 8007574:	41dfffff 	.word	0x41dfffff
 8007578:	94a03595 	.word	0x94a03595
 800757c:	3fcfffff 	.word	0x3fcfffff

08007580 <_strtod_r>:
 8007580:	4b01      	ldr	r3, [pc, #4]	@ (8007588 <_strtod_r+0x8>)
 8007582:	f7ff ba25 	b.w	80069d0 <_strtod_l>
 8007586:	bf00      	nop
 8007588:	2000006c 	.word	0x2000006c

0800758c <_strtol_l.constprop.0>:
 800758c:	2b24      	cmp	r3, #36	@ 0x24
 800758e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007592:	4686      	mov	lr, r0
 8007594:	4690      	mov	r8, r2
 8007596:	d801      	bhi.n	800759c <_strtol_l.constprop.0+0x10>
 8007598:	2b01      	cmp	r3, #1
 800759a:	d106      	bne.n	80075aa <_strtol_l.constprop.0+0x1e>
 800759c:	f7fd fdc0 	bl	8005120 <__errno>
 80075a0:	2316      	movs	r3, #22
 80075a2:	6003      	str	r3, [r0, #0]
 80075a4:	2000      	movs	r0, #0
 80075a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075aa:	460d      	mov	r5, r1
 80075ac:	4833      	ldr	r0, [pc, #204]	@ (800767c <_strtol_l.constprop.0+0xf0>)
 80075ae:	462a      	mov	r2, r5
 80075b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075b4:	5d06      	ldrb	r6, [r0, r4]
 80075b6:	f016 0608 	ands.w	r6, r6, #8
 80075ba:	d1f8      	bne.n	80075ae <_strtol_l.constprop.0+0x22>
 80075bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80075be:	d12d      	bne.n	800761c <_strtol_l.constprop.0+0x90>
 80075c0:	2601      	movs	r6, #1
 80075c2:	782c      	ldrb	r4, [r5, #0]
 80075c4:	1c95      	adds	r5, r2, #2
 80075c6:	f033 0210 	bics.w	r2, r3, #16
 80075ca:	d109      	bne.n	80075e0 <_strtol_l.constprop.0+0x54>
 80075cc:	2c30      	cmp	r4, #48	@ 0x30
 80075ce:	d12a      	bne.n	8007626 <_strtol_l.constprop.0+0x9a>
 80075d0:	782a      	ldrb	r2, [r5, #0]
 80075d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075d6:	2a58      	cmp	r2, #88	@ 0x58
 80075d8:	d125      	bne.n	8007626 <_strtol_l.constprop.0+0x9a>
 80075da:	2310      	movs	r3, #16
 80075dc:	786c      	ldrb	r4, [r5, #1]
 80075de:	3502      	adds	r5, #2
 80075e0:	2200      	movs	r2, #0
 80075e2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80075e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80075ea:	fbbc f9f3 	udiv	r9, ip, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80075f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80075f8:	2f09      	cmp	r7, #9
 80075fa:	d81b      	bhi.n	8007634 <_strtol_l.constprop.0+0xa8>
 80075fc:	463c      	mov	r4, r7
 80075fe:	42a3      	cmp	r3, r4
 8007600:	dd27      	ble.n	8007652 <_strtol_l.constprop.0+0xc6>
 8007602:	1c57      	adds	r7, r2, #1
 8007604:	d007      	beq.n	8007616 <_strtol_l.constprop.0+0x8a>
 8007606:	4581      	cmp	r9, r0
 8007608:	d320      	bcc.n	800764c <_strtol_l.constprop.0+0xc0>
 800760a:	d101      	bne.n	8007610 <_strtol_l.constprop.0+0x84>
 800760c:	45a2      	cmp	sl, r4
 800760e:	db1d      	blt.n	800764c <_strtol_l.constprop.0+0xc0>
 8007610:	2201      	movs	r2, #1
 8007612:	fb00 4003 	mla	r0, r0, r3, r4
 8007616:	f815 4b01 	ldrb.w	r4, [r5], #1
 800761a:	e7eb      	b.n	80075f4 <_strtol_l.constprop.0+0x68>
 800761c:	2c2b      	cmp	r4, #43	@ 0x2b
 800761e:	bf04      	itt	eq
 8007620:	782c      	ldrbeq	r4, [r5, #0]
 8007622:	1c95      	addeq	r5, r2, #2
 8007624:	e7cf      	b.n	80075c6 <_strtol_l.constprop.0+0x3a>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1da      	bne.n	80075e0 <_strtol_l.constprop.0+0x54>
 800762a:	2c30      	cmp	r4, #48	@ 0x30
 800762c:	bf0c      	ite	eq
 800762e:	2308      	moveq	r3, #8
 8007630:	230a      	movne	r3, #10
 8007632:	e7d5      	b.n	80075e0 <_strtol_l.constprop.0+0x54>
 8007634:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007638:	2f19      	cmp	r7, #25
 800763a:	d801      	bhi.n	8007640 <_strtol_l.constprop.0+0xb4>
 800763c:	3c37      	subs	r4, #55	@ 0x37
 800763e:	e7de      	b.n	80075fe <_strtol_l.constprop.0+0x72>
 8007640:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007644:	2f19      	cmp	r7, #25
 8007646:	d804      	bhi.n	8007652 <_strtol_l.constprop.0+0xc6>
 8007648:	3c57      	subs	r4, #87	@ 0x57
 800764a:	e7d8      	b.n	80075fe <_strtol_l.constprop.0+0x72>
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	e7e1      	b.n	8007616 <_strtol_l.constprop.0+0x8a>
 8007652:	1c53      	adds	r3, r2, #1
 8007654:	d108      	bne.n	8007668 <_strtol_l.constprop.0+0xdc>
 8007656:	2322      	movs	r3, #34	@ 0x22
 8007658:	4660      	mov	r0, ip
 800765a:	f8ce 3000 	str.w	r3, [lr]
 800765e:	f1b8 0f00 	cmp.w	r8, #0
 8007662:	d0a0      	beq.n	80075a6 <_strtol_l.constprop.0+0x1a>
 8007664:	1e69      	subs	r1, r5, #1
 8007666:	e006      	b.n	8007676 <_strtol_l.constprop.0+0xea>
 8007668:	b106      	cbz	r6, 800766c <_strtol_l.constprop.0+0xe0>
 800766a:	4240      	negs	r0, r0
 800766c:	f1b8 0f00 	cmp.w	r8, #0
 8007670:	d099      	beq.n	80075a6 <_strtol_l.constprop.0+0x1a>
 8007672:	2a00      	cmp	r2, #0
 8007674:	d1f6      	bne.n	8007664 <_strtol_l.constprop.0+0xd8>
 8007676:	f8c8 1000 	str.w	r1, [r8]
 800767a:	e794      	b.n	80075a6 <_strtol_l.constprop.0+0x1a>
 800767c:	08008b11 	.word	0x08008b11

08007680 <_strtol_r>:
 8007680:	f7ff bf84 	b.w	800758c <_strtol_l.constprop.0>

08007684 <__ssputs_r>:
 8007684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	461f      	mov	r7, r3
 800768a:	688e      	ldr	r6, [r1, #8]
 800768c:	4682      	mov	sl, r0
 800768e:	42be      	cmp	r6, r7
 8007690:	460c      	mov	r4, r1
 8007692:	4690      	mov	r8, r2
 8007694:	680b      	ldr	r3, [r1, #0]
 8007696:	d82d      	bhi.n	80076f4 <__ssputs_r+0x70>
 8007698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800769c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80076a0:	d026      	beq.n	80076f0 <__ssputs_r+0x6c>
 80076a2:	6965      	ldr	r5, [r4, #20]
 80076a4:	6909      	ldr	r1, [r1, #16]
 80076a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076aa:	eba3 0901 	sub.w	r9, r3, r1
 80076ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076b2:	1c7b      	adds	r3, r7, #1
 80076b4:	444b      	add	r3, r9
 80076b6:	106d      	asrs	r5, r5, #1
 80076b8:	429d      	cmp	r5, r3
 80076ba:	bf38      	it	cc
 80076bc:	461d      	movcc	r5, r3
 80076be:	0553      	lsls	r3, r2, #21
 80076c0:	d527      	bpl.n	8007712 <__ssputs_r+0x8e>
 80076c2:	4629      	mov	r1, r5
 80076c4:	f7fe fc2e 	bl	8005f24 <_malloc_r>
 80076c8:	4606      	mov	r6, r0
 80076ca:	b360      	cbz	r0, 8007726 <__ssputs_r+0xa2>
 80076cc:	464a      	mov	r2, r9
 80076ce:	6921      	ldr	r1, [r4, #16]
 80076d0:	f000 fa14 	bl	8007afc <memcpy>
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076de:	81a3      	strh	r3, [r4, #12]
 80076e0:	6126      	str	r6, [r4, #16]
 80076e2:	444e      	add	r6, r9
 80076e4:	6026      	str	r6, [r4, #0]
 80076e6:	463e      	mov	r6, r7
 80076e8:	6165      	str	r5, [r4, #20]
 80076ea:	eba5 0509 	sub.w	r5, r5, r9
 80076ee:	60a5      	str	r5, [r4, #8]
 80076f0:	42be      	cmp	r6, r7
 80076f2:	d900      	bls.n	80076f6 <__ssputs_r+0x72>
 80076f4:	463e      	mov	r6, r7
 80076f6:	4632      	mov	r2, r6
 80076f8:	4641      	mov	r1, r8
 80076fa:	6820      	ldr	r0, [r4, #0]
 80076fc:	f000 f9c2 	bl	8007a84 <memmove>
 8007700:	2000      	movs	r0, #0
 8007702:	68a3      	ldr	r3, [r4, #8]
 8007704:	1b9b      	subs	r3, r3, r6
 8007706:	60a3      	str	r3, [r4, #8]
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	4433      	add	r3, r6
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007712:	462a      	mov	r2, r5
 8007714:	f000 fd83 	bl	800821e <_realloc_r>
 8007718:	4606      	mov	r6, r0
 800771a:	2800      	cmp	r0, #0
 800771c:	d1e0      	bne.n	80076e0 <__ssputs_r+0x5c>
 800771e:	4650      	mov	r0, sl
 8007720:	6921      	ldr	r1, [r4, #16]
 8007722:	f7fe fb8d 	bl	8005e40 <_free_r>
 8007726:	230c      	movs	r3, #12
 8007728:	f8ca 3000 	str.w	r3, [sl]
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f04f 30ff 	mov.w	r0, #4294967295
 8007732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	e7e9      	b.n	800770e <__ssputs_r+0x8a>
	...

0800773c <_svfiprintf_r>:
 800773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	4698      	mov	r8, r3
 8007742:	898b      	ldrh	r3, [r1, #12]
 8007744:	4607      	mov	r7, r0
 8007746:	061b      	lsls	r3, r3, #24
 8007748:	460d      	mov	r5, r1
 800774a:	4614      	mov	r4, r2
 800774c:	b09d      	sub	sp, #116	@ 0x74
 800774e:	d510      	bpl.n	8007772 <_svfiprintf_r+0x36>
 8007750:	690b      	ldr	r3, [r1, #16]
 8007752:	b973      	cbnz	r3, 8007772 <_svfiprintf_r+0x36>
 8007754:	2140      	movs	r1, #64	@ 0x40
 8007756:	f7fe fbe5 	bl	8005f24 <_malloc_r>
 800775a:	6028      	str	r0, [r5, #0]
 800775c:	6128      	str	r0, [r5, #16]
 800775e:	b930      	cbnz	r0, 800776e <_svfiprintf_r+0x32>
 8007760:	230c      	movs	r3, #12
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	b01d      	add	sp, #116	@ 0x74
 800776a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776e:	2340      	movs	r3, #64	@ 0x40
 8007770:	616b      	str	r3, [r5, #20]
 8007772:	2300      	movs	r3, #0
 8007774:	9309      	str	r3, [sp, #36]	@ 0x24
 8007776:	2320      	movs	r3, #32
 8007778:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800777c:	2330      	movs	r3, #48	@ 0x30
 800777e:	f04f 0901 	mov.w	r9, #1
 8007782:	f8cd 800c 	str.w	r8, [sp, #12]
 8007786:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007920 <_svfiprintf_r+0x1e4>
 800778a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800778e:	4623      	mov	r3, r4
 8007790:	469a      	mov	sl, r3
 8007792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007796:	b10a      	cbz	r2, 800779c <_svfiprintf_r+0x60>
 8007798:	2a25      	cmp	r2, #37	@ 0x25
 800779a:	d1f9      	bne.n	8007790 <_svfiprintf_r+0x54>
 800779c:	ebba 0b04 	subs.w	fp, sl, r4
 80077a0:	d00b      	beq.n	80077ba <_svfiprintf_r+0x7e>
 80077a2:	465b      	mov	r3, fp
 80077a4:	4622      	mov	r2, r4
 80077a6:	4629      	mov	r1, r5
 80077a8:	4638      	mov	r0, r7
 80077aa:	f7ff ff6b 	bl	8007684 <__ssputs_r>
 80077ae:	3001      	adds	r0, #1
 80077b0:	f000 80a7 	beq.w	8007902 <_svfiprintf_r+0x1c6>
 80077b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077b6:	445a      	add	r2, fp
 80077b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80077ba:	f89a 3000 	ldrb.w	r3, [sl]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 809f 	beq.w	8007902 <_svfiprintf_r+0x1c6>
 80077c4:	2300      	movs	r3, #0
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ce:	f10a 0a01 	add.w	sl, sl, #1
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	9307      	str	r3, [sp, #28]
 80077d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077da:	931a      	str	r3, [sp, #104]	@ 0x68
 80077dc:	4654      	mov	r4, sl
 80077de:	2205      	movs	r2, #5
 80077e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e4:	484e      	ldr	r0, [pc, #312]	@ (8007920 <_svfiprintf_r+0x1e4>)
 80077e6:	f7fd fcc8 	bl	800517a <memchr>
 80077ea:	9a04      	ldr	r2, [sp, #16]
 80077ec:	b9d8      	cbnz	r0, 8007826 <_svfiprintf_r+0xea>
 80077ee:	06d0      	lsls	r0, r2, #27
 80077f0:	bf44      	itt	mi
 80077f2:	2320      	movmi	r3, #32
 80077f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077f8:	0711      	lsls	r1, r2, #28
 80077fa:	bf44      	itt	mi
 80077fc:	232b      	movmi	r3, #43	@ 0x2b
 80077fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007802:	f89a 3000 	ldrb.w	r3, [sl]
 8007806:	2b2a      	cmp	r3, #42	@ 0x2a
 8007808:	d015      	beq.n	8007836 <_svfiprintf_r+0xfa>
 800780a:	4654      	mov	r4, sl
 800780c:	2000      	movs	r0, #0
 800780e:	f04f 0c0a 	mov.w	ip, #10
 8007812:	9a07      	ldr	r2, [sp, #28]
 8007814:	4621      	mov	r1, r4
 8007816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800781a:	3b30      	subs	r3, #48	@ 0x30
 800781c:	2b09      	cmp	r3, #9
 800781e:	d94b      	bls.n	80078b8 <_svfiprintf_r+0x17c>
 8007820:	b1b0      	cbz	r0, 8007850 <_svfiprintf_r+0x114>
 8007822:	9207      	str	r2, [sp, #28]
 8007824:	e014      	b.n	8007850 <_svfiprintf_r+0x114>
 8007826:	eba0 0308 	sub.w	r3, r0, r8
 800782a:	fa09 f303 	lsl.w	r3, r9, r3
 800782e:	4313      	orrs	r3, r2
 8007830:	46a2      	mov	sl, r4
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	e7d2      	b.n	80077dc <_svfiprintf_r+0xa0>
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	1d19      	adds	r1, r3, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	9103      	str	r1, [sp, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfbb      	ittet	lt
 8007842:	425b      	neglt	r3, r3
 8007844:	f042 0202 	orrlt.w	r2, r2, #2
 8007848:	9307      	strge	r3, [sp, #28]
 800784a:	9307      	strlt	r3, [sp, #28]
 800784c:	bfb8      	it	lt
 800784e:	9204      	strlt	r2, [sp, #16]
 8007850:	7823      	ldrb	r3, [r4, #0]
 8007852:	2b2e      	cmp	r3, #46	@ 0x2e
 8007854:	d10a      	bne.n	800786c <_svfiprintf_r+0x130>
 8007856:	7863      	ldrb	r3, [r4, #1]
 8007858:	2b2a      	cmp	r3, #42	@ 0x2a
 800785a:	d132      	bne.n	80078c2 <_svfiprintf_r+0x186>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	3402      	adds	r4, #2
 8007860:	1d1a      	adds	r2, r3, #4
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	9203      	str	r2, [sp, #12]
 8007866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007924 <_svfiprintf_r+0x1e8>
 8007870:	2203      	movs	r2, #3
 8007872:	4650      	mov	r0, sl
 8007874:	7821      	ldrb	r1, [r4, #0]
 8007876:	f7fd fc80 	bl	800517a <memchr>
 800787a:	b138      	cbz	r0, 800788c <_svfiprintf_r+0x150>
 800787c:	2240      	movs	r2, #64	@ 0x40
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	eba0 000a 	sub.w	r0, r0, sl
 8007884:	4082      	lsls	r2, r0
 8007886:	4313      	orrs	r3, r2
 8007888:	3401      	adds	r4, #1
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007890:	2206      	movs	r2, #6
 8007892:	4825      	ldr	r0, [pc, #148]	@ (8007928 <_svfiprintf_r+0x1ec>)
 8007894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007898:	f7fd fc6f 	bl	800517a <memchr>
 800789c:	2800      	cmp	r0, #0
 800789e:	d036      	beq.n	800790e <_svfiprintf_r+0x1d2>
 80078a0:	4b22      	ldr	r3, [pc, #136]	@ (800792c <_svfiprintf_r+0x1f0>)
 80078a2:	bb1b      	cbnz	r3, 80078ec <_svfiprintf_r+0x1b0>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	3307      	adds	r3, #7
 80078a8:	f023 0307 	bic.w	r3, r3, #7
 80078ac:	3308      	adds	r3, #8
 80078ae:	9303      	str	r3, [sp, #12]
 80078b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b2:	4433      	add	r3, r6
 80078b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078b6:	e76a      	b.n	800778e <_svfiprintf_r+0x52>
 80078b8:	460c      	mov	r4, r1
 80078ba:	2001      	movs	r0, #1
 80078bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80078c0:	e7a8      	b.n	8007814 <_svfiprintf_r+0xd8>
 80078c2:	2300      	movs	r3, #0
 80078c4:	f04f 0c0a 	mov.w	ip, #10
 80078c8:	4619      	mov	r1, r3
 80078ca:	3401      	adds	r4, #1
 80078cc:	9305      	str	r3, [sp, #20]
 80078ce:	4620      	mov	r0, r4
 80078d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078d4:	3a30      	subs	r2, #48	@ 0x30
 80078d6:	2a09      	cmp	r2, #9
 80078d8:	d903      	bls.n	80078e2 <_svfiprintf_r+0x1a6>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0c6      	beq.n	800786c <_svfiprintf_r+0x130>
 80078de:	9105      	str	r1, [sp, #20]
 80078e0:	e7c4      	b.n	800786c <_svfiprintf_r+0x130>
 80078e2:	4604      	mov	r4, r0
 80078e4:	2301      	movs	r3, #1
 80078e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078ea:	e7f0      	b.n	80078ce <_svfiprintf_r+0x192>
 80078ec:	ab03      	add	r3, sp, #12
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	462a      	mov	r2, r5
 80078f2:	4638      	mov	r0, r7
 80078f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007930 <_svfiprintf_r+0x1f4>)
 80078f6:	a904      	add	r1, sp, #16
 80078f8:	f7fc fccc 	bl	8004294 <_printf_float>
 80078fc:	1c42      	adds	r2, r0, #1
 80078fe:	4606      	mov	r6, r0
 8007900:	d1d6      	bne.n	80078b0 <_svfiprintf_r+0x174>
 8007902:	89ab      	ldrh	r3, [r5, #12]
 8007904:	065b      	lsls	r3, r3, #25
 8007906:	f53f af2d 	bmi.w	8007764 <_svfiprintf_r+0x28>
 800790a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800790c:	e72c      	b.n	8007768 <_svfiprintf_r+0x2c>
 800790e:	ab03      	add	r3, sp, #12
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	462a      	mov	r2, r5
 8007914:	4638      	mov	r0, r7
 8007916:	4b06      	ldr	r3, [pc, #24]	@ (8007930 <_svfiprintf_r+0x1f4>)
 8007918:	a904      	add	r1, sp, #16
 800791a:	f7fc ff59 	bl	80047d0 <_printf_i>
 800791e:	e7ed      	b.n	80078fc <_svfiprintf_r+0x1c0>
 8007920:	08008c11 	.word	0x08008c11
 8007924:	08008c17 	.word	0x08008c17
 8007928:	08008c1b 	.word	0x08008c1b
 800792c:	08004295 	.word	0x08004295
 8007930:	08007685 	.word	0x08007685

08007934 <__sflush_r>:
 8007934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793a:	0716      	lsls	r6, r2, #28
 800793c:	4605      	mov	r5, r0
 800793e:	460c      	mov	r4, r1
 8007940:	d454      	bmi.n	80079ec <__sflush_r+0xb8>
 8007942:	684b      	ldr	r3, [r1, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dc02      	bgt.n	800794e <__sflush_r+0x1a>
 8007948:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	dd48      	ble.n	80079e0 <__sflush_r+0xac>
 800794e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007950:	2e00      	cmp	r6, #0
 8007952:	d045      	beq.n	80079e0 <__sflush_r+0xac>
 8007954:	2300      	movs	r3, #0
 8007956:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800795a:	682f      	ldr	r7, [r5, #0]
 800795c:	6a21      	ldr	r1, [r4, #32]
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	d030      	beq.n	80079c4 <__sflush_r+0x90>
 8007962:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	0759      	lsls	r1, r3, #29
 8007968:	d505      	bpl.n	8007976 <__sflush_r+0x42>
 800796a:	6863      	ldr	r3, [r4, #4]
 800796c:	1ad2      	subs	r2, r2, r3
 800796e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007970:	b10b      	cbz	r3, 8007976 <__sflush_r+0x42>
 8007972:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007974:	1ad2      	subs	r2, r2, r3
 8007976:	2300      	movs	r3, #0
 8007978:	4628      	mov	r0, r5
 800797a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800797c:	6a21      	ldr	r1, [r4, #32]
 800797e:	47b0      	blx	r6
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	d106      	bne.n	8007994 <__sflush_r+0x60>
 8007986:	6829      	ldr	r1, [r5, #0]
 8007988:	291d      	cmp	r1, #29
 800798a:	d82b      	bhi.n	80079e4 <__sflush_r+0xb0>
 800798c:	4a28      	ldr	r2, [pc, #160]	@ (8007a30 <__sflush_r+0xfc>)
 800798e:	410a      	asrs	r2, r1
 8007990:	07d6      	lsls	r6, r2, #31
 8007992:	d427      	bmi.n	80079e4 <__sflush_r+0xb0>
 8007994:	2200      	movs	r2, #0
 8007996:	6062      	str	r2, [r4, #4]
 8007998:	6922      	ldr	r2, [r4, #16]
 800799a:	04d9      	lsls	r1, r3, #19
 800799c:	6022      	str	r2, [r4, #0]
 800799e:	d504      	bpl.n	80079aa <__sflush_r+0x76>
 80079a0:	1c42      	adds	r2, r0, #1
 80079a2:	d101      	bne.n	80079a8 <__sflush_r+0x74>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b903      	cbnz	r3, 80079aa <__sflush_r+0x76>
 80079a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80079aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ac:	602f      	str	r7, [r5, #0]
 80079ae:	b1b9      	cbz	r1, 80079e0 <__sflush_r+0xac>
 80079b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079b4:	4299      	cmp	r1, r3
 80079b6:	d002      	beq.n	80079be <__sflush_r+0x8a>
 80079b8:	4628      	mov	r0, r5
 80079ba:	f7fe fa41 	bl	8005e40 <_free_r>
 80079be:	2300      	movs	r3, #0
 80079c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80079c2:	e00d      	b.n	80079e0 <__sflush_r+0xac>
 80079c4:	2301      	movs	r3, #1
 80079c6:	4628      	mov	r0, r5
 80079c8:	47b0      	blx	r6
 80079ca:	4602      	mov	r2, r0
 80079cc:	1c50      	adds	r0, r2, #1
 80079ce:	d1c9      	bne.n	8007964 <__sflush_r+0x30>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0c6      	beq.n	8007964 <__sflush_r+0x30>
 80079d6:	2b1d      	cmp	r3, #29
 80079d8:	d001      	beq.n	80079de <__sflush_r+0xaa>
 80079da:	2b16      	cmp	r3, #22
 80079dc:	d11d      	bne.n	8007a1a <__sflush_r+0xe6>
 80079de:	602f      	str	r7, [r5, #0]
 80079e0:	2000      	movs	r0, #0
 80079e2:	e021      	b.n	8007a28 <__sflush_r+0xf4>
 80079e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079e8:	b21b      	sxth	r3, r3
 80079ea:	e01a      	b.n	8007a22 <__sflush_r+0xee>
 80079ec:	690f      	ldr	r7, [r1, #16]
 80079ee:	2f00      	cmp	r7, #0
 80079f0:	d0f6      	beq.n	80079e0 <__sflush_r+0xac>
 80079f2:	0793      	lsls	r3, r2, #30
 80079f4:	bf18      	it	ne
 80079f6:	2300      	movne	r3, #0
 80079f8:	680e      	ldr	r6, [r1, #0]
 80079fa:	bf08      	it	eq
 80079fc:	694b      	ldreq	r3, [r1, #20]
 80079fe:	1bf6      	subs	r6, r6, r7
 8007a00:	600f      	str	r7, [r1, #0]
 8007a02:	608b      	str	r3, [r1, #8]
 8007a04:	2e00      	cmp	r6, #0
 8007a06:	ddeb      	ble.n	80079e0 <__sflush_r+0xac>
 8007a08:	4633      	mov	r3, r6
 8007a0a:	463a      	mov	r2, r7
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	6a21      	ldr	r1, [r4, #32]
 8007a10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007a14:	47e0      	blx	ip
 8007a16:	2800      	cmp	r0, #0
 8007a18:	dc07      	bgt.n	8007a2a <__sflush_r+0xf6>
 8007a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a22:	f04f 30ff 	mov.w	r0, #4294967295
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a2a:	4407      	add	r7, r0
 8007a2c:	1a36      	subs	r6, r6, r0
 8007a2e:	e7e9      	b.n	8007a04 <__sflush_r+0xd0>
 8007a30:	dfbffffe 	.word	0xdfbffffe

08007a34 <_fflush_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	690b      	ldr	r3, [r1, #16]
 8007a38:	4605      	mov	r5, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	b913      	cbnz	r3, 8007a44 <_fflush_r+0x10>
 8007a3e:	2500      	movs	r5, #0
 8007a40:	4628      	mov	r0, r5
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	b118      	cbz	r0, 8007a4e <_fflush_r+0x1a>
 8007a46:	6a03      	ldr	r3, [r0, #32]
 8007a48:	b90b      	cbnz	r3, 8007a4e <_fflush_r+0x1a>
 8007a4a:	f7fd fa7d 	bl	8004f48 <__sinit>
 8007a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0f3      	beq.n	8007a3e <_fflush_r+0xa>
 8007a56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a58:	07d0      	lsls	r0, r2, #31
 8007a5a:	d404      	bmi.n	8007a66 <_fflush_r+0x32>
 8007a5c:	0599      	lsls	r1, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_fflush_r+0x32>
 8007a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a62:	f7fd fb88 	bl	8005176 <__retarget_lock_acquire_recursive>
 8007a66:	4628      	mov	r0, r5
 8007a68:	4621      	mov	r1, r4
 8007a6a:	f7ff ff63 	bl	8007934 <__sflush_r>
 8007a6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a70:	4605      	mov	r5, r0
 8007a72:	07da      	lsls	r2, r3, #31
 8007a74:	d4e4      	bmi.n	8007a40 <_fflush_r+0xc>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	059b      	lsls	r3, r3, #22
 8007a7a:	d4e1      	bmi.n	8007a40 <_fflush_r+0xc>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a7e:	f7fd fb7b 	bl	8005178 <__retarget_lock_release_recursive>
 8007a82:	e7dd      	b.n	8007a40 <_fflush_r+0xc>

08007a84 <memmove>:
 8007a84:	4288      	cmp	r0, r1
 8007a86:	b510      	push	{r4, lr}
 8007a88:	eb01 0402 	add.w	r4, r1, r2
 8007a8c:	d902      	bls.n	8007a94 <memmove+0x10>
 8007a8e:	4284      	cmp	r4, r0
 8007a90:	4623      	mov	r3, r4
 8007a92:	d807      	bhi.n	8007aa4 <memmove+0x20>
 8007a94:	1e43      	subs	r3, r0, #1
 8007a96:	42a1      	cmp	r1, r4
 8007a98:	d008      	beq.n	8007aac <memmove+0x28>
 8007a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aa2:	e7f8      	b.n	8007a96 <memmove+0x12>
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	4402      	add	r2, r0
 8007aa8:	428a      	cmp	r2, r1
 8007aaa:	d100      	bne.n	8007aae <memmove+0x2a>
 8007aac:	bd10      	pop	{r4, pc}
 8007aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ab6:	e7f7      	b.n	8007aa8 <memmove+0x24>

08007ab8 <strncmp>:
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	b16a      	cbz	r2, 8007ad8 <strncmp+0x20>
 8007abc:	3901      	subs	r1, #1
 8007abe:	1884      	adds	r4, r0, r2
 8007ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d103      	bne.n	8007ad4 <strncmp+0x1c>
 8007acc:	42a0      	cmp	r0, r4
 8007ace:	d001      	beq.n	8007ad4 <strncmp+0x1c>
 8007ad0:	2a00      	cmp	r2, #0
 8007ad2:	d1f5      	bne.n	8007ac0 <strncmp+0x8>
 8007ad4:	1ad0      	subs	r0, r2, r3
 8007ad6:	bd10      	pop	{r4, pc}
 8007ad8:	4610      	mov	r0, r2
 8007ada:	e7fc      	b.n	8007ad6 <strncmp+0x1e>

08007adc <_sbrk_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4d05      	ldr	r5, [pc, #20]	@ (8007af8 <_sbrk_r+0x1c>)
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7f9 ff5c 	bl	80019a4 <_sbrk>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_sbrk_r+0x1a>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_sbrk_r+0x1a>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20000420 	.word	0x20000420

08007afc <memcpy>:
 8007afc:	440a      	add	r2, r1
 8007afe:	4291      	cmp	r1, r2
 8007b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b04:	d100      	bne.n	8007b08 <memcpy+0xc>
 8007b06:	4770      	bx	lr
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b0e:	4291      	cmp	r1, r2
 8007b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b14:	d1f9      	bne.n	8007b0a <memcpy+0xe>
 8007b16:	bd10      	pop	{r4, pc}

08007b18 <nan>:
 8007b18:	2000      	movs	r0, #0
 8007b1a:	4901      	ldr	r1, [pc, #4]	@ (8007b20 <nan+0x8>)
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	7ff80000 	.word	0x7ff80000

08007b24 <__assert_func>:
 8007b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b26:	4614      	mov	r4, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <__assert_func+0x2c>)
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68d8      	ldr	r0, [r3, #12]
 8007b32:	b954      	cbnz	r4, 8007b4a <__assert_func+0x26>
 8007b34:	4b07      	ldr	r3, [pc, #28]	@ (8007b54 <__assert_func+0x30>)
 8007b36:	461c      	mov	r4, r3
 8007b38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b3c:	9100      	str	r1, [sp, #0]
 8007b3e:	462b      	mov	r3, r5
 8007b40:	4905      	ldr	r1, [pc, #20]	@ (8007b58 <__assert_func+0x34>)
 8007b42:	f000 fba7 	bl	8008294 <fiprintf>
 8007b46:	f000 fbb7 	bl	80082b8 <abort>
 8007b4a:	4b04      	ldr	r3, [pc, #16]	@ (8007b5c <__assert_func+0x38>)
 8007b4c:	e7f4      	b.n	8007b38 <__assert_func+0x14>
 8007b4e:	bf00      	nop
 8007b50:	2000001c 	.word	0x2000001c
 8007b54:	08008c65 	.word	0x08008c65
 8007b58:	08008c37 	.word	0x08008c37
 8007b5c:	08008c2a 	.word	0x08008c2a

08007b60 <_calloc_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	fba1 5402 	umull	r5, r4, r1, r2
 8007b66:	b93c      	cbnz	r4, 8007b78 <_calloc_r+0x18>
 8007b68:	4629      	mov	r1, r5
 8007b6a:	f7fe f9db 	bl	8005f24 <_malloc_r>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	b928      	cbnz	r0, 8007b7e <_calloc_r+0x1e>
 8007b72:	2600      	movs	r6, #0
 8007b74:	4630      	mov	r0, r6
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	220c      	movs	r2, #12
 8007b7a:	6002      	str	r2, [r0, #0]
 8007b7c:	e7f9      	b.n	8007b72 <_calloc_r+0x12>
 8007b7e:	462a      	mov	r2, r5
 8007b80:	4621      	mov	r1, r4
 8007b82:	f7fd fa7a 	bl	800507a <memset>
 8007b86:	e7f5      	b.n	8007b74 <_calloc_r+0x14>

08007b88 <rshift>:
 8007b88:	6903      	ldr	r3, [r0, #16]
 8007b8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b92:	f100 0414 	add.w	r4, r0, #20
 8007b96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b9a:	dd46      	ble.n	8007c2a <rshift+0xa2>
 8007b9c:	f011 011f 	ands.w	r1, r1, #31
 8007ba0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ba4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ba8:	d10c      	bne.n	8007bc4 <rshift+0x3c>
 8007baa:	4629      	mov	r1, r5
 8007bac:	f100 0710 	add.w	r7, r0, #16
 8007bb0:	42b1      	cmp	r1, r6
 8007bb2:	d335      	bcc.n	8007c20 <rshift+0x98>
 8007bb4:	1a9b      	subs	r3, r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	1eea      	subs	r2, r5, #3
 8007bba:	4296      	cmp	r6, r2
 8007bbc:	bf38      	it	cc
 8007bbe:	2300      	movcc	r3, #0
 8007bc0:	4423      	add	r3, r4
 8007bc2:	e015      	b.n	8007bf0 <rshift+0x68>
 8007bc4:	46a1      	mov	r9, r4
 8007bc6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bca:	f1c1 0820 	rsb	r8, r1, #32
 8007bce:	40cf      	lsrs	r7, r1
 8007bd0:	f105 0e04 	add.w	lr, r5, #4
 8007bd4:	4576      	cmp	r6, lr
 8007bd6:	46f4      	mov	ip, lr
 8007bd8:	d816      	bhi.n	8007c08 <rshift+0x80>
 8007bda:	1a9a      	subs	r2, r3, r2
 8007bdc:	0092      	lsls	r2, r2, #2
 8007bde:	3a04      	subs	r2, #4
 8007be0:	3501      	adds	r5, #1
 8007be2:	42ae      	cmp	r6, r5
 8007be4:	bf38      	it	cc
 8007be6:	2200      	movcc	r2, #0
 8007be8:	18a3      	adds	r3, r4, r2
 8007bea:	50a7      	str	r7, [r4, r2]
 8007bec:	b107      	cbz	r7, 8007bf0 <rshift+0x68>
 8007bee:	3304      	adds	r3, #4
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	eba3 0204 	sub.w	r2, r3, r4
 8007bf6:	bf08      	it	eq
 8007bf8:	2300      	moveq	r3, #0
 8007bfa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bfe:	6102      	str	r2, [r0, #16]
 8007c00:	bf08      	it	eq
 8007c02:	6143      	streq	r3, [r0, #20]
 8007c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c08:	f8dc c000 	ldr.w	ip, [ip]
 8007c0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c10:	ea4c 0707 	orr.w	r7, ip, r7
 8007c14:	f849 7b04 	str.w	r7, [r9], #4
 8007c18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c1c:	40cf      	lsrs	r7, r1
 8007c1e:	e7d9      	b.n	8007bd4 <rshift+0x4c>
 8007c20:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c24:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c28:	e7c2      	b.n	8007bb0 <rshift+0x28>
 8007c2a:	4623      	mov	r3, r4
 8007c2c:	e7e0      	b.n	8007bf0 <rshift+0x68>

08007c2e <__hexdig_fun>:
 8007c2e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007c32:	2b09      	cmp	r3, #9
 8007c34:	d802      	bhi.n	8007c3c <__hexdig_fun+0xe>
 8007c36:	3820      	subs	r0, #32
 8007c38:	b2c0      	uxtb	r0, r0
 8007c3a:	4770      	bx	lr
 8007c3c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007c40:	2b05      	cmp	r3, #5
 8007c42:	d801      	bhi.n	8007c48 <__hexdig_fun+0x1a>
 8007c44:	3847      	subs	r0, #71	@ 0x47
 8007c46:	e7f7      	b.n	8007c38 <__hexdig_fun+0xa>
 8007c48:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007c4c:	2b05      	cmp	r3, #5
 8007c4e:	d801      	bhi.n	8007c54 <__hexdig_fun+0x26>
 8007c50:	3827      	subs	r0, #39	@ 0x27
 8007c52:	e7f1      	b.n	8007c38 <__hexdig_fun+0xa>
 8007c54:	2000      	movs	r0, #0
 8007c56:	4770      	bx	lr

08007c58 <__gethex>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	468a      	mov	sl, r1
 8007c5e:	4690      	mov	r8, r2
 8007c60:	b085      	sub	sp, #20
 8007c62:	9302      	str	r3, [sp, #8]
 8007c64:	680b      	ldr	r3, [r1, #0]
 8007c66:	9001      	str	r0, [sp, #4]
 8007c68:	1c9c      	adds	r4, r3, #2
 8007c6a:	46a1      	mov	r9, r4
 8007c6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007c70:	2830      	cmp	r0, #48	@ 0x30
 8007c72:	d0fa      	beq.n	8007c6a <__gethex+0x12>
 8007c74:	eba9 0303 	sub.w	r3, r9, r3
 8007c78:	f1a3 0b02 	sub.w	fp, r3, #2
 8007c7c:	f7ff ffd7 	bl	8007c2e <__hexdig_fun>
 8007c80:	4605      	mov	r5, r0
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d168      	bne.n	8007d58 <__gethex+0x100>
 8007c86:	2201      	movs	r2, #1
 8007c88:	4648      	mov	r0, r9
 8007c8a:	499f      	ldr	r1, [pc, #636]	@ (8007f08 <__gethex+0x2b0>)
 8007c8c:	f7ff ff14 	bl	8007ab8 <strncmp>
 8007c90:	4607      	mov	r7, r0
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d167      	bne.n	8007d66 <__gethex+0x10e>
 8007c96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007c9a:	4626      	mov	r6, r4
 8007c9c:	f7ff ffc7 	bl	8007c2e <__hexdig_fun>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d062      	beq.n	8007d6a <__gethex+0x112>
 8007ca4:	4623      	mov	r3, r4
 8007ca6:	7818      	ldrb	r0, [r3, #0]
 8007ca8:	4699      	mov	r9, r3
 8007caa:	2830      	cmp	r0, #48	@ 0x30
 8007cac:	f103 0301 	add.w	r3, r3, #1
 8007cb0:	d0f9      	beq.n	8007ca6 <__gethex+0x4e>
 8007cb2:	f7ff ffbc 	bl	8007c2e <__hexdig_fun>
 8007cb6:	fab0 f580 	clz	r5, r0
 8007cba:	f04f 0b01 	mov.w	fp, #1
 8007cbe:	096d      	lsrs	r5, r5, #5
 8007cc0:	464a      	mov	r2, r9
 8007cc2:	4616      	mov	r6, r2
 8007cc4:	7830      	ldrb	r0, [r6, #0]
 8007cc6:	3201      	adds	r2, #1
 8007cc8:	f7ff ffb1 	bl	8007c2e <__hexdig_fun>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d1f8      	bne.n	8007cc2 <__gethex+0x6a>
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	498c      	ldr	r1, [pc, #560]	@ (8007f08 <__gethex+0x2b0>)
 8007cd6:	f7ff feef 	bl	8007ab8 <strncmp>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d13f      	bne.n	8007d5e <__gethex+0x106>
 8007cde:	b944      	cbnz	r4, 8007cf2 <__gethex+0x9a>
 8007ce0:	1c74      	adds	r4, r6, #1
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	4616      	mov	r6, r2
 8007ce6:	7830      	ldrb	r0, [r6, #0]
 8007ce8:	3201      	adds	r2, #1
 8007cea:	f7ff ffa0 	bl	8007c2e <__hexdig_fun>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d1f8      	bne.n	8007ce4 <__gethex+0x8c>
 8007cf2:	1ba4      	subs	r4, r4, r6
 8007cf4:	00a7      	lsls	r7, r4, #2
 8007cf6:	7833      	ldrb	r3, [r6, #0]
 8007cf8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007cfc:	2b50      	cmp	r3, #80	@ 0x50
 8007cfe:	d13e      	bne.n	8007d7e <__gethex+0x126>
 8007d00:	7873      	ldrb	r3, [r6, #1]
 8007d02:	2b2b      	cmp	r3, #43	@ 0x2b
 8007d04:	d033      	beq.n	8007d6e <__gethex+0x116>
 8007d06:	2b2d      	cmp	r3, #45	@ 0x2d
 8007d08:	d034      	beq.n	8007d74 <__gethex+0x11c>
 8007d0a:	2400      	movs	r4, #0
 8007d0c:	1c71      	adds	r1, r6, #1
 8007d0e:	7808      	ldrb	r0, [r1, #0]
 8007d10:	f7ff ff8d 	bl	8007c2e <__hexdig_fun>
 8007d14:	1e43      	subs	r3, r0, #1
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b18      	cmp	r3, #24
 8007d1a:	d830      	bhi.n	8007d7e <__gethex+0x126>
 8007d1c:	f1a0 0210 	sub.w	r2, r0, #16
 8007d20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d24:	f7ff ff83 	bl	8007c2e <__hexdig_fun>
 8007d28:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d2c:	fa5f fc8c 	uxtb.w	ip, ip
 8007d30:	f1bc 0f18 	cmp.w	ip, #24
 8007d34:	f04f 030a 	mov.w	r3, #10
 8007d38:	d91e      	bls.n	8007d78 <__gethex+0x120>
 8007d3a:	b104      	cbz	r4, 8007d3e <__gethex+0xe6>
 8007d3c:	4252      	negs	r2, r2
 8007d3e:	4417      	add	r7, r2
 8007d40:	f8ca 1000 	str.w	r1, [sl]
 8007d44:	b1ed      	cbz	r5, 8007d82 <__gethex+0x12a>
 8007d46:	f1bb 0f00 	cmp.w	fp, #0
 8007d4a:	bf0c      	ite	eq
 8007d4c:	2506      	moveq	r5, #6
 8007d4e:	2500      	movne	r5, #0
 8007d50:	4628      	mov	r0, r5
 8007d52:	b005      	add	sp, #20
 8007d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d58:	2500      	movs	r5, #0
 8007d5a:	462c      	mov	r4, r5
 8007d5c:	e7b0      	b.n	8007cc0 <__gethex+0x68>
 8007d5e:	2c00      	cmp	r4, #0
 8007d60:	d1c7      	bne.n	8007cf2 <__gethex+0x9a>
 8007d62:	4627      	mov	r7, r4
 8007d64:	e7c7      	b.n	8007cf6 <__gethex+0x9e>
 8007d66:	464e      	mov	r6, r9
 8007d68:	462f      	mov	r7, r5
 8007d6a:	2501      	movs	r5, #1
 8007d6c:	e7c3      	b.n	8007cf6 <__gethex+0x9e>
 8007d6e:	2400      	movs	r4, #0
 8007d70:	1cb1      	adds	r1, r6, #2
 8007d72:	e7cc      	b.n	8007d0e <__gethex+0xb6>
 8007d74:	2401      	movs	r4, #1
 8007d76:	e7fb      	b.n	8007d70 <__gethex+0x118>
 8007d78:	fb03 0002 	mla	r0, r3, r2, r0
 8007d7c:	e7ce      	b.n	8007d1c <__gethex+0xc4>
 8007d7e:	4631      	mov	r1, r6
 8007d80:	e7de      	b.n	8007d40 <__gethex+0xe8>
 8007d82:	4629      	mov	r1, r5
 8007d84:	eba6 0309 	sub.w	r3, r6, r9
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	2b07      	cmp	r3, #7
 8007d8c:	dc0a      	bgt.n	8007da4 <__gethex+0x14c>
 8007d8e:	9801      	ldr	r0, [sp, #4]
 8007d90:	f7fe f954 	bl	800603c <_Balloc>
 8007d94:	4604      	mov	r4, r0
 8007d96:	b940      	cbnz	r0, 8007daa <__gethex+0x152>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	21e4      	movs	r1, #228	@ 0xe4
 8007d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8007f0c <__gethex+0x2b4>)
 8007d9e:	485c      	ldr	r0, [pc, #368]	@ (8007f10 <__gethex+0x2b8>)
 8007da0:	f7ff fec0 	bl	8007b24 <__assert_func>
 8007da4:	3101      	adds	r1, #1
 8007da6:	105b      	asrs	r3, r3, #1
 8007da8:	e7ef      	b.n	8007d8a <__gethex+0x132>
 8007daa:	2300      	movs	r3, #0
 8007dac:	f100 0a14 	add.w	sl, r0, #20
 8007db0:	4655      	mov	r5, sl
 8007db2:	469b      	mov	fp, r3
 8007db4:	45b1      	cmp	r9, r6
 8007db6:	d337      	bcc.n	8007e28 <__gethex+0x1d0>
 8007db8:	f845 bb04 	str.w	fp, [r5], #4
 8007dbc:	eba5 050a 	sub.w	r5, r5, sl
 8007dc0:	10ad      	asrs	r5, r5, #2
 8007dc2:	6125      	str	r5, [r4, #16]
 8007dc4:	4658      	mov	r0, fp
 8007dc6:	f7fe fa2b 	bl	8006220 <__hi0bits>
 8007dca:	016d      	lsls	r5, r5, #5
 8007dcc:	f8d8 6000 	ldr.w	r6, [r8]
 8007dd0:	1a2d      	subs	r5, r5, r0
 8007dd2:	42b5      	cmp	r5, r6
 8007dd4:	dd54      	ble.n	8007e80 <__gethex+0x228>
 8007dd6:	1bad      	subs	r5, r5, r6
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7fe fdb3 	bl	8006946 <__any_on>
 8007de0:	4681      	mov	r9, r0
 8007de2:	b178      	cbz	r0, 8007e04 <__gethex+0x1ac>
 8007de4:	f04f 0901 	mov.w	r9, #1
 8007de8:	1e6b      	subs	r3, r5, #1
 8007dea:	1159      	asrs	r1, r3, #5
 8007dec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007df0:	f003 021f 	and.w	r2, r3, #31
 8007df4:	fa09 f202 	lsl.w	r2, r9, r2
 8007df8:	420a      	tst	r2, r1
 8007dfa:	d003      	beq.n	8007e04 <__gethex+0x1ac>
 8007dfc:	454b      	cmp	r3, r9
 8007dfe:	dc36      	bgt.n	8007e6e <__gethex+0x216>
 8007e00:	f04f 0902 	mov.w	r9, #2
 8007e04:	4629      	mov	r1, r5
 8007e06:	4620      	mov	r0, r4
 8007e08:	f7ff febe 	bl	8007b88 <rshift>
 8007e0c:	442f      	add	r7, r5
 8007e0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e12:	42bb      	cmp	r3, r7
 8007e14:	da42      	bge.n	8007e9c <__gethex+0x244>
 8007e16:	4621      	mov	r1, r4
 8007e18:	9801      	ldr	r0, [sp, #4]
 8007e1a:	f7fe f94f 	bl	80060bc <_Bfree>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e22:	25a3      	movs	r5, #163	@ 0xa3
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	e793      	b.n	8007d50 <__gethex+0xf8>
 8007e28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007e2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8007e2e:	d012      	beq.n	8007e56 <__gethex+0x1fe>
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	d104      	bne.n	8007e3e <__gethex+0x1e6>
 8007e34:	f845 bb04 	str.w	fp, [r5], #4
 8007e38:	f04f 0b00 	mov.w	fp, #0
 8007e3c:	465b      	mov	r3, fp
 8007e3e:	7830      	ldrb	r0, [r6, #0]
 8007e40:	9303      	str	r3, [sp, #12]
 8007e42:	f7ff fef4 	bl	8007c2e <__hexdig_fun>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	f000 000f 	and.w	r0, r0, #15
 8007e4c:	4098      	lsls	r0, r3
 8007e4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e52:	3304      	adds	r3, #4
 8007e54:	e7ae      	b.n	8007db4 <__gethex+0x15c>
 8007e56:	45b1      	cmp	r9, r6
 8007e58:	d8ea      	bhi.n	8007e30 <__gethex+0x1d8>
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	492a      	ldr	r1, [pc, #168]	@ (8007f08 <__gethex+0x2b0>)
 8007e60:	9303      	str	r3, [sp, #12]
 8007e62:	f7ff fe29 	bl	8007ab8 <strncmp>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d1e1      	bne.n	8007e30 <__gethex+0x1d8>
 8007e6c:	e7a2      	b.n	8007db4 <__gethex+0x15c>
 8007e6e:	4620      	mov	r0, r4
 8007e70:	1ea9      	subs	r1, r5, #2
 8007e72:	f7fe fd68 	bl	8006946 <__any_on>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d0c2      	beq.n	8007e00 <__gethex+0x1a8>
 8007e7a:	f04f 0903 	mov.w	r9, #3
 8007e7e:	e7c1      	b.n	8007e04 <__gethex+0x1ac>
 8007e80:	da09      	bge.n	8007e96 <__gethex+0x23e>
 8007e82:	1b75      	subs	r5, r6, r5
 8007e84:	4621      	mov	r1, r4
 8007e86:	462a      	mov	r2, r5
 8007e88:	9801      	ldr	r0, [sp, #4]
 8007e8a:	f7fe fb2d 	bl	80064e8 <__lshift>
 8007e8e:	4604      	mov	r4, r0
 8007e90:	1b7f      	subs	r7, r7, r5
 8007e92:	f100 0a14 	add.w	sl, r0, #20
 8007e96:	f04f 0900 	mov.w	r9, #0
 8007e9a:	e7b8      	b.n	8007e0e <__gethex+0x1b6>
 8007e9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ea0:	42bd      	cmp	r5, r7
 8007ea2:	dd6f      	ble.n	8007f84 <__gethex+0x32c>
 8007ea4:	1bed      	subs	r5, r5, r7
 8007ea6:	42ae      	cmp	r6, r5
 8007ea8:	dc34      	bgt.n	8007f14 <__gethex+0x2bc>
 8007eaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d022      	beq.n	8007ef8 <__gethex+0x2a0>
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d024      	beq.n	8007f00 <__gethex+0x2a8>
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d115      	bne.n	8007ee6 <__gethex+0x28e>
 8007eba:	42ae      	cmp	r6, r5
 8007ebc:	d113      	bne.n	8007ee6 <__gethex+0x28e>
 8007ebe:	2e01      	cmp	r6, #1
 8007ec0:	d10b      	bne.n	8007eda <__gethex+0x282>
 8007ec2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007ec6:	9a02      	ldr	r2, [sp, #8]
 8007ec8:	2562      	movs	r5, #98	@ 0x62
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	2301      	movs	r3, #1
 8007ece:	6123      	str	r3, [r4, #16]
 8007ed0:	f8ca 3000 	str.w	r3, [sl]
 8007ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ed6:	601c      	str	r4, [r3, #0]
 8007ed8:	e73a      	b.n	8007d50 <__gethex+0xf8>
 8007eda:	4620      	mov	r0, r4
 8007edc:	1e71      	subs	r1, r6, #1
 8007ede:	f7fe fd32 	bl	8006946 <__any_on>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d1ed      	bne.n	8007ec2 <__gethex+0x26a>
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	9801      	ldr	r0, [sp, #4]
 8007eea:	f7fe f8e7 	bl	80060bc <_Bfree>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ef2:	2550      	movs	r5, #80	@ 0x50
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	e72b      	b.n	8007d50 <__gethex+0xf8>
 8007ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f3      	bne.n	8007ee6 <__gethex+0x28e>
 8007efe:	e7e0      	b.n	8007ec2 <__gethex+0x26a>
 8007f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1dd      	bne.n	8007ec2 <__gethex+0x26a>
 8007f06:	e7ee      	b.n	8007ee6 <__gethex+0x28e>
 8007f08:	08008ab8 	.word	0x08008ab8
 8007f0c:	0800894b 	.word	0x0800894b
 8007f10:	08008c66 	.word	0x08008c66
 8007f14:	1e6f      	subs	r7, r5, #1
 8007f16:	f1b9 0f00 	cmp.w	r9, #0
 8007f1a:	d130      	bne.n	8007f7e <__gethex+0x326>
 8007f1c:	b127      	cbz	r7, 8007f28 <__gethex+0x2d0>
 8007f1e:	4639      	mov	r1, r7
 8007f20:	4620      	mov	r0, r4
 8007f22:	f7fe fd10 	bl	8006946 <__any_on>
 8007f26:	4681      	mov	r9, r0
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	1b76      	subs	r6, r6, r5
 8007f2e:	2502      	movs	r5, #2
 8007f30:	117a      	asrs	r2, r7, #5
 8007f32:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f36:	f007 071f 	and.w	r7, r7, #31
 8007f3a:	40bb      	lsls	r3, r7
 8007f3c:	4213      	tst	r3, r2
 8007f3e:	4620      	mov	r0, r4
 8007f40:	bf18      	it	ne
 8007f42:	f049 0902 	orrne.w	r9, r9, #2
 8007f46:	f7ff fe1f 	bl	8007b88 <rshift>
 8007f4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007f4e:	f1b9 0f00 	cmp.w	r9, #0
 8007f52:	d047      	beq.n	8007fe4 <__gethex+0x38c>
 8007f54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d015      	beq.n	8007f88 <__gethex+0x330>
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d017      	beq.n	8007f90 <__gethex+0x338>
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d109      	bne.n	8007f78 <__gethex+0x320>
 8007f64:	f019 0f02 	tst.w	r9, #2
 8007f68:	d006      	beq.n	8007f78 <__gethex+0x320>
 8007f6a:	f8da 3000 	ldr.w	r3, [sl]
 8007f6e:	ea49 0903 	orr.w	r9, r9, r3
 8007f72:	f019 0f01 	tst.w	r9, #1
 8007f76:	d10e      	bne.n	8007f96 <__gethex+0x33e>
 8007f78:	f045 0510 	orr.w	r5, r5, #16
 8007f7c:	e032      	b.n	8007fe4 <__gethex+0x38c>
 8007f7e:	f04f 0901 	mov.w	r9, #1
 8007f82:	e7d1      	b.n	8007f28 <__gethex+0x2d0>
 8007f84:	2501      	movs	r5, #1
 8007f86:	e7e2      	b.n	8007f4e <__gethex+0x2f6>
 8007f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f8a:	f1c3 0301 	rsb	r3, r3, #1
 8007f8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f0      	beq.n	8007f78 <__gethex+0x320>
 8007f96:	f04f 0c00 	mov.w	ip, #0
 8007f9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f9e:	f104 0314 	add.w	r3, r4, #20
 8007fa2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007fa6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007fb4:	d01b      	beq.n	8007fee <__gethex+0x396>
 8007fb6:	3201      	adds	r2, #1
 8007fb8:	6002      	str	r2, [r0, #0]
 8007fba:	2d02      	cmp	r5, #2
 8007fbc:	f104 0314 	add.w	r3, r4, #20
 8007fc0:	d13c      	bne.n	800803c <__gethex+0x3e4>
 8007fc2:	f8d8 2000 	ldr.w	r2, [r8]
 8007fc6:	3a01      	subs	r2, #1
 8007fc8:	42b2      	cmp	r2, r6
 8007fca:	d109      	bne.n	8007fe0 <__gethex+0x388>
 8007fcc:	2201      	movs	r2, #1
 8007fce:	1171      	asrs	r1, r6, #5
 8007fd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fd4:	f006 061f 	and.w	r6, r6, #31
 8007fd8:	fa02 f606 	lsl.w	r6, r2, r6
 8007fdc:	421e      	tst	r6, r3
 8007fde:	d13a      	bne.n	8008056 <__gethex+0x3fe>
 8007fe0:	f045 0520 	orr.w	r5, r5, #32
 8007fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fe6:	601c      	str	r4, [r3, #0]
 8007fe8:	9b02      	ldr	r3, [sp, #8]
 8007fea:	601f      	str	r7, [r3, #0]
 8007fec:	e6b0      	b.n	8007d50 <__gethex+0xf8>
 8007fee:	4299      	cmp	r1, r3
 8007ff0:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ff4:	d8d9      	bhi.n	8007faa <__gethex+0x352>
 8007ff6:	68a3      	ldr	r3, [r4, #8]
 8007ff8:	459b      	cmp	fp, r3
 8007ffa:	db17      	blt.n	800802c <__gethex+0x3d4>
 8007ffc:	6861      	ldr	r1, [r4, #4]
 8007ffe:	9801      	ldr	r0, [sp, #4]
 8008000:	3101      	adds	r1, #1
 8008002:	f7fe f81b 	bl	800603c <_Balloc>
 8008006:	4681      	mov	r9, r0
 8008008:	b918      	cbnz	r0, 8008012 <__gethex+0x3ba>
 800800a:	4602      	mov	r2, r0
 800800c:	2184      	movs	r1, #132	@ 0x84
 800800e:	4b19      	ldr	r3, [pc, #100]	@ (8008074 <__gethex+0x41c>)
 8008010:	e6c5      	b.n	8007d9e <__gethex+0x146>
 8008012:	6922      	ldr	r2, [r4, #16]
 8008014:	f104 010c 	add.w	r1, r4, #12
 8008018:	3202      	adds	r2, #2
 800801a:	0092      	lsls	r2, r2, #2
 800801c:	300c      	adds	r0, #12
 800801e:	f7ff fd6d 	bl	8007afc <memcpy>
 8008022:	4621      	mov	r1, r4
 8008024:	9801      	ldr	r0, [sp, #4]
 8008026:	f7fe f849 	bl	80060bc <_Bfree>
 800802a:	464c      	mov	r4, r9
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	6122      	str	r2, [r4, #16]
 8008032:	2201      	movs	r2, #1
 8008034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008038:	615a      	str	r2, [r3, #20]
 800803a:	e7be      	b.n	8007fba <__gethex+0x362>
 800803c:	6922      	ldr	r2, [r4, #16]
 800803e:	455a      	cmp	r2, fp
 8008040:	dd0b      	ble.n	800805a <__gethex+0x402>
 8008042:	2101      	movs	r1, #1
 8008044:	4620      	mov	r0, r4
 8008046:	f7ff fd9f 	bl	8007b88 <rshift>
 800804a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800804e:	3701      	adds	r7, #1
 8008050:	42bb      	cmp	r3, r7
 8008052:	f6ff aee0 	blt.w	8007e16 <__gethex+0x1be>
 8008056:	2501      	movs	r5, #1
 8008058:	e7c2      	b.n	8007fe0 <__gethex+0x388>
 800805a:	f016 061f 	ands.w	r6, r6, #31
 800805e:	d0fa      	beq.n	8008056 <__gethex+0x3fe>
 8008060:	4453      	add	r3, sl
 8008062:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008066:	f7fe f8db 	bl	8006220 <__hi0bits>
 800806a:	f1c6 0620 	rsb	r6, r6, #32
 800806e:	42b0      	cmp	r0, r6
 8008070:	dbe7      	blt.n	8008042 <__gethex+0x3ea>
 8008072:	e7f0      	b.n	8008056 <__gethex+0x3fe>
 8008074:	0800894b 	.word	0x0800894b

08008078 <L_shift>:
 8008078:	f1c2 0208 	rsb	r2, r2, #8
 800807c:	0092      	lsls	r2, r2, #2
 800807e:	b570      	push	{r4, r5, r6, lr}
 8008080:	f1c2 0620 	rsb	r6, r2, #32
 8008084:	6843      	ldr	r3, [r0, #4]
 8008086:	6804      	ldr	r4, [r0, #0]
 8008088:	fa03 f506 	lsl.w	r5, r3, r6
 800808c:	432c      	orrs	r4, r5
 800808e:	40d3      	lsrs	r3, r2
 8008090:	6004      	str	r4, [r0, #0]
 8008092:	f840 3f04 	str.w	r3, [r0, #4]!
 8008096:	4288      	cmp	r0, r1
 8008098:	d3f4      	bcc.n	8008084 <L_shift+0xc>
 800809a:	bd70      	pop	{r4, r5, r6, pc}

0800809c <__match>:
 800809c:	b530      	push	{r4, r5, lr}
 800809e:	6803      	ldr	r3, [r0, #0]
 80080a0:	3301      	adds	r3, #1
 80080a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080a6:	b914      	cbnz	r4, 80080ae <__match+0x12>
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	2001      	movs	r0, #1
 80080ac:	bd30      	pop	{r4, r5, pc}
 80080ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80080b6:	2d19      	cmp	r5, #25
 80080b8:	bf98      	it	ls
 80080ba:	3220      	addls	r2, #32
 80080bc:	42a2      	cmp	r2, r4
 80080be:	d0f0      	beq.n	80080a2 <__match+0x6>
 80080c0:	2000      	movs	r0, #0
 80080c2:	e7f3      	b.n	80080ac <__match+0x10>

080080c4 <__hexnan>:
 80080c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	2500      	movs	r5, #0
 80080ca:	680b      	ldr	r3, [r1, #0]
 80080cc:	4682      	mov	sl, r0
 80080ce:	115e      	asrs	r6, r3, #5
 80080d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80080d4:	f013 031f 	ands.w	r3, r3, #31
 80080d8:	bf18      	it	ne
 80080da:	3604      	addne	r6, #4
 80080dc:	1f37      	subs	r7, r6, #4
 80080de:	4690      	mov	r8, r2
 80080e0:	46b9      	mov	r9, r7
 80080e2:	463c      	mov	r4, r7
 80080e4:	46ab      	mov	fp, r5
 80080e6:	b087      	sub	sp, #28
 80080e8:	6801      	ldr	r1, [r0, #0]
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	f846 5c04 	str.w	r5, [r6, #-4]
 80080f0:	9502      	str	r5, [sp, #8]
 80080f2:	784a      	ldrb	r2, [r1, #1]
 80080f4:	1c4b      	adds	r3, r1, #1
 80080f6:	9303      	str	r3, [sp, #12]
 80080f8:	b342      	cbz	r2, 800814c <__hexnan+0x88>
 80080fa:	4610      	mov	r0, r2
 80080fc:	9105      	str	r1, [sp, #20]
 80080fe:	9204      	str	r2, [sp, #16]
 8008100:	f7ff fd95 	bl	8007c2e <__hexdig_fun>
 8008104:	2800      	cmp	r0, #0
 8008106:	d151      	bne.n	80081ac <__hexnan+0xe8>
 8008108:	9a04      	ldr	r2, [sp, #16]
 800810a:	9905      	ldr	r1, [sp, #20]
 800810c:	2a20      	cmp	r2, #32
 800810e:	d818      	bhi.n	8008142 <__hexnan+0x7e>
 8008110:	9b02      	ldr	r3, [sp, #8]
 8008112:	459b      	cmp	fp, r3
 8008114:	dd13      	ble.n	800813e <__hexnan+0x7a>
 8008116:	454c      	cmp	r4, r9
 8008118:	d206      	bcs.n	8008128 <__hexnan+0x64>
 800811a:	2d07      	cmp	r5, #7
 800811c:	dc04      	bgt.n	8008128 <__hexnan+0x64>
 800811e:	462a      	mov	r2, r5
 8008120:	4649      	mov	r1, r9
 8008122:	4620      	mov	r0, r4
 8008124:	f7ff ffa8 	bl	8008078 <L_shift>
 8008128:	4544      	cmp	r4, r8
 800812a:	d952      	bls.n	80081d2 <__hexnan+0x10e>
 800812c:	2300      	movs	r3, #0
 800812e:	f1a4 0904 	sub.w	r9, r4, #4
 8008132:	f844 3c04 	str.w	r3, [r4, #-4]
 8008136:	461d      	mov	r5, r3
 8008138:	464c      	mov	r4, r9
 800813a:	f8cd b008 	str.w	fp, [sp, #8]
 800813e:	9903      	ldr	r1, [sp, #12]
 8008140:	e7d7      	b.n	80080f2 <__hexnan+0x2e>
 8008142:	2a29      	cmp	r2, #41	@ 0x29
 8008144:	d157      	bne.n	80081f6 <__hexnan+0x132>
 8008146:	3102      	adds	r1, #2
 8008148:	f8ca 1000 	str.w	r1, [sl]
 800814c:	f1bb 0f00 	cmp.w	fp, #0
 8008150:	d051      	beq.n	80081f6 <__hexnan+0x132>
 8008152:	454c      	cmp	r4, r9
 8008154:	d206      	bcs.n	8008164 <__hexnan+0xa0>
 8008156:	2d07      	cmp	r5, #7
 8008158:	dc04      	bgt.n	8008164 <__hexnan+0xa0>
 800815a:	462a      	mov	r2, r5
 800815c:	4649      	mov	r1, r9
 800815e:	4620      	mov	r0, r4
 8008160:	f7ff ff8a 	bl	8008078 <L_shift>
 8008164:	4544      	cmp	r4, r8
 8008166:	d936      	bls.n	80081d6 <__hexnan+0x112>
 8008168:	4623      	mov	r3, r4
 800816a:	f1a8 0204 	sub.w	r2, r8, #4
 800816e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008172:	429f      	cmp	r7, r3
 8008174:	f842 1f04 	str.w	r1, [r2, #4]!
 8008178:	d2f9      	bcs.n	800816e <__hexnan+0xaa>
 800817a:	1b3b      	subs	r3, r7, r4
 800817c:	f023 0303 	bic.w	r3, r3, #3
 8008180:	3304      	adds	r3, #4
 8008182:	3401      	adds	r4, #1
 8008184:	3e03      	subs	r6, #3
 8008186:	42b4      	cmp	r4, r6
 8008188:	bf88      	it	hi
 800818a:	2304      	movhi	r3, #4
 800818c:	2200      	movs	r2, #0
 800818e:	4443      	add	r3, r8
 8008190:	f843 2b04 	str.w	r2, [r3], #4
 8008194:	429f      	cmp	r7, r3
 8008196:	d2fb      	bcs.n	8008190 <__hexnan+0xcc>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	b91b      	cbnz	r3, 80081a4 <__hexnan+0xe0>
 800819c:	4547      	cmp	r7, r8
 800819e:	d128      	bne.n	80081f2 <__hexnan+0x12e>
 80081a0:	2301      	movs	r3, #1
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	2005      	movs	r0, #5
 80081a6:	b007      	add	sp, #28
 80081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ac:	3501      	adds	r5, #1
 80081ae:	2d08      	cmp	r5, #8
 80081b0:	f10b 0b01 	add.w	fp, fp, #1
 80081b4:	dd06      	ble.n	80081c4 <__hexnan+0x100>
 80081b6:	4544      	cmp	r4, r8
 80081b8:	d9c1      	bls.n	800813e <__hexnan+0x7a>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2501      	movs	r5, #1
 80081be:	f844 3c04 	str.w	r3, [r4, #-4]
 80081c2:	3c04      	subs	r4, #4
 80081c4:	6822      	ldr	r2, [r4, #0]
 80081c6:	f000 000f 	and.w	r0, r0, #15
 80081ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081ce:	6020      	str	r0, [r4, #0]
 80081d0:	e7b5      	b.n	800813e <__hexnan+0x7a>
 80081d2:	2508      	movs	r5, #8
 80081d4:	e7b3      	b.n	800813e <__hexnan+0x7a>
 80081d6:	9b01      	ldr	r3, [sp, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0dd      	beq.n	8008198 <__hexnan+0xd4>
 80081dc:	f04f 32ff 	mov.w	r2, #4294967295
 80081e0:	f1c3 0320 	rsb	r3, r3, #32
 80081e4:	40da      	lsrs	r2, r3
 80081e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80081ea:	4013      	ands	r3, r2
 80081ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80081f0:	e7d2      	b.n	8008198 <__hexnan+0xd4>
 80081f2:	3f04      	subs	r7, #4
 80081f4:	e7d0      	b.n	8008198 <__hexnan+0xd4>
 80081f6:	2004      	movs	r0, #4
 80081f8:	e7d5      	b.n	80081a6 <__hexnan+0xe2>

080081fa <__ascii_mbtowc>:
 80081fa:	b082      	sub	sp, #8
 80081fc:	b901      	cbnz	r1, 8008200 <__ascii_mbtowc+0x6>
 80081fe:	a901      	add	r1, sp, #4
 8008200:	b142      	cbz	r2, 8008214 <__ascii_mbtowc+0x1a>
 8008202:	b14b      	cbz	r3, 8008218 <__ascii_mbtowc+0x1e>
 8008204:	7813      	ldrb	r3, [r2, #0]
 8008206:	600b      	str	r3, [r1, #0]
 8008208:	7812      	ldrb	r2, [r2, #0]
 800820a:	1e10      	subs	r0, r2, #0
 800820c:	bf18      	it	ne
 800820e:	2001      	movne	r0, #1
 8008210:	b002      	add	sp, #8
 8008212:	4770      	bx	lr
 8008214:	4610      	mov	r0, r2
 8008216:	e7fb      	b.n	8008210 <__ascii_mbtowc+0x16>
 8008218:	f06f 0001 	mvn.w	r0, #1
 800821c:	e7f8      	b.n	8008210 <__ascii_mbtowc+0x16>

0800821e <_realloc_r>:
 800821e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008222:	4680      	mov	r8, r0
 8008224:	4615      	mov	r5, r2
 8008226:	460c      	mov	r4, r1
 8008228:	b921      	cbnz	r1, 8008234 <_realloc_r+0x16>
 800822a:	4611      	mov	r1, r2
 800822c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008230:	f7fd be78 	b.w	8005f24 <_malloc_r>
 8008234:	b92a      	cbnz	r2, 8008242 <_realloc_r+0x24>
 8008236:	f7fd fe03 	bl	8005e40 <_free_r>
 800823a:	2400      	movs	r4, #0
 800823c:	4620      	mov	r0, r4
 800823e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008242:	f000 f840 	bl	80082c6 <_malloc_usable_size_r>
 8008246:	4285      	cmp	r5, r0
 8008248:	4606      	mov	r6, r0
 800824a:	d802      	bhi.n	8008252 <_realloc_r+0x34>
 800824c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008250:	d8f4      	bhi.n	800823c <_realloc_r+0x1e>
 8008252:	4629      	mov	r1, r5
 8008254:	4640      	mov	r0, r8
 8008256:	f7fd fe65 	bl	8005f24 <_malloc_r>
 800825a:	4607      	mov	r7, r0
 800825c:	2800      	cmp	r0, #0
 800825e:	d0ec      	beq.n	800823a <_realloc_r+0x1c>
 8008260:	42b5      	cmp	r5, r6
 8008262:	462a      	mov	r2, r5
 8008264:	4621      	mov	r1, r4
 8008266:	bf28      	it	cs
 8008268:	4632      	movcs	r2, r6
 800826a:	f7ff fc47 	bl	8007afc <memcpy>
 800826e:	4621      	mov	r1, r4
 8008270:	4640      	mov	r0, r8
 8008272:	f7fd fde5 	bl	8005e40 <_free_r>
 8008276:	463c      	mov	r4, r7
 8008278:	e7e0      	b.n	800823c <_realloc_r+0x1e>

0800827a <__ascii_wctomb>:
 800827a:	4603      	mov	r3, r0
 800827c:	4608      	mov	r0, r1
 800827e:	b141      	cbz	r1, 8008292 <__ascii_wctomb+0x18>
 8008280:	2aff      	cmp	r2, #255	@ 0xff
 8008282:	d904      	bls.n	800828e <__ascii_wctomb+0x14>
 8008284:	228a      	movs	r2, #138	@ 0x8a
 8008286:	f04f 30ff 	mov.w	r0, #4294967295
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	4770      	bx	lr
 800828e:	2001      	movs	r0, #1
 8008290:	700a      	strb	r2, [r1, #0]
 8008292:	4770      	bx	lr

08008294 <fiprintf>:
 8008294:	b40e      	push	{r1, r2, r3}
 8008296:	b503      	push	{r0, r1, lr}
 8008298:	4601      	mov	r1, r0
 800829a:	ab03      	add	r3, sp, #12
 800829c:	4805      	ldr	r0, [pc, #20]	@ (80082b4 <fiprintf+0x20>)
 800829e:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a2:	6800      	ldr	r0, [r0, #0]
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	f000 f83d 	bl	8008324 <_vfiprintf_r>
 80082aa:	b002      	add	sp, #8
 80082ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b0:	b003      	add	sp, #12
 80082b2:	4770      	bx	lr
 80082b4:	2000001c 	.word	0x2000001c

080082b8 <abort>:
 80082b8:	2006      	movs	r0, #6
 80082ba:	b508      	push	{r3, lr}
 80082bc:	f000 fa06 	bl	80086cc <raise>
 80082c0:	2001      	movs	r0, #1
 80082c2:	f7f9 fafa 	bl	80018ba <_exit>

080082c6 <_malloc_usable_size_r>:
 80082c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ca:	1f18      	subs	r0, r3, #4
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bfbc      	itt	lt
 80082d0:	580b      	ldrlt	r3, [r1, r0]
 80082d2:	18c0      	addlt	r0, r0, r3
 80082d4:	4770      	bx	lr

080082d6 <__sfputc_r>:
 80082d6:	6893      	ldr	r3, [r2, #8]
 80082d8:	b410      	push	{r4}
 80082da:	3b01      	subs	r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	6093      	str	r3, [r2, #8]
 80082e0:	da07      	bge.n	80082f2 <__sfputc_r+0x1c>
 80082e2:	6994      	ldr	r4, [r2, #24]
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	db01      	blt.n	80082ec <__sfputc_r+0x16>
 80082e8:	290a      	cmp	r1, #10
 80082ea:	d102      	bne.n	80082f2 <__sfputc_r+0x1c>
 80082ec:	bc10      	pop	{r4}
 80082ee:	f000 b931 	b.w	8008554 <__swbuf_r>
 80082f2:	6813      	ldr	r3, [r2, #0]
 80082f4:	1c58      	adds	r0, r3, #1
 80082f6:	6010      	str	r0, [r2, #0]
 80082f8:	7019      	strb	r1, [r3, #0]
 80082fa:	4608      	mov	r0, r1
 80082fc:	bc10      	pop	{r4}
 80082fe:	4770      	bx	lr

08008300 <__sfputs_r>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	4606      	mov	r6, r0
 8008304:	460f      	mov	r7, r1
 8008306:	4614      	mov	r4, r2
 8008308:	18d5      	adds	r5, r2, r3
 800830a:	42ac      	cmp	r4, r5
 800830c:	d101      	bne.n	8008312 <__sfputs_r+0x12>
 800830e:	2000      	movs	r0, #0
 8008310:	e007      	b.n	8008322 <__sfputs_r+0x22>
 8008312:	463a      	mov	r2, r7
 8008314:	4630      	mov	r0, r6
 8008316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831a:	f7ff ffdc 	bl	80082d6 <__sfputc_r>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d1f3      	bne.n	800830a <__sfputs_r+0xa>
 8008322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008324 <_vfiprintf_r>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	460d      	mov	r5, r1
 800832a:	4614      	mov	r4, r2
 800832c:	4698      	mov	r8, r3
 800832e:	4606      	mov	r6, r0
 8008330:	b09d      	sub	sp, #116	@ 0x74
 8008332:	b118      	cbz	r0, 800833c <_vfiprintf_r+0x18>
 8008334:	6a03      	ldr	r3, [r0, #32]
 8008336:	b90b      	cbnz	r3, 800833c <_vfiprintf_r+0x18>
 8008338:	f7fc fe06 	bl	8004f48 <__sinit>
 800833c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800833e:	07d9      	lsls	r1, r3, #31
 8008340:	d405      	bmi.n	800834e <_vfiprintf_r+0x2a>
 8008342:	89ab      	ldrh	r3, [r5, #12]
 8008344:	059a      	lsls	r2, r3, #22
 8008346:	d402      	bmi.n	800834e <_vfiprintf_r+0x2a>
 8008348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800834a:	f7fc ff14 	bl	8005176 <__retarget_lock_acquire_recursive>
 800834e:	89ab      	ldrh	r3, [r5, #12]
 8008350:	071b      	lsls	r3, r3, #28
 8008352:	d501      	bpl.n	8008358 <_vfiprintf_r+0x34>
 8008354:	692b      	ldr	r3, [r5, #16]
 8008356:	b99b      	cbnz	r3, 8008380 <_vfiprintf_r+0x5c>
 8008358:	4629      	mov	r1, r5
 800835a:	4630      	mov	r0, r6
 800835c:	f000 f938 	bl	80085d0 <__swsetup_r>
 8008360:	b170      	cbz	r0, 8008380 <_vfiprintf_r+0x5c>
 8008362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008364:	07dc      	lsls	r4, r3, #31
 8008366:	d504      	bpl.n	8008372 <_vfiprintf_r+0x4e>
 8008368:	f04f 30ff 	mov.w	r0, #4294967295
 800836c:	b01d      	add	sp, #116	@ 0x74
 800836e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008372:	89ab      	ldrh	r3, [r5, #12]
 8008374:	0598      	lsls	r0, r3, #22
 8008376:	d4f7      	bmi.n	8008368 <_vfiprintf_r+0x44>
 8008378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800837a:	f7fc fefd 	bl	8005178 <__retarget_lock_release_recursive>
 800837e:	e7f3      	b.n	8008368 <_vfiprintf_r+0x44>
 8008380:	2300      	movs	r3, #0
 8008382:	9309      	str	r3, [sp, #36]	@ 0x24
 8008384:	2320      	movs	r3, #32
 8008386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800838a:	2330      	movs	r3, #48	@ 0x30
 800838c:	f04f 0901 	mov.w	r9, #1
 8008390:	f8cd 800c 	str.w	r8, [sp, #12]
 8008394:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008540 <_vfiprintf_r+0x21c>
 8008398:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800839c:	4623      	mov	r3, r4
 800839e:	469a      	mov	sl, r3
 80083a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a4:	b10a      	cbz	r2, 80083aa <_vfiprintf_r+0x86>
 80083a6:	2a25      	cmp	r2, #37	@ 0x25
 80083a8:	d1f9      	bne.n	800839e <_vfiprintf_r+0x7a>
 80083aa:	ebba 0b04 	subs.w	fp, sl, r4
 80083ae:	d00b      	beq.n	80083c8 <_vfiprintf_r+0xa4>
 80083b0:	465b      	mov	r3, fp
 80083b2:	4622      	mov	r2, r4
 80083b4:	4629      	mov	r1, r5
 80083b6:	4630      	mov	r0, r6
 80083b8:	f7ff ffa2 	bl	8008300 <__sfputs_r>
 80083bc:	3001      	adds	r0, #1
 80083be:	f000 80a7 	beq.w	8008510 <_vfiprintf_r+0x1ec>
 80083c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083c4:	445a      	add	r2, fp
 80083c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80083c8:	f89a 3000 	ldrb.w	r3, [sl]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 809f 	beq.w	8008510 <_vfiprintf_r+0x1ec>
 80083d2:	2300      	movs	r3, #0
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083dc:	f10a 0a01 	add.w	sl, sl, #1
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	9307      	str	r3, [sp, #28]
 80083e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80083ea:	4654      	mov	r4, sl
 80083ec:	2205      	movs	r2, #5
 80083ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f2:	4853      	ldr	r0, [pc, #332]	@ (8008540 <_vfiprintf_r+0x21c>)
 80083f4:	f7fc fec1 	bl	800517a <memchr>
 80083f8:	9a04      	ldr	r2, [sp, #16]
 80083fa:	b9d8      	cbnz	r0, 8008434 <_vfiprintf_r+0x110>
 80083fc:	06d1      	lsls	r1, r2, #27
 80083fe:	bf44      	itt	mi
 8008400:	2320      	movmi	r3, #32
 8008402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008406:	0713      	lsls	r3, r2, #28
 8008408:	bf44      	itt	mi
 800840a:	232b      	movmi	r3, #43	@ 0x2b
 800840c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008410:	f89a 3000 	ldrb.w	r3, [sl]
 8008414:	2b2a      	cmp	r3, #42	@ 0x2a
 8008416:	d015      	beq.n	8008444 <_vfiprintf_r+0x120>
 8008418:	4654      	mov	r4, sl
 800841a:	2000      	movs	r0, #0
 800841c:	f04f 0c0a 	mov.w	ip, #10
 8008420:	9a07      	ldr	r2, [sp, #28]
 8008422:	4621      	mov	r1, r4
 8008424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008428:	3b30      	subs	r3, #48	@ 0x30
 800842a:	2b09      	cmp	r3, #9
 800842c:	d94b      	bls.n	80084c6 <_vfiprintf_r+0x1a2>
 800842e:	b1b0      	cbz	r0, 800845e <_vfiprintf_r+0x13a>
 8008430:	9207      	str	r2, [sp, #28]
 8008432:	e014      	b.n	800845e <_vfiprintf_r+0x13a>
 8008434:	eba0 0308 	sub.w	r3, r0, r8
 8008438:	fa09 f303 	lsl.w	r3, r9, r3
 800843c:	4313      	orrs	r3, r2
 800843e:	46a2      	mov	sl, r4
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	e7d2      	b.n	80083ea <_vfiprintf_r+0xc6>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	1d19      	adds	r1, r3, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	9103      	str	r1, [sp, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	bfbb      	ittet	lt
 8008450:	425b      	neglt	r3, r3
 8008452:	f042 0202 	orrlt.w	r2, r2, #2
 8008456:	9307      	strge	r3, [sp, #28]
 8008458:	9307      	strlt	r3, [sp, #28]
 800845a:	bfb8      	it	lt
 800845c:	9204      	strlt	r2, [sp, #16]
 800845e:	7823      	ldrb	r3, [r4, #0]
 8008460:	2b2e      	cmp	r3, #46	@ 0x2e
 8008462:	d10a      	bne.n	800847a <_vfiprintf_r+0x156>
 8008464:	7863      	ldrb	r3, [r4, #1]
 8008466:	2b2a      	cmp	r3, #42	@ 0x2a
 8008468:	d132      	bne.n	80084d0 <_vfiprintf_r+0x1ac>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	3402      	adds	r4, #2
 800846e:	1d1a      	adds	r2, r3, #4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	9203      	str	r2, [sp, #12]
 8008474:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008478:	9305      	str	r3, [sp, #20]
 800847a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008544 <_vfiprintf_r+0x220>
 800847e:	2203      	movs	r2, #3
 8008480:	4650      	mov	r0, sl
 8008482:	7821      	ldrb	r1, [r4, #0]
 8008484:	f7fc fe79 	bl	800517a <memchr>
 8008488:	b138      	cbz	r0, 800849a <_vfiprintf_r+0x176>
 800848a:	2240      	movs	r2, #64	@ 0x40
 800848c:	9b04      	ldr	r3, [sp, #16]
 800848e:	eba0 000a 	sub.w	r0, r0, sl
 8008492:	4082      	lsls	r2, r0
 8008494:	4313      	orrs	r3, r2
 8008496:	3401      	adds	r4, #1
 8008498:	9304      	str	r3, [sp, #16]
 800849a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849e:	2206      	movs	r2, #6
 80084a0:	4829      	ldr	r0, [pc, #164]	@ (8008548 <_vfiprintf_r+0x224>)
 80084a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084a6:	f7fc fe68 	bl	800517a <memchr>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d03f      	beq.n	800852e <_vfiprintf_r+0x20a>
 80084ae:	4b27      	ldr	r3, [pc, #156]	@ (800854c <_vfiprintf_r+0x228>)
 80084b0:	bb1b      	cbnz	r3, 80084fa <_vfiprintf_r+0x1d6>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	3307      	adds	r3, #7
 80084b6:	f023 0307 	bic.w	r3, r3, #7
 80084ba:	3308      	adds	r3, #8
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c0:	443b      	add	r3, r7
 80084c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c4:	e76a      	b.n	800839c <_vfiprintf_r+0x78>
 80084c6:	460c      	mov	r4, r1
 80084c8:	2001      	movs	r0, #1
 80084ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80084ce:	e7a8      	b.n	8008422 <_vfiprintf_r+0xfe>
 80084d0:	2300      	movs	r3, #0
 80084d2:	f04f 0c0a 	mov.w	ip, #10
 80084d6:	4619      	mov	r1, r3
 80084d8:	3401      	adds	r4, #1
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	4620      	mov	r0, r4
 80084de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084e2:	3a30      	subs	r2, #48	@ 0x30
 80084e4:	2a09      	cmp	r2, #9
 80084e6:	d903      	bls.n	80084f0 <_vfiprintf_r+0x1cc>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0c6      	beq.n	800847a <_vfiprintf_r+0x156>
 80084ec:	9105      	str	r1, [sp, #20]
 80084ee:	e7c4      	b.n	800847a <_vfiprintf_r+0x156>
 80084f0:	4604      	mov	r4, r0
 80084f2:	2301      	movs	r3, #1
 80084f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80084f8:	e7f0      	b.n	80084dc <_vfiprintf_r+0x1b8>
 80084fa:	ab03      	add	r3, sp, #12
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	462a      	mov	r2, r5
 8008500:	4630      	mov	r0, r6
 8008502:	4b13      	ldr	r3, [pc, #76]	@ (8008550 <_vfiprintf_r+0x22c>)
 8008504:	a904      	add	r1, sp, #16
 8008506:	f7fb fec5 	bl	8004294 <_printf_float>
 800850a:	4607      	mov	r7, r0
 800850c:	1c78      	adds	r0, r7, #1
 800850e:	d1d6      	bne.n	80084be <_vfiprintf_r+0x19a>
 8008510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008512:	07d9      	lsls	r1, r3, #31
 8008514:	d405      	bmi.n	8008522 <_vfiprintf_r+0x1fe>
 8008516:	89ab      	ldrh	r3, [r5, #12]
 8008518:	059a      	lsls	r2, r3, #22
 800851a:	d402      	bmi.n	8008522 <_vfiprintf_r+0x1fe>
 800851c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800851e:	f7fc fe2b 	bl	8005178 <__retarget_lock_release_recursive>
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	065b      	lsls	r3, r3, #25
 8008526:	f53f af1f 	bmi.w	8008368 <_vfiprintf_r+0x44>
 800852a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800852c:	e71e      	b.n	800836c <_vfiprintf_r+0x48>
 800852e:	ab03      	add	r3, sp, #12
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	462a      	mov	r2, r5
 8008534:	4630      	mov	r0, r6
 8008536:	4b06      	ldr	r3, [pc, #24]	@ (8008550 <_vfiprintf_r+0x22c>)
 8008538:	a904      	add	r1, sp, #16
 800853a:	f7fc f949 	bl	80047d0 <_printf_i>
 800853e:	e7e4      	b.n	800850a <_vfiprintf_r+0x1e6>
 8008540:	08008c11 	.word	0x08008c11
 8008544:	08008c17 	.word	0x08008c17
 8008548:	08008c1b 	.word	0x08008c1b
 800854c:	08004295 	.word	0x08004295
 8008550:	08008301 	.word	0x08008301

08008554 <__swbuf_r>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	460e      	mov	r6, r1
 8008558:	4614      	mov	r4, r2
 800855a:	4605      	mov	r5, r0
 800855c:	b118      	cbz	r0, 8008566 <__swbuf_r+0x12>
 800855e:	6a03      	ldr	r3, [r0, #32]
 8008560:	b90b      	cbnz	r3, 8008566 <__swbuf_r+0x12>
 8008562:	f7fc fcf1 	bl	8004f48 <__sinit>
 8008566:	69a3      	ldr	r3, [r4, #24]
 8008568:	60a3      	str	r3, [r4, #8]
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	071a      	lsls	r2, r3, #28
 800856e:	d501      	bpl.n	8008574 <__swbuf_r+0x20>
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	b943      	cbnz	r3, 8008586 <__swbuf_r+0x32>
 8008574:	4621      	mov	r1, r4
 8008576:	4628      	mov	r0, r5
 8008578:	f000 f82a 	bl	80085d0 <__swsetup_r>
 800857c:	b118      	cbz	r0, 8008586 <__swbuf_r+0x32>
 800857e:	f04f 37ff 	mov.w	r7, #4294967295
 8008582:	4638      	mov	r0, r7
 8008584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	6922      	ldr	r2, [r4, #16]
 800858a:	b2f6      	uxtb	r6, r6
 800858c:	1a98      	subs	r0, r3, r2
 800858e:	6963      	ldr	r3, [r4, #20]
 8008590:	4637      	mov	r7, r6
 8008592:	4283      	cmp	r3, r0
 8008594:	dc05      	bgt.n	80085a2 <__swbuf_r+0x4e>
 8008596:	4621      	mov	r1, r4
 8008598:	4628      	mov	r0, r5
 800859a:	f7ff fa4b 	bl	8007a34 <_fflush_r>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d1ed      	bne.n	800857e <__swbuf_r+0x2a>
 80085a2:	68a3      	ldr	r3, [r4, #8]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	60a3      	str	r3, [r4, #8]
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	6022      	str	r2, [r4, #0]
 80085ae:	701e      	strb	r6, [r3, #0]
 80085b0:	6962      	ldr	r2, [r4, #20]
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d004      	beq.n	80085c2 <__swbuf_r+0x6e>
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	07db      	lsls	r3, r3, #31
 80085bc:	d5e1      	bpl.n	8008582 <__swbuf_r+0x2e>
 80085be:	2e0a      	cmp	r6, #10
 80085c0:	d1df      	bne.n	8008582 <__swbuf_r+0x2e>
 80085c2:	4621      	mov	r1, r4
 80085c4:	4628      	mov	r0, r5
 80085c6:	f7ff fa35 	bl	8007a34 <_fflush_r>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d0d9      	beq.n	8008582 <__swbuf_r+0x2e>
 80085ce:	e7d6      	b.n	800857e <__swbuf_r+0x2a>

080085d0 <__swsetup_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4b29      	ldr	r3, [pc, #164]	@ (8008678 <__swsetup_r+0xa8>)
 80085d4:	4605      	mov	r5, r0
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	460c      	mov	r4, r1
 80085da:	b118      	cbz	r0, 80085e4 <__swsetup_r+0x14>
 80085dc:	6a03      	ldr	r3, [r0, #32]
 80085de:	b90b      	cbnz	r3, 80085e4 <__swsetup_r+0x14>
 80085e0:	f7fc fcb2 	bl	8004f48 <__sinit>
 80085e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e8:	0719      	lsls	r1, r3, #28
 80085ea:	d422      	bmi.n	8008632 <__swsetup_r+0x62>
 80085ec:	06da      	lsls	r2, r3, #27
 80085ee:	d407      	bmi.n	8008600 <__swsetup_r+0x30>
 80085f0:	2209      	movs	r2, #9
 80085f2:	602a      	str	r2, [r5, #0]
 80085f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	e033      	b.n	8008668 <__swsetup_r+0x98>
 8008600:	0758      	lsls	r0, r3, #29
 8008602:	d512      	bpl.n	800862a <__swsetup_r+0x5a>
 8008604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008606:	b141      	cbz	r1, 800861a <__swsetup_r+0x4a>
 8008608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800860c:	4299      	cmp	r1, r3
 800860e:	d002      	beq.n	8008616 <__swsetup_r+0x46>
 8008610:	4628      	mov	r0, r5
 8008612:	f7fd fc15 	bl	8005e40 <_free_r>
 8008616:	2300      	movs	r3, #0
 8008618:	6363      	str	r3, [r4, #52]	@ 0x34
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008620:	81a3      	strh	r3, [r4, #12]
 8008622:	2300      	movs	r3, #0
 8008624:	6063      	str	r3, [r4, #4]
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f043 0308 	orr.w	r3, r3, #8
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	b94b      	cbnz	r3, 800864a <__swsetup_r+0x7a>
 8008636:	89a3      	ldrh	r3, [r4, #12]
 8008638:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800863c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008640:	d003      	beq.n	800864a <__swsetup_r+0x7a>
 8008642:	4621      	mov	r1, r4
 8008644:	4628      	mov	r0, r5
 8008646:	f000 f882 	bl	800874e <__smakebuf_r>
 800864a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800864e:	f013 0201 	ands.w	r2, r3, #1
 8008652:	d00a      	beq.n	800866a <__swsetup_r+0x9a>
 8008654:	2200      	movs	r2, #0
 8008656:	60a2      	str	r2, [r4, #8]
 8008658:	6962      	ldr	r2, [r4, #20]
 800865a:	4252      	negs	r2, r2
 800865c:	61a2      	str	r2, [r4, #24]
 800865e:	6922      	ldr	r2, [r4, #16]
 8008660:	b942      	cbnz	r2, 8008674 <__swsetup_r+0xa4>
 8008662:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008666:	d1c5      	bne.n	80085f4 <__swsetup_r+0x24>
 8008668:	bd38      	pop	{r3, r4, r5, pc}
 800866a:	0799      	lsls	r1, r3, #30
 800866c:	bf58      	it	pl
 800866e:	6962      	ldrpl	r2, [r4, #20]
 8008670:	60a2      	str	r2, [r4, #8]
 8008672:	e7f4      	b.n	800865e <__swsetup_r+0x8e>
 8008674:	2000      	movs	r0, #0
 8008676:	e7f7      	b.n	8008668 <__swsetup_r+0x98>
 8008678:	2000001c 	.word	0x2000001c

0800867c <_raise_r>:
 800867c:	291f      	cmp	r1, #31
 800867e:	b538      	push	{r3, r4, r5, lr}
 8008680:	4605      	mov	r5, r0
 8008682:	460c      	mov	r4, r1
 8008684:	d904      	bls.n	8008690 <_raise_r+0x14>
 8008686:	2316      	movs	r3, #22
 8008688:	6003      	str	r3, [r0, #0]
 800868a:	f04f 30ff 	mov.w	r0, #4294967295
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008692:	b112      	cbz	r2, 800869a <_raise_r+0x1e>
 8008694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008698:	b94b      	cbnz	r3, 80086ae <_raise_r+0x32>
 800869a:	4628      	mov	r0, r5
 800869c:	f000 f830 	bl	8008700 <_getpid_r>
 80086a0:	4622      	mov	r2, r4
 80086a2:	4601      	mov	r1, r0
 80086a4:	4628      	mov	r0, r5
 80086a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086aa:	f000 b817 	b.w	80086dc <_kill_r>
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d00a      	beq.n	80086c8 <_raise_r+0x4c>
 80086b2:	1c59      	adds	r1, r3, #1
 80086b4:	d103      	bne.n	80086be <_raise_r+0x42>
 80086b6:	2316      	movs	r3, #22
 80086b8:	6003      	str	r3, [r0, #0]
 80086ba:	2001      	movs	r0, #1
 80086bc:	e7e7      	b.n	800868e <_raise_r+0x12>
 80086be:	2100      	movs	r1, #0
 80086c0:	4620      	mov	r0, r4
 80086c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086c6:	4798      	blx	r3
 80086c8:	2000      	movs	r0, #0
 80086ca:	e7e0      	b.n	800868e <_raise_r+0x12>

080086cc <raise>:
 80086cc:	4b02      	ldr	r3, [pc, #8]	@ (80086d8 <raise+0xc>)
 80086ce:	4601      	mov	r1, r0
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	f7ff bfd3 	b.w	800867c <_raise_r>
 80086d6:	bf00      	nop
 80086d8:	2000001c 	.word	0x2000001c

080086dc <_kill_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	2300      	movs	r3, #0
 80086e0:	4d06      	ldr	r5, [pc, #24]	@ (80086fc <_kill_r+0x20>)
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	4611      	mov	r1, r2
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	f7f9 f8d6 	bl	800189a <_kill>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	d102      	bne.n	80086f8 <_kill_r+0x1c>
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	b103      	cbz	r3, 80086f8 <_kill_r+0x1c>
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	bd38      	pop	{r3, r4, r5, pc}
 80086fa:	bf00      	nop
 80086fc:	20000420 	.word	0x20000420

08008700 <_getpid_r>:
 8008700:	f7f9 b8c4 	b.w	800188c <_getpid>

08008704 <__swhatbuf_r>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	460c      	mov	r4, r1
 8008708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870c:	4615      	mov	r5, r2
 800870e:	2900      	cmp	r1, #0
 8008710:	461e      	mov	r6, r3
 8008712:	b096      	sub	sp, #88	@ 0x58
 8008714:	da0c      	bge.n	8008730 <__swhatbuf_r+0x2c>
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	2100      	movs	r1, #0
 800871a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800871e:	bf14      	ite	ne
 8008720:	2340      	movne	r3, #64	@ 0x40
 8008722:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008726:	2000      	movs	r0, #0
 8008728:	6031      	str	r1, [r6, #0]
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	b016      	add	sp, #88	@ 0x58
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	466a      	mov	r2, sp
 8008732:	f000 f849 	bl	80087c8 <_fstat_r>
 8008736:	2800      	cmp	r0, #0
 8008738:	dbed      	blt.n	8008716 <__swhatbuf_r+0x12>
 800873a:	9901      	ldr	r1, [sp, #4]
 800873c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008740:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008744:	4259      	negs	r1, r3
 8008746:	4159      	adcs	r1, r3
 8008748:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800874c:	e7eb      	b.n	8008726 <__swhatbuf_r+0x22>

0800874e <__smakebuf_r>:
 800874e:	898b      	ldrh	r3, [r1, #12]
 8008750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008752:	079d      	lsls	r5, r3, #30
 8008754:	4606      	mov	r6, r0
 8008756:	460c      	mov	r4, r1
 8008758:	d507      	bpl.n	800876a <__smakebuf_r+0x1c>
 800875a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800875e:	6023      	str	r3, [r4, #0]
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	2301      	movs	r3, #1
 8008764:	6163      	str	r3, [r4, #20]
 8008766:	b003      	add	sp, #12
 8008768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876a:	466a      	mov	r2, sp
 800876c:	ab01      	add	r3, sp, #4
 800876e:	f7ff ffc9 	bl	8008704 <__swhatbuf_r>
 8008772:	9f00      	ldr	r7, [sp, #0]
 8008774:	4605      	mov	r5, r0
 8008776:	4639      	mov	r1, r7
 8008778:	4630      	mov	r0, r6
 800877a:	f7fd fbd3 	bl	8005f24 <_malloc_r>
 800877e:	b948      	cbnz	r0, 8008794 <__smakebuf_r+0x46>
 8008780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008784:	059a      	lsls	r2, r3, #22
 8008786:	d4ee      	bmi.n	8008766 <__smakebuf_r+0x18>
 8008788:	f023 0303 	bic.w	r3, r3, #3
 800878c:	f043 0302 	orr.w	r3, r3, #2
 8008790:	81a3      	strh	r3, [r4, #12]
 8008792:	e7e2      	b.n	800875a <__smakebuf_r+0xc>
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800879a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	9b01      	ldr	r3, [sp, #4]
 80087a2:	6020      	str	r0, [r4, #0]
 80087a4:	b15b      	cbz	r3, 80087be <__smakebuf_r+0x70>
 80087a6:	4630      	mov	r0, r6
 80087a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ac:	f000 f81e 	bl	80087ec <_isatty_r>
 80087b0:	b128      	cbz	r0, 80087be <__smakebuf_r+0x70>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	f023 0303 	bic.w	r3, r3, #3
 80087b8:	f043 0301 	orr.w	r3, r3, #1
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	431d      	orrs	r5, r3
 80087c2:	81a5      	strh	r5, [r4, #12]
 80087c4:	e7cf      	b.n	8008766 <__smakebuf_r+0x18>
	...

080087c8 <_fstat_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	2300      	movs	r3, #0
 80087cc:	4d06      	ldr	r5, [pc, #24]	@ (80087e8 <_fstat_r+0x20>)
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	4611      	mov	r1, r2
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	f7f9 f8bf 	bl	8001958 <_fstat>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	d102      	bne.n	80087e4 <_fstat_r+0x1c>
 80087de:	682b      	ldr	r3, [r5, #0]
 80087e0:	b103      	cbz	r3, 80087e4 <_fstat_r+0x1c>
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	bd38      	pop	{r3, r4, r5, pc}
 80087e6:	bf00      	nop
 80087e8:	20000420 	.word	0x20000420

080087ec <_isatty_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	2300      	movs	r3, #0
 80087f0:	4d05      	ldr	r5, [pc, #20]	@ (8008808 <_isatty_r+0x1c>)
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7f9 f8bd 	bl	8001976 <_isatty>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_isatty_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_isatty_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20000420 	.word	0x20000420

0800880c <_init>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr

08008818 <_fini>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr
