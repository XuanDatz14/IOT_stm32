
#include "main.h"
#include"I2C_LCD.h"
//#include"ds18b20.h"
#include<stdio.h>


I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void DWT_Delay_Init(void) {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CYCCNT = 0;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void DWT_Delay_us(uint32_t us) {
    uint32_t startTick = DWT->CYCCNT;
    uint32_t delayTicks = us * (SystemCoreClock / 1000000);
    while ((DWT->CYCCNT - startTick) < delayTicks);
}

void DS18B20_Pin_Output(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = ds18_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(ds18_GPIO_Port, &GPIO_InitStruct);
}

void DS18B20_Pin_Input(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = ds18_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ds18_GPIO_Port, &GPIO_InitStruct);
}

uint8_t DS18B20_Reset(void) {
    DS18B20_Pin_Output();
    HAL_GPIO_WritePin(ds18_GPIO_Port, ds18_Pin, GPIO_PIN_RESET);
    DWT_Delay_us(480);
    DS18B20_Pin_Input();
    DWT_Delay_us(70);
    uint8_t presence = HAL_GPIO_ReadPin(ds18_GPIO_Port, ds18_Pin);
    DWT_Delay_us(410);
    return presence == 0 ? 1 : 0;
}

void DS18B20_WriteBit(uint8_t bit) {
    DS18B20_Pin_Output();
    HAL_GPIO_WritePin(ds18_GPIO_Port, ds18_Pin, GPIO_PIN_RESET);
    DWT_Delay_us(2);
    if (bit) HAL_GPIO_WritePin(ds18_GPIO_Port, ds18_Pin, GPIO_PIN_SET);
    DWT_Delay_us(60);
    DS18B20_Pin_Input();
}

uint8_t DS18B20_ReadBit(void) {
    DS18B20_Pin_Output();
    HAL_GPIO_WritePin(ds18_GPIO_Port, ds18_Pin, GPIO_PIN_RESET);
    DWT_Delay_us(2);
    DS18B20_Pin_Input();
    DWT_Delay_us(10);
    uint8_t bit = HAL_GPIO_ReadPin(ds18_GPIO_Port, ds18_Pin);
    DWT_Delay_us(50);
    return bit;
}

void DS18B20_WriteByte(uint8_t data) {
    for (uint8_t i = 0; i < 8; i++) {
        DS18B20_WriteBit(data & 0x01);
        data >>= 1;
    }
}

uint8_t DS18B20_ReadByte(void) {
    uint8_t value = 0;
    for (uint8_t i = 0; i < 8; i++) {
        value >>= 1;
        if (DS18B20_ReadBit()) value |= 0x80;
    }
    return value;
}

float DS18B20_GetTemperature(void) {
    if (!DS18B20_Reset()) return -1000;
    DS18B20_WriteByte(0xCC);
    DS18B20_WriteByte(0x44);
    while (!DS18B20_ReadBit());
    if (!DS18B20_Reset()) return -1000;
    DS18B20_WriteByte(0xCC);
    DS18B20_WriteByte(0xBE);
    uint8_t temp_LSB = DS18B20_ReadByte();
    uint8_t temp_MSB = DS18B20_ReadByte();
    int16_t temp = (temp_MSB << 8) | temp_LSB;
    return temp / 16.0;
}

/* USER CODE END PFP */
volatile int temp_set = 25; // Giá trị nhiệt độ mục tiêu
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Temp(void) {
    char buffer[16];
    float temp = DS18B20_GetTemperature();
    if (temp != -1000) {
        sprintf(buffer, "Temp : %.2f C", temp);
    } else {
        sprintf(buffer, "Sensor Error!");
    }
    LCD_Clear();
    LCD_PutCursor(0, 0);
    LCD_SendString(buffer);
// in ra temp_set
    sprintf(buffer, "Temp Set : %d C", temp_set);
    LCD_PutCursor(1, 0);
    LCD_SendString(buffer);
}


void Read_Buttons() {


        if (HAL_GPIO_ReadPin(up_GPIO_Port, up_Pin) == 0) {
            temp_set++;
            Display_Temp();
        }




        if (HAL_GPIO_ReadPin(down_GPIO_Port, down_Pin) == 0) {
            temp_set--;
            Display_Temp();
        }
HAL_Delay(50);
}


/* USER CODE END 0 */


int main(void)
{

  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
HAL_TIM_Base_Start(&htim1);
LCD_Init();
DWT_Delay_Init();

LCD_SendString("..INSTALLING.......");
HAL_Delay(2000);
 LCD_Clear();
  /* USER CODE END 2 */
 float temp ;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 while (1) {
     Read_Buttons();
     temp = DS18B20_GetTemperature();
     Display_Temp(); // Hiển thị nhiệt độ lên LCD

     int fan_speed = (temp > temp_set + 5) ? 2 : (temp > temp_set ? 1 : 0);

     switch (fan_speed) {
         case 2: // Nhiệt độ cao (quá nóng)
             __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 999); // Quạt chạy 100%
             HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET); // Đèn tắt
             break;

         case 1: // Nhiệt độ hơi cao
             __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 300); // Quạt chạy 50%
             HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET); // Đèn bật
             break;

         case 0: // Nhiệt độ bình thường
             __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // Quạt tắt
             HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET); // Đèn bật
             break;
     }
 }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_Pin|ds18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : led_Pin ds18_Pin */
  GPIO_InitStruct.Pin = led_Pin|ds18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : up_Pin down_Pin */
  /* Configure GPIO pins for buttons with Pull-Up */
  GPIO_InitStruct.Pin = up_Pin | down_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;  // Chuyển sang chế độ input thông thường
  GPIO_InitStruct.Pull = GPIO_NOPULL;      // Kích hoạt chế độ pull-up nội
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);




/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
